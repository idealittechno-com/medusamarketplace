"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  SwcMinifyWebpackPlugin: () => SwcMinifyWebpackPlugin
});
module.exports = __toCommonJS(src_exports);
var import_core = require("@swc/core");
var import_webpack = __toESM(require("webpack"));
var { RawSource, SourceMapSource } = import_webpack.default.sources;
var isJsFile = /\.[cm]?js(\?.*)?$/i;
var SwcMinifyWebpackPlugin = class {
  constructor(options = {}) {
    this.options = {
      compress: true,
      mangle: true
    };
    Object.assign(this.options, options);
  }
  apply(compiler) {
    const pluginName = this.constructor.name;
    const meta = JSON.stringify({
      name: pluginName,
      version: "2.1.1",
      options: this.options
    });
    compiler.hooks.compilation.tap(pluginName, (compilation) => {
      compilation.hooks.chunkHash.tap(pluginName, (_, hash) => hash.update(meta));
      compilation.hooks.processAssets.tapPromise(
        {
          name: pluginName,
          stage: compilation.constructor.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,
          additionalAssets: true
        },
        () => this.transformAssets(compilation)
      );
      compilation.hooks.statsPrinter.tap(pluginName, (stats) => {
        stats.hooks.print.for("asset.info.minimized").tap("swc-minify-webpack-plugin", (minimized, { green, formatFlag }) => {
          if (minimized) {
            if (green && formatFlag) {
              return green(formatFlag("minimized"));
            } else {
              return "minimized";
            }
          } else {
            return "";
          }
        });
      });
    });
  }
  transformAssets(compilation) {
    const {
      options: { devtool }
    } = compilation.compiler;
    const sourceMap = this.options.sourceMap === void 0 ? !!devtool && devtool.includes("source-map") : this.options.sourceMap;
    const assets = compilation.getAssets().filter((asset) => !asset.info.minimized && isJsFile.test(asset.name));
    return this.processAssets(assets, sourceMap, compilation);
  }
  async processAssets(assets, sourceMap, compilation) {
    await Promise.all(
      assets.map(async (asset) => {
        const { source, map } = asset.source.sourceAndMap();
        const sourceAsString = source.toString();
        const result = await (0, import_core.minify)(sourceAsString, {
          ...this.options,
          sourceMap
        });
        const newSource = sourceMap && result.map ? new SourceMapSource(
          result.code,
          asset.name,
          result.map,
          sourceAsString,
          map,
          true
        ) : new RawSource(result.code);
        compilation.updateAsset(asset.name, newSource, {
          ...asset.info,
          minimized: true
        });
      })
    );
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SwcMinifyWebpackPlugin
});
