"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var mongoose_1 = __importDefault(require("mongoose"));
/**
 * Interface for data models. The default data layer uses an internal mongoose
 * model and is as such compatible with MongoDB.
 * @interface
 */
var BaseModel = /** @class */ (function () {
    function BaseModel() {
        /** @const the underlying mongoose model used for queries */
        this.mongooseModel_ = this.createMongooseModel_();
    }
    /**
     * Returns the model schema. The child class must implement the static schema
     * property.
     * @return {string} the models schema
     */
    BaseModel.prototype.getSchema = function () {
        if (!this.constructor.schema) {
            throw new Error("Schema not defined");
        }
        return this.constructor.schema;
    };
    /**
     * Returns the model name. The child class must implement the static modelName
     * property.
     * @return {string} the name of the model
     */
    BaseModel.prototype.getModelName = function () {
        if (!this.constructor.modelName) {
            throw new Error("Every model must have a static modelName property");
        }
        return this.constructor.modelName;
    };
    /**
     * Returns the schema options defined in child class.
     * @return {object} the schema options
     */
    BaseModel.prototype.getSchemaOptions = function () {
        if (!this.constructor.schemaOptions) {
            return {};
        }
        return this.constructor.schemaOptions;
    };
    /**
     * @private
     * Creates a mongoose model based on schema, schema options and model name.
     * @return {Mongooose.Model} the mongoose model
     */
    BaseModel.prototype.createMongooseModel_ = function () {
        var schema = this.getSchema();
        var options = this.getSchemaOptions();
        var mongooseSchema = new mongoose_1.default.Schema(schema, options);
        return mongoose_1.default.model(this.getModelName(), mongooseSchema);
    };
    /**
     */
    BaseModel.prototype.startSession = function () {
        return this.mongooseModel_.startSession();
    };
    /**
     * Queries the mongoose model via the mongoose's findOne.
     * @param query {object} a mongoose selector query
     * @param options {?object=} mongoose options
     * @return {?mongoose.Document} the retreived mongoose document or null.
     */
    BaseModel.prototype.findOne = function (query, options) {
        if (options === void 0) { options = {}; }
        return this.mongooseModel_.findOne(query, options).lean();
    };
    /**
     * Queries the mongoose model via the mongoose's find.
     * @param query {object} a mongoose selector query
     * @param options {?object=} mongoose options
     * @return {Array<mongoose.Document>} the retreived mongoose documents or
     * an empty array
     */
    BaseModel.prototype.find = function (query, options, offset, limit) {
        return this.mongooseModel_
            .find(query, options)
            .skip(offset)
            .limit(limit)
            .lean();
    };
    BaseModel.prototype.count = function () {
        return this.mongooseModel_.count({});
    };
    /**
     * Update a model via the mongoose model's updateOne.
     * @param query {object} a mongoose selector query
     * @param update {object} mongoose update object
     * @param options {?object=} mongoose options
     * @return {object} mongoose result
     */
    BaseModel.prototype.updateOne = function (query, update, options) {
        if (options === void 0) { options = {}; }
        options.new = true;
        return this.mongooseModel_.findOneAndUpdate(query, update, options).lean();
    };
    /**
     * Update a model via the mongoose model's update.
     * @param query {object} a mongoose selector query
     * @param update {object} mongoose update object
     * @param options {?object=} mongoose options
     * @return {object} mongoose result
     */
    BaseModel.prototype.update = function (query, update, options) {
        return this.mongooseModel_.update(query, update, options);
    };
    /**
     * Creates a document in the mongoose model's collection via create.
     * @param object {object} the value of the document to be created
     * @param options {?object=} mongoose options
     * @return {object} mongoose result
     */
    BaseModel.prototype.create = function (object, options) {
        return this.mongooseModel_.create(object, options);
    };
    /**
     * Deletes a document in the mongoose model's collection
     * @param query {object} the value of the document to be created
     * @param options {?object=} mongoose options
     * @return {object} mongoose result
     */
    BaseModel.prototype.deleteOne = function (query, options) {
        return this.mongooseModel_.deleteOne(query, options);
    };
    /**
     * Deletes many document in the mongoose model's collection
     * @param query {object} the value of the document to be created
     * @param options {?object=} mongoose options
     * @return {object} mongoose result
     */
    BaseModel.prototype.delete = function (query, options) {
        return this.mongooseModel_.deleteMany(query, options);
    };
    return BaseModel;
}());
exports.default = BaseModel;
//# sourceMappingURL=base-model.js.map