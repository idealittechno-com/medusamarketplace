export default BaseModel;
/**
 * Interface for data models. The default data layer uses an internal mongoose
 * model and is as such compatible with MongoDB.
 * @interface
 */
declare class BaseModel {
    /** @const the underlying mongoose model used for queries */
    mongooseModel_: Mongooose.Model;
    /**
     * Returns the model schema. The child class must implement the static schema
     * property.
     * @return {string} the models schema
     */
    getSchema(): string;
    /**
     * Returns the model name. The child class must implement the static modelName
     * property.
     * @return {string} the name of the model
     */
    getModelName(): string;
    /**
     * Returns the schema options defined in child class.
     * @return {object} the schema options
     */
    getSchemaOptions(): object;
    /**
     * @private
     * Creates a mongoose model based on schema, schema options and model name.
     * @return {Mongooose.Model} the mongoose model
     */
    private createMongooseModel_;
    /**
     */
    startSession(): any;
    /**
     * Queries the mongoose model via the mongoose's findOne.
     * @param query {object} a mongoose selector query
     * @param options {?object=} mongoose options
     * @return {?mongoose.Document} the retreived mongoose document or null.
     */
    findOne(query: object, options?: (object | null) | undefined): mongoose.Document | null;
    /**
     * Queries the mongoose model via the mongoose's find.
     * @param query {object} a mongoose selector query
     * @param options {?object=} mongoose options
     * @return {Array<mongoose.Document>} the retreived mongoose documents or
     * an empty array
     */
    find(query: object, options?: (object | null) | undefined, offset: any, limit: any): Array<mongoose.Document>;
    count(): any;
    /**
     * Update a model via the mongoose model's updateOne.
     * @param query {object} a mongoose selector query
     * @param update {object} mongoose update object
     * @param options {?object=} mongoose options
     * @return {object} mongoose result
     */
    updateOne(query: object, update: object, options?: (object | null) | undefined): object;
    /**
     * Update a model via the mongoose model's update.
     * @param query {object} a mongoose selector query
     * @param update {object} mongoose update object
     * @param options {?object=} mongoose options
     * @return {object} mongoose result
     */
    update(query: object, update: object, options?: (object | null) | undefined): object;
    /**
     * Creates a document in the mongoose model's collection via create.
     * @param object {object} the value of the document to be created
     * @param options {?object=} mongoose options
     * @return {object} mongoose result
     */
    create(object: object, options?: (object | null) | undefined): object;
    /**
     * Deletes a document in the mongoose model's collection
     * @param query {object} the value of the document to be created
     * @param options {?object=} mongoose options
     * @return {object} mongoose result
     */
    deleteOne(query: object, options?: (object | null) | undefined): object;
    /**
     * Deletes many document in the mongoose model's collection
     * @param query {object} the value of the document to be created
     * @param options {?object=} mongoose options
     * @return {object} mongoose result
     */
    delete(query: object, options?: (object | null) | undefined): object;
}
import mongoose from "mongoose";
