{"version":3,"sources":["../src/index.ts","../src/contexts/medusa.tsx","../src/contexts/session-cart.tsx","../src/utils/index.ts","../src/helpers/index.ts","../src/hooks/utils/queryKeysFactory.ts","../src/hooks/utils/useLocalStorage.ts","../src/contexts/cart.tsx","../src/hooks/store/carts/queries.ts","../src/hooks/store/carts/mutations.ts","../src/hooks/store/collections/queries.ts","../src/hooks/store/customers/queries.ts","../src/hooks/store/customers/mutations.ts","../src/hooks/store/gift-cards/queries.ts","../src/hooks/store/line-items/mutations.ts","../src/hooks/store/order-edits/queries.ts","../src/hooks/store/order-edits/mutations.ts","../src/hooks/utils/buildOptions.ts","../src/hooks/store/orders/queries.ts","../src/hooks/store/orders/mutations.ts","../src/hooks/store/payment-collections/queries.ts","../src/hooks/store/payment-collections/mutations.ts","../src/hooks/store/product-categories/queries.ts","../src/hooks/store/product-tags/queries.ts","../src/hooks/store/product-types/queries.ts","../src/hooks/store/products/queries.ts","../src/hooks/store/regions/queries.ts","../src/hooks/store/return-reasons/queries.ts","../src/hooks/store/returns/mutations.ts","../src/hooks/store/shipping-options/queries.ts","../src/hooks/store/swaps/queries.ts","../src/hooks/store/swaps/mutations.ts","../src/hooks/admin/auth/queries.ts","../src/hooks/admin/auth/mutations.ts","../src/hooks/admin/batch-jobs/queries.ts","../src/hooks/admin/batch-jobs/mutations.ts","../src/hooks/admin/claims/mutations.ts","../src/hooks/admin/products/queries.ts","../src/hooks/admin/products/mutations.ts","../src/hooks/admin/variants/queries.ts","../src/hooks/admin/orders/queries.ts","../src/hooks/admin/collections/queries.ts","../src/hooks/admin/collections/mutations.ts","../src/hooks/admin/currencies/mutations.ts","../src/hooks/admin/currencies/queries.ts","../src/hooks/admin/custom/mutations.ts","../src/hooks/admin/customer-groups/queries.ts","../src/hooks/admin/customer-groups/mutations.ts","../src/hooks/admin/customers/queries.ts","../src/hooks/admin/customers/mutations.ts","../src/hooks/admin/discounts/queries.ts","../src/hooks/admin/discounts/mutations.ts","../src/hooks/admin/gift-cards/queries.ts","../src/hooks/admin/gift-cards/mutations.ts","../src/hooks/admin/orders/mutations.ts","../src/hooks/admin/price-lists/queries.ts","../src/hooks/admin/price-lists/mutations.ts","../src/hooks/admin/custom/queries.ts","../src/hooks/admin/draft-orders/queries.ts","../src/hooks/admin/draft-orders/mutations.ts","../src/hooks/admin/inventory-item/queries.ts","../src/hooks/admin/inventory-item/mutations.ts","../src/hooks/admin/invites/queries.ts","../src/hooks/admin/invites/mutations.ts","../src/hooks/admin/notes/queries.ts","../src/hooks/admin/notes/mutations.ts","../src/hooks/admin/notifications/queries.ts","../src/hooks/admin/notifications/mutations.ts","../src/hooks/admin/order-edits/queries.ts","../src/hooks/admin/order-edits/mutations.ts","../src/hooks/admin/payment-collections/queries.ts","../src/hooks/admin/payment-collections/mutations.ts","../src/hooks/admin/payments/queries.ts","../src/hooks/admin/payments/mutations.ts","../src/hooks/admin/product-categories/queries.ts","../src/hooks/admin/product-categories/mutations.ts","../src/hooks/admin/product-tags/queries.ts","../src/hooks/admin/product-types/queries.ts","../src/hooks/admin/publishable-api-keys/queries.ts","../src/hooks/admin/publishable-api-keys/mutations.ts","../src/hooks/admin/regions/queries.ts","../src/hooks/admin/regions/mutations.ts","../src/hooks/admin/reservations/mutations.ts","../src/hooks/admin/reservations/queries.ts","../src/hooks/admin/return-reasons/queries.ts","../src/hooks/admin/return-reasons/mutations.ts","../src/hooks/admin/returns/queries.ts","../src/hooks/admin/returns/mutations.ts","../src/hooks/admin/sales-channels/queries.ts","../src/hooks/admin/sales-channels/mutations.ts","../src/hooks/admin/stock-locations/queries.ts","../src/hooks/admin/stock-locations/mutations.ts","../src/hooks/admin/shipping-options/queries.ts","../src/hooks/admin/shipping-options/mutations.ts","../src/hooks/admin/shipping-profiles/queries.ts","../src/hooks/admin/shipping-profiles/mutations.ts","../src/hooks/admin/store/queries.ts","../src/hooks/admin/store/mutations.ts","../src/hooks/admin/swaps/queries.ts","../src/hooks/admin/swaps/mutations.ts","../src/hooks/admin/tax-rates/queries.ts","../src/hooks/admin/tax-rates/mutations.ts","../src/hooks/admin/uploads/mutations.ts","../src/hooks/admin/users/queries.ts","../src/hooks/admin/users/mutations.ts"],"sourcesContent":["export * from \"./contexts\"\nexport * from \"./hooks/\"\nexport * from \"./helpers\"\n","import Medusa from \"@medusajs/medusa-js\"\nimport {\n  QueryClientProvider,\n  QueryClientProviderProps,\n} from \"@tanstack/react-query\"\nimport React from \"react\"\n\ninterface MedusaContextState {\n  client: Medusa\n}\n\nconst MedusaContext = React.createContext<MedusaContextState | null>(null)\n\nexport const useMedusa = () => {\n  const context = React.useContext(MedusaContext)\n  if (!context) {\n    throw new Error(\"useMedusa must be used within a MedusaProvider\")\n  }\n  return context\n}\n\ninterface MedusaProviderProps {\n  baseUrl: string\n  queryClientProviderProps: QueryClientProviderProps\n  children: React.ReactNode\n  /**\n   * Authentication token\n   */\n  apiKey?: string\n  /**\n   * PublishableApiKey identifier that defines the scope of resources\n   * available within the request\n   */\n  publishableApiKey?: string\n  customHeaders?: Record<string, any>\n}\n\nexport const MedusaProvider = ({\n  queryClientProviderProps,\n  baseUrl,\n  apiKey,\n  publishableApiKey,\n  customHeaders,\n  children,\n}: MedusaProviderProps) => {\n  const medusaClient = new Medusa({\n    baseUrl,\n    maxRetries: 0,\n    apiKey,\n    publishableApiKey,\n    customHeaders\n  })\n  return (\n    <QueryClientProvider {...queryClientProviderProps}>\n      <MedusaContext.Provider\n        value={{\n          client: medusaClient,\n        }}\n      >\n        {children}\n      </MedusaContext.Provider>\n    </QueryClientProvider>\n  )\n}\n","import React, { useContext, useEffect } from \"react\"\nimport { getVariantPrice } from \"../helpers\"\nimport { useLocalStorage } from \"../hooks/utils\"\nimport { ProductVariant, RegionInfo } from \"../types\"\nimport { isArray, isEmpty, isObject } from \"../utils\"\n\ninterface Item {\n  variant: ProductVariant\n  quantity: number\n  readonly total?: number\n}\n\nexport interface SessionCartState {\n  region: RegionInfo\n  items: Item[]\n  totalItems: number\n  total: number\n}\n\ninterface SessionCartContextState extends SessionCartState {\n  setRegion: (region: RegionInfo) => void\n  addItem: (item: Item) => void\n  removeItem: (id: string) => void\n  updateItem: (id: string, item: Partial<Item>) => void\n  setItems: (items: Item[]) => void\n  updateItemQuantity: (id: string, quantity: number) => void\n  incrementItemQuantity: (id: string) => void\n  decrementItemQuantity: (id: string) => void\n  getItem: (id: string) => Item | undefined\n  clearItems: () => void\n}\n\nconst SessionCartContext = React.createContext<SessionCartContextState | null>(\n  null\n)\n\nenum ACTION_TYPES {\n  INIT,\n  ADD_ITEM,\n  SET_ITEMS,\n  REMOVE_ITEM,\n  UPDATE_ITEM,\n  CLEAR_ITEMS,\n  SET_REGION,\n}\n\ntype Action =\n  | { type: ACTION_TYPES.SET_REGION; payload: RegionInfo }\n  | { type: ACTION_TYPES.INIT; payload: object }\n  | { type: ACTION_TYPES.ADD_ITEM; payload: Item }\n  | {\n      type: ACTION_TYPES.UPDATE_ITEM\n      payload: { id: string; item: Partial<Item> }\n    }\n  | { type: ACTION_TYPES.REMOVE_ITEM; payload: { id: string } }\n  | { type: ACTION_TYPES.SET_ITEMS; payload: Item[] }\n  | { type: ACTION_TYPES.CLEAR_ITEMS }\n\nconst reducer = (state: SessionCartState, action: Action) => {\n  switch (action.type) {\n    case ACTION_TYPES.INIT: {\n      return state\n    }\n    case ACTION_TYPES.SET_REGION: {\n      return generateCartState(\n        {\n          ...state,\n          region: action.payload,\n        },\n        state.items\n      )\n    }\n    case ACTION_TYPES.ADD_ITEM: {\n      const duplicateVariantIndex = state.items.findIndex(\n        (item) => item.variant.id === action.payload?.variant?.id\n      )\n      if (duplicateVariantIndex !== -1) {\n        state.items.splice(duplicateVariantIndex, 1)\n      }\n      const items = [...state.items, action.payload]\n      return generateCartState(state, items)\n    }\n    case ACTION_TYPES.UPDATE_ITEM: {\n      const items = state.items.map((item) =>\n        item.variant.id === action.payload.id\n          ? { ...item, ...action.payload.item }\n          : item\n      )\n\n      return generateCartState(state, items)\n    }\n    case ACTION_TYPES.REMOVE_ITEM: {\n      const items = state.items.filter(\n        (item) => item.variant.id !== action.payload.id\n      )\n      return generateCartState(state, items)\n    }\n    case ACTION_TYPES.SET_ITEMS: {\n      return generateCartState(state, action.payload)\n    }\n    case ACTION_TYPES.CLEAR_ITEMS: {\n      return {\n        ...state,\n        items: [],\n        total: 0,\n        totalItems: 0,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nexport const generateCartState = (state: SessionCartState, items: Item[]) => {\n  const newItems = generateItems(state.region, items)\n  return {\n    ...state,\n    items: newItems,\n    totalItems: items.reduce((sum, item) => sum + item.quantity, 0),\n    total: calculateSessionCartTotal(newItems),\n  }\n}\n\nconst generateItems = (region: RegionInfo, items: Item[]) => {\n  return items.map((item) => ({\n    ...item,\n    total: getVariantPrice(item.variant, region),\n  }))\n}\n\nconst calculateSessionCartTotal = (items: Item[]) => {\n  return items.reduce(\n    (total, item) => total + item.quantity * (item.total || 0),\n    0\n  )\n}\n\ninterface SessionCartProviderProps {\n  children: React.ReactNode\n  initialState?: SessionCartState\n}\n\nconst defaultInitialState: SessionCartState = {\n  region: {} as RegionInfo,\n  items: [],\n  total: 0,\n  totalItems: 0,\n}\n\nexport const SessionCartProvider = ({\n  initialState = defaultInitialState,\n  children,\n}: SessionCartProviderProps) => {\n  const [saved, save] = useLocalStorage(\n    \"medusa-session-cart\",\n    JSON.stringify(initialState)\n  )\n\n  const [state, dispatch] = React.useReducer(reducer, JSON.parse(saved))\n\n  useEffect(() => {\n    save(JSON.stringify(state))\n  }, [state, save])\n\n  const setRegion = (region: RegionInfo) => {\n    if (!isObject(region) || isEmpty(region)) {\n      throw new Error(\"region must be a non-empty object\")\n    }\n\n    dispatch({ type: ACTION_TYPES.SET_REGION, payload: region })\n  }\n\n  const getItem = (id: string) => {\n    return state.items.find((item) => item.variant.id === id)\n  }\n\n  const setItems = (items: Item[]) => {\n    if (!isArray(items)) {\n      throw new Error(\"items must be an array of items\")\n    }\n\n    dispatch({ type: ACTION_TYPES.SET_ITEMS, payload: items })\n  }\n\n  const addItem = (item: Item) => {\n    if (!isObject(item) || isEmpty(item)) {\n      throw new Error(\"item must be a non-empty object\")\n    }\n\n    dispatch({ type: ACTION_TYPES.ADD_ITEM, payload: item })\n  }\n\n  const updateItem = (id: string, item: Partial<Item>) => {\n    dispatch({ type: ACTION_TYPES.UPDATE_ITEM, payload: { id, item } })\n  }\n\n  const updateItemQuantity = (id: string, quantity: number) => {\n    const item = getItem(id)\n    if (!item) return\n\n    quantity = quantity <= 0 ? 1 : quantity\n\n    dispatch({\n      type: ACTION_TYPES.UPDATE_ITEM,\n      payload: {\n        id,\n        item: {\n          ...item,\n          quantity: Math.min(item.variant.inventory_quantity, quantity),\n        },\n      },\n    })\n  }\n\n  const incrementItemQuantity = (id: string) => {\n    const item = getItem(id)\n    if (!item) return\n\n    dispatch({\n      type: ACTION_TYPES.UPDATE_ITEM,\n      payload: {\n        id,\n        item: {\n          ...item,\n          quantity: Math.min(\n            item.variant.inventory_quantity,\n            item.quantity + 1\n          ),\n        },\n      },\n    })\n  }\n\n  const decrementItemQuantity = (id: string) => {\n    const item = getItem(id)\n    if (!item) return\n\n    dispatch({\n      type: ACTION_TYPES.UPDATE_ITEM,\n      payload: {\n        id,\n        item: { ...item, quantity: Math.max(0, item.quantity - 1) },\n      },\n    })\n  }\n\n  const removeItem = (id: string) => {\n    dispatch({\n      type: ACTION_TYPES.REMOVE_ITEM,\n      payload: { id },\n    })\n  }\n\n  const clearItems = () => {\n    dispatch({\n      type: ACTION_TYPES.CLEAR_ITEMS,\n    })\n  }\n\n  return (\n    <SessionCartContext.Provider\n      value={{\n        ...state,\n        setRegion,\n        addItem,\n        updateItem,\n        updateItemQuantity,\n        incrementItemQuantity,\n        decrementItemQuantity,\n        removeItem,\n        getItem,\n        setItems,\n        clearItems,\n      }}\n    >\n      {children}\n    </SessionCartContext.Provider>\n  )\n}\n\nexport const useSessionCart = () => {\n  const context = useContext(SessionCartContext)\n  if (!context) {\n    throw new Error(\n      \"useSessionCart should be used as a child of SessionCartProvider\"\n    )\n  }\n  return context\n}\n","export const isObject = (input: any) => input instanceof Object\nexport const isArray = (input: any) => Array.isArray(input)\nexport const isEmpty = (input: any) => {\n  return (\n    input === null ||\n    input === undefined ||\n    (isObject(input) && Object.keys(input).length === 0) ||\n    (isArray(input) && (input as any[]).length === 0) ||\n    (typeof input === \"string\" && input.trim().length === 0)\n  )\n}\n","import { ProductVariantInfo, RegionInfo } from \"../types\"\nimport { isEmpty } from \"../utils\"\n\ntype FormatVariantPriceParams = {\n  variant: ProductVariantInfo\n  region: RegionInfo\n  includeTaxes?: boolean\n  minimumFractionDigits?: number\n  maximumFractionDigits?: number\n  locale?: string\n}\n\n/**\n * Takes a product variant and a region, and converts the variant's price to a localized decimal format\n */\nexport const formatVariantPrice = ({\n  variant,\n  region,\n  includeTaxes = true,\n  ...rest\n}: FormatVariantPriceParams) => {\n  const amount = computeVariantPrice({ variant, region, includeTaxes })\n\n  return convertToLocale({\n    amount,\n    currency_code: region?.currency_code,\n    ...rest,\n  })\n}\n\ntype ComputeVariantPriceParams = {\n  variant: ProductVariantInfo\n  region: RegionInfo\n  includeTaxes?: boolean\n}\n\n/**\n * Takes a product variant and region, and returns the variant price as a decimal number\n * @param params.variant - product variant\n * @param params.region - region\n * @param params.includeTaxes - whether to include taxes or not\n */\nexport const computeVariantPrice = ({\n  variant,\n  region,\n  includeTaxes = true,\n}: ComputeVariantPriceParams) => {\n  const amount = getVariantPrice(variant, region)\n\n  return computeAmount({\n    amount,\n    region,\n    includeTaxes,\n  })\n}\n\n/**\n * Finds the price amount correspoding to the region selected\n * @param variant - the product variant\n * @param region - the region\n * @returns - the price's amount\n */\nexport const getVariantPrice = (\n  variant: ProductVariantInfo,\n  region: RegionInfo\n) => {\n  let price = variant?.prices?.find(\n    (p) =>\n      p.currency_code.toLowerCase() === region?.currency_code?.toLowerCase()\n  )\n\n  return price?.amount || 0\n}\n\ntype ComputeAmountParams = {\n  amount: number\n  region: RegionInfo\n  includeTaxes?: boolean\n}\n\n/**\n * Takes an amount, a region, and returns the amount as a decimal including or excluding taxes\n */\nexport const computeAmount = ({\n  amount,\n  region,\n  includeTaxes = true,\n}: ComputeAmountParams) => {\n  const toDecimal = convertToDecimal(amount, region)\n\n  const taxRate = includeTaxes ? getTaxRate(region) : 0\n\n  const amountWithTaxes = toDecimal * (1 + taxRate)\n\n  return amountWithTaxes\n}\n\ntype FormatAmountParams = {\n  amount: number\n  region: RegionInfo\n  includeTaxes?: boolean\n  minimumFractionDigits?: number\n  maximumFractionDigits?: number\n  locale?: string\n}\n\n/**\n * Takes an amount and a region, and converts the amount to a localized decimal format\n */\nexport const formatAmount = ({\n  amount,\n  region,\n  includeTaxes = true,\n  ...rest\n}: FormatAmountParams) => {\n  const taxAwareAmount = computeAmount({\n    amount,\n    region,\n    includeTaxes,\n  })\n  return convertToLocale({\n    amount: taxAwareAmount,\n    currency_code: region.currency_code,\n    ...rest,\n  })\n}\n\n// we should probably add a more extensive list\nconst noDivisionCurrencies = [\"krw\", \"jpy\", \"vnd\"]\n\nconst convertToDecimal = (amount: number, region: RegionInfo) => {\n  const divisor = noDivisionCurrencies.includes(\n    region?.currency_code?.toLowerCase()\n  )\n    ? 1\n    : 100\n\n  return Math.floor(amount) / divisor\n}\n\nconst getTaxRate = (region?: RegionInfo) => {\n  return region && !isEmpty(region) ? region?.tax_rate / 100 : 0\n}\n\nconst convertToLocale = ({\n  amount,\n  currency_code,\n  minimumFractionDigits,\n  maximumFractionDigits,\n  locale = \"en-US\",\n}: ConvertToLocaleParams) => {\n  return currency_code && !isEmpty(currency_code)\n    ? new Intl.NumberFormat(locale, {\n        style: \"currency\",\n        currency: currency_code,\n        minimumFractionDigits,\n        maximumFractionDigits,\n      }).format(amount)\n    : amount.toString()\n}\n\ntype ConvertToLocaleParams = {\n  amount: number\n  currency_code: string\n  minimumFractionDigits?: number\n  maximumFractionDigits?: number\n  locale?: string\n}\n","import { TQueryKey } from \"../../types\"\n\nexport const queryKeysFactory = <\n  T,\n  TListQueryType = any,\n  TDetailQueryType = string\n>(\n  globalKey: T\n) => {\n  const queryKeyFactory: TQueryKey<T, TListQueryType, TDetailQueryType> = {\n    all: [globalKey],\n    lists: () => [...queryKeyFactory.all, \"list\"],\n    list: (query?: TListQueryType) => [...queryKeyFactory.lists(), { query }],\n    details: () => [...queryKeyFactory.all, \"detail\"],\n    detail: (id: TDetailQueryType) => [...queryKeyFactory.details(), id],\n  }\n  return queryKeyFactory\n}\n","import * as React from \"react\"\n\nexport const useLocalStorage = (key: string, initialState: string) => {\n  const [item, setItem] = React.useState(() => {\n    try {\n      const item =\n        typeof window !== \"undefined\" && window.localStorage.getItem(key)\n\n      return item || initialState\n    } catch (err) {\n      return initialState\n    }\n  })\n\n  const save = (data: string) => {\n    setItem(data)\n\n    if (typeof window !== \"undefined\") {\n      window.localStorage.setItem(key, data)\n    }\n  }\n\n  const remove = () => {\n    if (typeof window !== \"undefined\") {\n      window.localStorage.removeItem(key)\n    }\n  }\n\n  return [item, save, remove] as const\n}\n","import React, { useState } from \"react\"\nimport {\n  useAddShippingMethodToCart,\n  useCompleteCart,\n  useCreateCart,\n  useSetPaymentSession,\n  useUpdateCart,\n  useCreatePaymentSession,\n} from \"../hooks/store/\"\nimport { Cart } from \"../types\"\n\ninterface CartState {\n  cart?: Cart\n}\n\ninterface CartContext extends CartState {\n  setCart: (cart: Cart) => void\n  pay: ReturnType<typeof useSetPaymentSession>\n  createCart: ReturnType<typeof useCreateCart>\n  startCheckout: ReturnType<typeof useCreatePaymentSession>\n  completeCheckout: ReturnType<typeof useCompleteCart>\n  updateCart: ReturnType<typeof useUpdateCart>\n  addShippingMethod: ReturnType<typeof useAddShippingMethodToCart>\n  totalItems: number\n}\n\nconst CartContext = React.createContext<CartContext | null>(null)\n\nexport const useCart = () => {\n  const context = React.useContext(CartContext)\n  if (!context) {\n    throw new Error(\"useCart must be used within a CartProvider\")\n  }\n  return context\n}\n\ninterface CartProps {\n  children: React.ReactNode\n  initialState?: Cart\n}\n\nconst defaultInitialState = {\n  id: \"\",\n  items: [] as any,\n} as Cart\n\nexport const CartProvider = ({\n  children,\n  initialState = defaultInitialState,\n}: CartProps) => {\n  const [cart, setCart] = useState<Cart>(initialState)\n\n  const createCart = useCreateCart({\n    onSuccess: ({ cart }) => setCart(cart),\n  })\n\n  const updateCart = useUpdateCart(cart?.id, {\n    onSuccess: ({ cart }) => setCart(cart),\n  })\n\n  const addShippingMethod = useAddShippingMethodToCart(cart?.id, {\n    onSuccess: ({ cart }) => setCart(cart),\n  })\n\n  const startCheckout = useCreatePaymentSession(cart?.id, {\n    onSuccess: ({ cart }) => setCart(cart),\n  })\n\n  const pay = useSetPaymentSession(cart?.id, {\n    onSuccess: ({ cart }) => {\n      setCart(cart)\n    },\n  })\n\n  const completeCheckout = useCompleteCart(cart?.id)\n\n  const totalItems = cart?.items\n    .map(i => i.quantity)\n    .reduce((acc, curr) => acc + curr, 0)\n\n  return (\n    <CartContext.Provider\n      value={{\n        cart,\n        setCart,\n        createCart,\n        pay,\n        startCheckout,\n        completeCheckout,\n        updateCart,\n        addShippingMethod,\n        totalItems: totalItems || 0,\n      }}\n    >\n      {children}\n    </CartContext.Provider>\n  )\n}\n","import { StoreCartsRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst CARTS_QUERY_KEY = `carts` as const\n\nexport const cartKeys = queryKeysFactory(CARTS_QUERY_KEY)\ntype CartQueryKey = typeof cartKeys\n\nexport const useGetCart = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreCartsRes>,\n    Error,\n    ReturnType<CartQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    cartKeys.detail(id),\n    () => client.carts.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  StoreCartsRes,\n  StoreCompleteCartRes,\n  StorePostCartReq,\n  StorePostCartsCartPaymentSessionReq,\n  StorePostCartsCartPaymentSessionUpdateReq,\n  StorePostCartsCartReq,\n  StorePostCartsCartShippingMethodReq,\n} from \"@medusajs/medusa\"\nimport { useMutation, UseMutationOptions } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\n\nexport const useCreateCart = (\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    StorePostCartReq | undefined\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data?: StorePostCartReq | undefined) => client.carts.create(data),\n    options\n  )\n}\n\nexport const useUpdateCart = (\n  cartId: string,\n  options?: UseMutationOptions<StoreCartsRes, Error, StorePostCartsCartReq>\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostCartsCartReq) => client.carts.update(cartId, data),\n    options\n  )\n}\n\nexport const useCompleteCart = (\n  cartId: string,\n  options?: UseMutationOptions<StoreCompleteCartRes, Error>\n) => {\n  const { client } = useMedusa()\n  return useMutation(() => client.carts.complete(cartId), options)\n}\n\nexport const useCreatePaymentSession = (\n  cartId: string,\n  options?: UseMutationOptions<StoreCartsRes, Error>\n) => {\n  const { client } = useMedusa()\n  return useMutation(() => client.carts.createPaymentSessions(cartId), options)\n}\n\nexport const useUpdatePaymentSession = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    { provider_id: string } & StorePostCartsCartPaymentSessionUpdateReq\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({ data, provider_id }) =>\n      client.carts.updatePaymentSession(cartId, provider_id, { data }),\n    options\n  )\n}\n\ntype RefreshPaymentSessionMutationData = {\n  provider_id: string\n}\n\nexport const useRefreshPaymentSession = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    RefreshPaymentSessionMutationData\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({ provider_id }: RefreshPaymentSessionMutationData) =>\n      client.carts.refreshPaymentSession(cartId, provider_id),\n    options\n  )\n}\n\ntype SetPaymentSessionMutationData = { provider_id: string }\n\nexport const useSetPaymentSession = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    SetPaymentSessionMutationData\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostCartsCartPaymentSessionReq) =>\n      client.carts.setPaymentSession(cartId, data),\n    options\n  )\n}\n\nexport const useAddShippingMethodToCart = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    StorePostCartsCartShippingMethodReq\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostCartsCartShippingMethodReq) =>\n      client.carts.addShippingMethod(cartId, data),\n    options\n  )\n}\n\ntype DeletePaymentSessionMutationData = {\n  provider_id: string\n}\n\nexport const useDeletePaymentSession = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    DeletePaymentSessionMutationData\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({ provider_id }: DeletePaymentSessionMutationData) =>\n      client.carts.deletePaymentSession(cartId, provider_id),\n    options\n  )\n}\n\nexport const useStartCheckout = (\n  options?: UseMutationOptions<StoreCartsRes[\"cart\"], Error, StorePostCartReq>\n) => {\n  const { client } = useMedusa()\n  const mutation = useMutation(async (data?: StorePostCartReq) => {\n    const { cart } = await client.carts.create(data)\n    const res = await client.carts.createPaymentSessions(cart.id)\n    return res.cart\n  }, options)\n\n  return mutation\n}\n","import {\n  StoreCollectionsListRes,\n  StoreCollectionsRes,\n  StoreGetCollectionsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst COLLECTIONS_QUERY_KEY = `collections` as const\n\nexport const collectionKeys = queryKeysFactory(COLLECTIONS_QUERY_KEY)\n\ntype CollectionQueryKey = typeof collectionKeys\n\nexport const useCollection = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreCollectionsRes>,\n    Error,\n    ReturnType<CollectionQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    collectionKeys.detail(id),\n    () => client.collections.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useCollections = (\n  query?: StoreGetCollectionsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreCollectionsListRes>,\n    Error,\n    ReturnType<CollectionQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    collectionKeys.list(query),\n    () => client.collections.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  StoreCustomersListOrdersRes,\n  StoreCustomersRes,\n  StoreGetCustomersCustomerOrdersParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst CUSTOMERS_QUERY_KEY = `customers` as const\n\nexport const customerKeys = {\n  ...queryKeysFactory(CUSTOMERS_QUERY_KEY),\n  orders: (id: string) => [...customerKeys.detail(id), \"orders\"] as const,\n}\n\ntype CustomerQueryKey = typeof customerKeys\n\nexport const useMeCustomer = (\n  options?: UseQueryOptionsWrapper<\n    Response<StoreCustomersRes>,\n    Error,\n    ReturnType<CustomerQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    customerKeys.detail(\"me\"),\n    () => client.customers.retrieve(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useCustomerOrders = (\n  query: StoreGetCustomersCustomerOrdersParams = { limit: 10, offset: 0 },\n  options?: UseQueryOptionsWrapper<\n    Response<StoreCustomersListOrdersRes>,\n    Error,\n    ReturnType<CustomerQueryKey[\"orders\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    customerKeys.orders(\"me\"),\n    () => client.customers.listOrders(query),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n","import {\n  StoreCustomersRes,\n  StorePostCustomersCustomerReq,\n  StorePostCustomersReq,\n} from \"@medusajs/medusa\"\nimport { UseMutationOptions, useMutation } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\n\nexport const useCreateCustomer = (\n  options?: UseMutationOptions<StoreCustomersRes, Error, StorePostCustomersReq>\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostCustomersReq) => client.customers.create(data),\n    options\n  )\n}\n\nexport const useUpdateMe = (\n  options?: UseMutationOptions<\n    StoreCustomersRes,\n    Error,\n    { id: string } & StorePostCustomersCustomerReq\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({ id, ...data }: { id: string } & StorePostCustomersCustomerReq) =>\n      client.customers.update(data),\n    options\n  )\n}\n","import { StoreGiftCardsRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst GIFT_CARDS_QUERY_KEY = `gift_cards` as const\n\nexport const giftCardKeys = queryKeysFactory(GIFT_CARDS_QUERY_KEY)\n\ntype GiftCardQueryKey = typeof giftCardKeys\n\nexport const useGiftCard = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreGiftCardsRes>,\n    Error,\n    ReturnType<GiftCardQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    giftCardKeys.detail(id),\n    () => client.giftCards.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  StoreCartsRes,\n  StorePostCartsCartLineItemsItemReq,\n  StorePostCartsCartLineItemsReq,\n} from \"@medusajs/medusa\"\nimport { useMutation, UseMutationOptions } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\n\nexport const useCreateLineItem = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    StorePostCartsCartLineItemsReq\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostCartsCartLineItemsReq) =>\n      client.carts.lineItems.create(cartId, data),\n    options\n  )\n}\n\nexport const useUpdateLineItem = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    StorePostCartsCartLineItemsItemReq & { lineId: string }\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({\n      lineId,\n      ...data\n    }: StorePostCartsCartLineItemsItemReq & { lineId: string }) =>\n      client.carts.lineItems.update(cartId, lineId, data),\n    options\n  )\n}\n\nexport const useDeleteLineItem = (\n  cartId: string,\n  options?: UseMutationOptions<StoreCartsRes, Error, { lineId: string }>\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({ lineId }: { lineId: string }) =>\n      client.carts.lineItems.delete(cartId, lineId),\n    options\n  )\n}\n","import { StoreOrderEditsRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ORDER_EDITS_QUERY_KEY = `orderEdit` as const\n\nexport const orderEditQueryKeys = queryKeysFactory<\n  typeof ORDER_EDITS_QUERY_KEY\n>(ORDER_EDITS_QUERY_KEY)\n\ntype OrderQueryKey = typeof orderEditQueryKeys\n\nexport const useOrderEdit = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreOrderEditsRes>,\n    Error,\n    ReturnType<OrderQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    orderEditQueryKeys.detail(id),\n    () => client.orderEdits.retrieve(id),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n","import { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport {\n  StoreOrderEditsRes,\n  StorePostOrderEditsOrderEditDecline,\n} from \"@medusajs/medusa\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { orderEditQueryKeys } from \"./queries\"\n\nexport const useDeclineOrderEdit = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<StoreOrderEditsRes>,\n    Error,\n    StorePostOrderEditsOrderEditDecline\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: StorePostOrderEditsOrderEditDecline) =>\n      client.orderEdits.decline(id, payload),\n    buildOptions(\n      queryClient,\n      [orderEditQueryKeys.lists(), orderEditQueryKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useCompleteOrderEdit = (\n  id: string,\n  options?: UseMutationOptions<Response<StoreOrderEditsRes>, Error>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.orderEdits.complete(id),\n    buildOptions(\n      queryClient,\n      [orderEditQueryKeys.lists(), orderEditQueryKeys.detail(id)],\n      options\n    )\n  )\n}\n","import {\n  QueryClient,\n  QueryKey,\n  UseMutationOptions,\n} from \"@tanstack/react-query\"\n\nexport const buildOptions = <\n  TData,\n  TError,\n  TVariables,\n  TContext,\n  TKey extends QueryKey\n>(\n  queryClient: QueryClient,\n  queryKey?: TKey,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationOptions<TData, TError, TVariables, TContext> => {\n  return {\n    ...options,\n    onSuccess: (...args) => {\n      if (options?.onSuccess) {\n        return options.onSuccess(...args)\n      }\n\n      if (queryKey !== undefined) {\n        queryKey.forEach((key) => {\n          queryClient.invalidateQueries({ queryKey: key as QueryKey })\n        })\n      }\n    },\n  }\n}\n","import { StoreGetOrdersParams, StoreOrdersRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ORDERS_QUERY_KEY = `orders` as const\n\nexport const orderKeys = {\n  ...queryKeysFactory<typeof ORDERS_QUERY_KEY, StoreGetOrdersParams>(\n    ORDERS_QUERY_KEY\n  ),\n  cart: (cartId: string) => [...orderKeys.details(), \"cart\", cartId] as const,\n}\n\ntype OrderQueryKey = typeof orderKeys\n\nexport const useOrder = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreOrdersRes>,\n    Error,\n    ReturnType<OrderQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    orderKeys.detail(id),\n    () => client.orders.retrieve(id),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n\nexport const useCartOrder = (\n  cartId: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreOrdersRes>,\n    Error,\n    ReturnType<OrderQueryKey[\"cart\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    orderKeys.cart(cartId),\n    () => client.orders.retrieveByCartId(cartId),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n\nexport const useOrders = (\n  query: StoreGetOrdersParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreOrdersRes>,\n    Error,\n    ReturnType<OrderQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    orderKeys.list(query),\n    () => client.orders.lookupOrder(query),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n","import { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport {\n  StorePostCustomersCustomerAcceptClaimReq,\n  StorePostCustomersCustomerOrderClaimReq,\n} from \"@medusajs/medusa\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { orderKeys } from \"./queries\"\n\nexport const useRequestOrderAccess = (\n  options?: UseMutationOptions<\n    Response<{}>,\n    Error,\n    StorePostCustomersCustomerOrderClaimReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: StorePostCustomersCustomerOrderClaimReq) =>\n      client.orders.requestCustomerOrders(payload),\n    buildOptions(queryClient, [orderKeys.all], options)\n  )\n}\nexport const useGrantOrderAccess = (\n  options?: UseMutationOptions<\n    Response<{}>,\n    Error,\n    StorePostCustomersCustomerAcceptClaimReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: StorePostCustomersCustomerAcceptClaimReq) =>\n      client.orders.confirmRequest(payload),\n    buildOptions(queryClient, [orderKeys.all], options)\n  )\n}\n","import { StorePaymentCollectionsRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst PAYMENT_COLLECTION_QUERY_KEY = `paymentCollection` as const\n\nexport const paymentCollectionQueryKeys = queryKeysFactory<\n  typeof PAYMENT_COLLECTION_QUERY_KEY\n>(PAYMENT_COLLECTION_QUERY_KEY)\n\ntype PaymentCollectionKey = typeof paymentCollectionQueryKeys\n\nexport const usePaymentCollection = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StorePaymentCollectionsRes>,\n    Error,\n    ReturnType<PaymentCollectionKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    paymentCollectionQueryKeys.detail(id),\n    () => client.paymentCollections.retrieve(id),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n","import { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport {\n  StorePaymentCollectionSessionsReq,\n  StorePaymentCollectionsRes,\n  StorePaymentCollectionsSessionRes,\n  StorePostPaymentCollectionsBatchSessionsAuthorizeReq,\n  StorePostPaymentCollectionsBatchSessionsReq,\n} from \"@medusajs/medusa\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { paymentCollectionQueryKeys } from \"./queries\"\n\nexport const useManageMultiplePaymentSessions = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<StorePaymentCollectionsRes>,\n    Error,\n    StorePostPaymentCollectionsBatchSessionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: StorePostPaymentCollectionsBatchSessionsReq) =>\n      client.paymentCollections.managePaymentSessionsBatch(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        paymentCollectionQueryKeys.lists(),\n        paymentCollectionQueryKeys.detail(id),\n      ],\n      options\n    )\n  )\n}\n\nexport const useManagePaymentSession = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<StorePaymentCollectionsRes>,\n    Error,\n    StorePaymentCollectionSessionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: StorePaymentCollectionSessionsReq) =>\n      client.paymentCollections.managePaymentSession(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        paymentCollectionQueryKeys.lists(),\n        paymentCollectionQueryKeys.detail(id),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAuthorizePaymentSession = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<StorePaymentCollectionsRes>,\n    Error,\n    string\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (session_id: string) =>\n      client.paymentCollections.authorizePaymentSession(id, session_id),\n    buildOptions(\n      queryClient,\n      [\n        paymentCollectionQueryKeys.lists(),\n        paymentCollectionQueryKeys.detail(id),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAuthorizePaymentSessionsBatch = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<StorePaymentCollectionsRes>,\n    Error,\n    StorePostPaymentCollectionsBatchSessionsAuthorizeReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload) =>\n      client.paymentCollections.authorizePaymentSessionsBatch(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        paymentCollectionQueryKeys.lists(),\n        paymentCollectionQueryKeys.detail(id),\n      ],\n      options\n    )\n  )\n}\n\nexport const usePaymentCollectionRefreshPaymentSession = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<StorePaymentCollectionsSessionRes>,\n    Error,\n    string\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (session_id: string) =>\n      client.paymentCollections.refreshPaymentSession(id, session_id),\n    buildOptions(\n      queryClient,\n      [\n        paymentCollectionQueryKeys.lists(),\n        paymentCollectionQueryKeys.detail(id),\n      ],\n      options\n    )\n  )\n}\n","import {\n  StoreGetProductCategoriesParams,\n  StoreGetProductCategoriesRes,\n  StoreGetProductCategoriesCategoryParams,\n  StoreGetProductCategoriesCategoryRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst STORE_PRODUCT_CATEGORIES_QUERY_KEY = `product_categories` as const\nexport const storeProductCategoryKeys = queryKeysFactory(\n  STORE_PRODUCT_CATEGORIES_QUERY_KEY\n)\ntype ProductCategoryQueryKeys = typeof storeProductCategoryKeys\n\nexport const useProductCategories = (\n  query?: StoreGetProductCategoriesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreGetProductCategoriesRes>,\n    Error,\n    ReturnType<ProductCategoryQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    storeProductCategoryKeys.list(query),\n    () => client.productCategories.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useProductCategory = (\n  id: string,\n  query?: StoreGetProductCategoriesCategoryParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreGetProductCategoriesCategoryRes>,\n    Error,\n    ReturnType<ProductCategoryQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    storeProductCategoryKeys.detail(id),\n    () => client.productCategories.retrieve(id, query),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n","import {\n  StoreGetProductTagsParams,\n  StoreProductTagsListRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst PRODUCT_TAGS_QUERY_KEY = `product_tags` as const\n\nexport const productTagKeys = queryKeysFactory(PRODUCT_TAGS_QUERY_KEY)\n\ntype ProductTypesQueryKeys = typeof productTagKeys\n\nexport const useProductTags = (\n  query?: StoreGetProductTagsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreProductTagsListRes>,\n    Error,\n    ReturnType<ProductTypesQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    productTagKeys.list(query),\n    () => client.productTags.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  StoreGetProductTypesParams,\n  StoreProductTypesListRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst PRODUCT_TYPES_QUERY_KEY = `product_types` as const\n\nexport const productTypeKeys = queryKeysFactory(PRODUCT_TYPES_QUERY_KEY)\n\ntype ProductTypesQueryKeys = typeof productTypeKeys\n\nexport const useProductTypes = (\n  query?: StoreGetProductTypesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreProductTypesListRes>,\n    Error,\n    ReturnType<ProductTypesQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    productTypeKeys.list(query),\n    () => client.productTypes.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  StoreGetProductsParams,\n  StoreProductsListRes,\n  StoreProductsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst PRODUCTS_QUERY_KEY = `products` as const\n\nexport const productKeys = queryKeysFactory<\n  typeof PRODUCTS_QUERY_KEY,\n  StoreGetProductsParams\n>(PRODUCTS_QUERY_KEY)\ntype ProductQueryKey = typeof productKeys\n\nexport const useProducts = (\n  query?: StoreGetProductsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreProductsListRes>,\n    Error,\n    ReturnType<ProductQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    productKeys.list(query),\n    () => client.products.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useProduct = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreProductsRes>,\n    Error,\n    ReturnType<ProductQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    productKeys.detail(id),\n    () => client.products.retrieve(id),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n","import { StoreRegionsListRes, StoreRegionsRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst REGIONS_QUERY_KEY = `regions` as const\n\nconst regionsKey = queryKeysFactory(REGIONS_QUERY_KEY)\n\ntype RegionQueryType = typeof regionsKey\n\nexport const useRegions = (\n  options?: UseQueryOptionsWrapper<\n    Response<StoreRegionsListRes>,\n    Error,\n    ReturnType<RegionQueryType[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    regionsKey.lists(),\n    () => client.regions.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useRegion = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreRegionsRes>,\n    Error,\n    ReturnType<RegionQueryType[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    regionsKey.detail(id),\n    () => client.regions.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  StoreReturnReasonsListRes,\n  StoreReturnReasonsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst RETURNS_REASONS_QUERY_KEY = `return_reasons` as const\n\nconst returnReasonsKey = queryKeysFactory(RETURNS_REASONS_QUERY_KEY)\n\ntype ReturnReasonsQueryKey = typeof returnReasonsKey\n\nexport const useReturnReasons = (\n  options?: UseQueryOptionsWrapper<\n    Response<StoreReturnReasonsListRes>,\n    Error,\n    ReturnType<ReturnReasonsQueryKey[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    returnReasonsKey.lists(),\n    () => client.returnReasons.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useReturnReason = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreReturnReasonsRes>,\n    Error,\n    ReturnType<ReturnReasonsQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    returnReasonsKey.detail(id),\n    () => client.returnReasons.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { StorePostReturnsReq, StoreReturnsRes } from \"@medusajs/medusa\"\nimport { useMutation, UseMutationOptions } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\n\nexport const useCreateReturn = (\n  options?: UseMutationOptions<StoreReturnsRes, Error, StorePostReturnsReq>\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostReturnsReq) => client.returns.create(data),\n    options\n  )\n}\n","import {\n  StoreGetShippingOptionsParams,\n  StoreShippingOptionsListRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst SHIPPING_OPTION_QUERY_KEY = `shipping_options` as const\n\nconst shippingOptionKey = {\n  ...queryKeysFactory(SHIPPING_OPTION_QUERY_KEY),\n  cart: (cartId: string) => [...shippingOptionKey.all, \"cart\", cartId] as const,\n}\n\ntype ShippingOptionQueryKey = typeof shippingOptionKey\n\nexport const useShippingOptions = (\n  query?: StoreGetShippingOptionsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreShippingOptionsListRes>,\n    Error,\n    ReturnType<ShippingOptionQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    shippingOptionKey.list(query),\n    async () => client.shippingOptions.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useCartShippingOptions = (\n  cartId: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreShippingOptionsListRes>,\n    Error,\n    ReturnType<ShippingOptionQueryKey[\"cart\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    shippingOptionKey.cart(cartId),\n    async () => client.shippingOptions.listCartOptions(cartId),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { StoreSwapsRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst SWAPS_QUERY_KEY = `swaps` as const\n\nconst swapKey = {\n  ...queryKeysFactory(SWAPS_QUERY_KEY),\n  cart: (cartId: string) => [...swapKey.all, \"cart\", cartId] as const,\n}\n\ntype SwapQueryKey = typeof swapKey\n\nexport const useCartSwap = (\n  cartId: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreSwapsRes>,\n    Error,\n    ReturnType<SwapQueryKey[\"cart\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    swapKey.cart(cartId),\n    () => client.swaps.retrieveByCartId(cartId),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n","import { StorePostSwapsReq, StoreSwapsRes } from \"@medusajs/medusa\"\nimport { useMutation, UseMutationOptions } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\n\nexport const useCreateSwap = (\n  options?: UseMutationOptions<StoreSwapsRes, Error, StorePostSwapsReq>\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostSwapsReq) => client.swaps.create(data),\n    options\n  )\n}\n","import { AdminAuthRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_AUTH_QUERY_KEY = `admin_auth` as const\n\nexport const adminAuthKeys = queryKeysFactory(ADMIN_AUTH_QUERY_KEY)\n\ntype AuthQueryKey = typeof adminAuthKeys\n\nexport const useAdminGetSession = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminAuthRes>,\n    Error,\n    ReturnType<AuthQueryKey[\"details\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminAuthKeys.details(),\n    () => client.admin.auth.getSession(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { AdminAuthRes, AdminPostAuthReq } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminAuthKeys } from \"./queries\"\n\nexport const useAdminLogin = (\n  options?: UseMutationOptions<Response<AdminAuthRes>, Error, AdminPostAuthReq>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostAuthReq) => client.admin.auth.createSession(payload),\n    buildOptions(queryClient, adminAuthKeys.details(), options)\n  )\n}\n\nexport const useAdminDeleteSession = (\n  options?: UseMutationOptions<Response<void>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.auth.deleteSession(),\n    buildOptions(queryClient, adminAuthKeys.details(), options)\n  )\n}\n","import {\n  AdminBatchJobListRes,\n  AdminBatchJobRes,\n  AdminGetBatchParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_COLLECTIONS_QUERY_KEY = `admin_batches` as const\n\nexport const adminBatchJobsKeys = queryKeysFactory(ADMIN_COLLECTIONS_QUERY_KEY)\n\ntype BatchJobsQueryKey = typeof adminBatchJobsKeys\n\nexport const useAdminBatchJobs = (\n  query?: AdminGetBatchParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminBatchJobListRes>,\n    Error,\n    ReturnType<BatchJobsQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminBatchJobsKeys.list(query),\n    () => client.admin.batchJobs.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminBatchJob = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminBatchJobRes>,\n    Error,\n    ReturnType<BatchJobsQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminBatchJobsKeys.detail(id),\n    () => client.admin.batchJobs.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { AdminBatchJobRes, AdminPostBatchesReq } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminBatchJobsKeys } from \"./queries\"\n\n/**\n * Hook returns functions for creating batch jobs.\n *\n * @param options\n */\nexport const useAdminCreateBatchJob = (\n  options?: UseMutationOptions<\n    Response<AdminBatchJobRes>,\n    Error,\n    AdminPostBatchesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostBatchesReq) => client.admin.batchJobs.create(payload),\n    buildOptions(queryClient, adminBatchJobsKeys.lists(), options)\n  )\n}\n\n/**\n * Hook return functions for canceling a batch job\n *\n * @param id - id of the batch job\n * @param options\n */\nexport const useAdminCancelBatchJob = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminBatchJobRes>, Error>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.batchJobs.cancel(id),\n    buildOptions(\n      queryClient,\n      [adminBatchJobsKeys.lists(), adminBatchJobsKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Hook return functions for confirming a batch job\n *\n * @param id - id of the batch job\n * @param options\n */\nexport const useAdminConfirmBatchJob = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminBatchJobRes>, Error>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.batchJobs.confirm(id),\n    buildOptions(\n      queryClient,\n      [adminBatchJobsKeys.lists(), adminBatchJobsKeys.detail(id)],\n      options\n    )\n  )\n}\n","import {\n  AdminOrdersRes,\n  AdminPostOrdersOrderClaimsClaimFulfillmentsReq,\n  AdminPostOrdersOrderClaimsClaimReq,\n  AdminPostOrdersOrderClaimsClaimShipmentsReq,\n  AdminPostOrdersOrderClaimsReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminProductKeys } from \"../products\"\nimport { adminVariantKeys } from \"../variants\"\nimport { adminOrderKeys } from \"./../orders/queries\"\n\nexport const useAdminCreateClaim = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderClaimsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderClaimsReq) =>\n      client.admin.orders.createClaim(orderId, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminUpdateClaim = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderClaimsClaimReq & { claim_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      claim_id,\n      ...payload\n    }: AdminPostOrdersOrderClaimsClaimReq & { claim_id: string }) =>\n      client.admin.orders.updateClaim(orderId, claim_id, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminCancelClaim = (\n  orderId: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (claimId: string) => client.admin.orders.cancelClaim(orderId, claimId),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminFulfillClaim = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderClaimsClaimFulfillmentsReq & { claim_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      claim_id,\n      ...payload\n    }: AdminPostOrdersOrderClaimsClaimFulfillmentsReq & { claim_id: string }) =>\n      client.admin.orders.fulfillClaim(orderId, claim_id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminOrderKeys.detail(orderId),\n        adminVariantKeys.all,\n        adminProductKeys.lists(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelClaimFulfillment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    { claim_id: string; fulfillment_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      claim_id,\n      fulfillment_id,\n    }: {\n      claim_id: string\n      fulfillment_id: string\n    }) =>\n      client.admin.orders.cancelClaimFulfillment(\n        orderId,\n        claim_id,\n        fulfillment_id\n      ),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminCreateClaimShipment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderClaimsClaimShipmentsReq & { claim_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      claim_id,\n      ...payload\n    }: AdminPostOrdersOrderClaimsClaimShipmentsReq & { claim_id: string }) =>\n      client.admin.orders.createClaimShipment(orderId, claim_id, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n","import {\n  AdminGetProductParams,\n  AdminGetProductsParams,\n  AdminProductsListRes,\n  AdminProductsListTagsRes,\n  AdminProductsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_PRODUCTS_QUERY_KEY = `admin_products` as const\n\nexport const adminProductKeys = queryKeysFactory(ADMIN_PRODUCTS_QUERY_KEY)\n\ntype ProductQueryKeys = typeof adminProductKeys\n\nexport const useAdminProducts = (\n  query?: AdminGetProductsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductsListRes>,\n    Error,\n    ReturnType<ProductQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductKeys.list(query),\n    () => client.admin.products.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminProduct = (\n  id: string,\n  query?: AdminGetProductParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductsRes>,\n    Error,\n    ReturnType<ProductQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductKeys.detail(id),\n    () => client.admin.products.retrieve(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminProductTagUsage = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductsListTagsRes>,\n    Error,\n    ReturnType<ProductQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductKeys.detail(\"tags\"),\n    () => client.admin.products.listTags(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminPostProductsProductOptionsOption,\n  AdminPostProductsProductOptionsReq,\n  AdminPostProductsProductReq,\n  AdminPostProductsProductVariantsReq,\n  AdminPostProductsProductVariantsVariantReq,\n  AdminPostProductsReq,\n  AdminProductsDeleteOptionRes,\n  AdminProductsDeleteRes,\n  AdminProductsDeleteVariantRes,\n  AdminProductsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminProductKeys } from \"./queries\"\n\nexport const useAdminCreateProduct = (\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostProductsReq) => client.admin.products.create(payload),\n    buildOptions(queryClient, adminProductKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateProduct = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsProductReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostProductsProductReq) =>\n      client.admin.products.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminProductKeys.lists(), adminProductKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteProduct = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminProductsDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.products.delete(id),\n    buildOptions(\n      queryClient,\n      [adminProductKeys.lists(), adminProductKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateVariant = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsProductVariantsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostProductsProductVariantsReq) =>\n      client.admin.products.createVariant(productId, payload),\n    buildOptions(\n      queryClient,\n      [adminProductKeys.lists(), adminProductKeys.detail(productId)],\n      options\n    )\n  )\n}\n\nexport const useAdminUpdateVariant = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsProductVariantsVariantReq & { variant_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      variant_id,\n      ...payload\n    }: AdminPostProductsProductVariantsVariantReq & { variant_id: string }) =>\n      client.admin.products.updateVariant(productId, variant_id, payload),\n    buildOptions(\n      queryClient,\n      [adminProductKeys.lists(), adminProductKeys.detail(productId)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteVariant = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsDeleteVariantRes>,\n    Error,\n    string\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (variantId: string) =>\n      client.admin.products.deleteVariant(productId, variantId),\n    buildOptions(\n      queryClient,\n      [adminProductKeys.lists(), adminProductKeys.detail(productId)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateProductOption = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsProductOptionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostProductsProductOptionsReq) =>\n      client.admin.products.addOption(productId, payload),\n    buildOptions(queryClient, adminProductKeys.detail(productId), options)\n  )\n}\n\nexport const useAdminUpdateProductOption = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsProductOptionsOption & { option_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      option_id,\n      ...payload\n    }: AdminPostProductsProductOptionsOption & { option_id: string }) =>\n      client.admin.products.updateOption(productId, option_id, payload),\n    buildOptions(queryClient, adminProductKeys.detail(productId), options)\n  )\n}\n\nexport const useAdminDeleteProductOption = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsDeleteOptionRes>,\n    Error,\n    string\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (optionId: string) =>\n      client.admin.products.deleteOption(productId, optionId),\n    buildOptions(queryClient, adminProductKeys.detail(productId), options)\n  )\n}\n","import {\n  AdminGetVariantParams,\n  AdminGetVariantsParams,\n  AdminGetVariantsVariantInventoryRes,\n  AdminVariantsListRes,\n  AdminVariantsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_VARIANT_QUERY_KEY = `admin_variants` as const\n\nexport const adminVariantKeys = queryKeysFactory(ADMIN_VARIANT_QUERY_KEY)\n\ntype VariantQueryKeys = typeof adminVariantKeys\n\nexport const useAdminVariants = (\n  query?: AdminGetVariantsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminVariantsListRes>,\n    Error,\n    ReturnType<VariantQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminVariantKeys.list(query),\n    () => client.admin.variants.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminVariant = (\n  id: string,\n  query?: AdminGetVariantParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminVariantsRes>,\n    Error,\n    ReturnType<VariantQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminVariantKeys.detail(id),\n    () => client.admin.variants.retrieve(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminVariantsInventory = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminGetVariantsVariantInventoryRes>,\n    Error,\n    ReturnType<VariantQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminVariantKeys.detail(id),\n    () => client.admin.variants.getInventory(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminGetOrdersParams,\n  AdminOrdersListRes,\n  AdminOrdersRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { FindParams } from \"@medusajs/medusa/dist/types/common\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_ORDERS_QUERY_KEY = `admin_orders` as const\n\nexport const adminOrderKeys = {\n  ...queryKeysFactory(ADMIN_ORDERS_QUERY_KEY),\n  detailOrder(id: string, query?: FindParams) {\n    return [...this.detail(id), { ...(query || {}) }]\n  },\n}\n\ntype OrderQueryKeys = typeof adminOrderKeys\n\nexport const useAdminOrders = (\n  query?: AdminGetOrdersParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminOrdersListRes>,\n    Error,\n    ReturnType<OrderQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminOrderKeys.list(query),\n    () => client.admin.orders.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminOrder = (\n  id: string,\n  query?: FindParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminOrdersRes>,\n    Error,\n    ReturnType<OrderQueryKeys[\"detailOrder\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminOrderKeys.detailOrder(id, query),\n    () => client.admin.orders.retrieve(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminCollectionsListRes,\n  AdminCollectionsRes,\n  AdminGetCollectionsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_COLLECTIONS_QUERY_KEY = `admin_collections` as const\n\nexport const adminCollectionKeys = queryKeysFactory(ADMIN_COLLECTIONS_QUERY_KEY)\n\ntype CollectionsQueryKey = typeof adminCollectionKeys\n\nexport const useAdminCollections = (\n  query?: AdminGetCollectionsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCollectionsListRes>,\n    Error,\n    ReturnType<CollectionsQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCollectionKeys.list(query),\n    () => client.admin.collections.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminCollection = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCollectionsRes>,\n    Error,\n    ReturnType<CollectionsQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCollectionKeys.detail(id),\n    () => client.admin.collections.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminCollectionsDeleteRes,\n  AdminCollectionsRes,\n  AdminDeleteProductsFromCollectionReq,\n  AdminDeleteProductsFromCollectionRes,\n  AdminPostCollectionsCollectionReq,\n  AdminPostCollectionsReq,\n  AdminPostProductsToCollectionReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  UseMutationOptions,\n  useMutation,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminCollectionKeys } from \"./queries\"\n\nexport const useAdminCreateCollection = (\n  options?: UseMutationOptions<\n    Response<AdminCollectionsRes>, \n    Error,\n    AdminPostCollectionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostCollectionsReq) =>\n      client.admin.collections.create(payload),\n    buildOptions(queryClient, adminCollectionKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateCollection = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCollectionsRes>,\n    Error,\n    AdminPostCollectionsCollectionReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostCollectionsCollectionReq) =>\n      client.admin.collections.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminCollectionKeys.lists(), adminCollectionKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteCollection = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminCollectionsDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.collections.delete(id),\n    buildOptions(\n      queryClient,\n      [adminCollectionKeys.lists(), adminCollectionKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Hook returns function for adding multiple products to a collection.\n *\n * @param id - id of the collection in which products are being added\n * @param options\n */\nexport const useAdminAddProductsToCollection = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCollectionsRes>,\n    Error,\n    AdminPostProductsToCollectionReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostProductsToCollectionReq) =>\n      client.admin.collections.addProducts(id, payload),\n    buildOptions(\n      queryClient,\n      [adminCollectionKeys.lists(), adminCollectionKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Hook returns function for removal of multiple products from a collection.\n *\n * @param id - id of the collection from which products will be removed\n * @param options\n */\nexport const useAdminRemoveProductsFromCollection = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDeleteProductsFromCollectionRes>,\n    Error,\n    AdminDeleteProductsFromCollectionReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteProductsFromCollectionReq) =>\n      client.admin.collections.removeProducts(id, payload),\n    buildOptions(\n      queryClient,\n      [adminCollectionKeys.lists(), adminCollectionKeys.detail(id)],\n      options\n    )\n  )\n}\n","import {\n  AdminCurrenciesRes,\n  AdminPostCurrenciesCurrencyReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminCurrenciesKeys } from \"./queries\"\n\nexport const useAdminUpdateCurrency = (\n  code: string,\n  options?: UseMutationOptions<\n    Response<AdminCurrenciesRes>,\n    Error,\n    AdminPostCurrenciesCurrencyReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostCurrenciesCurrencyReq) =>\n      client.admin.currencies.update(code, payload),\n    buildOptions(\n      queryClient,\n      [adminCurrenciesKeys.lists(), adminCurrenciesKeys.detail(code)],\n      options\n    )\n  )\n}\n","import {\n  AdminCurrenciesListRes,\n  AdminGetCurrenciesParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_CURRENCIES_QUERY_KEY = `admin_currencies` as const\n\nexport const adminCurrenciesKeys = queryKeysFactory(ADMIN_CURRENCIES_QUERY_KEY)\n\ntype CurrenciesQueryKey = typeof adminCurrenciesKeys\n\nexport const useAdminCurrencies = (\n  query?: AdminGetCurrenciesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCurrenciesListRes>,\n    Error,\n    ReturnType<CurrenciesQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCurrenciesKeys.list(query),\n    () => client.admin.currencies.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { Response } from \"@medusajs/medusa-js\"\nimport {\n  QueryClient,\n  QueryKey,\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { adminCustomerGroupKeys } from \"../customer-groups\"\nimport { adminCustomerKeys } from \"../customers\"\nimport { adminDiscountKeys } from \"../discounts\"\nimport { adminGiftCardKeys } from \"../gift-cards\"\nimport { adminOrderKeys } from \"../orders\"\nimport { adminPriceListKeys } from \"../price-lists\"\nimport { adminProductKeys } from \"../products\"\n\ntype RelatedDomain =\n  | \"product\"\n  | \"customer\"\n  | \"customer_group\"\n  | \"order\"\n  | \"discount\"\n  | \"gift_card\"\n  | \"price_list\"\n\nexport type RelatedDomains = {\n  [key in RelatedDomain]?: boolean\n}\n\nconst invalidateRelatedDomain = (\n  queryClient: QueryClient,\n  domain: RelatedDomain\n) => {\n  switch (domain) {\n    case \"product\":\n      queryClient.invalidateQueries(adminProductKeys.all)\n      break\n    case \"customer\":\n      queryClient.invalidateQueries(adminCustomerKeys.all)\n      break\n    case \"customer_group\":\n      queryClient.invalidateQueries(adminCustomerGroupKeys.all)\n      break\n    case \"order\":\n      queryClient.invalidateQueries(adminOrderKeys.all)\n      break\n    case \"discount\":\n      queryClient.invalidateQueries(adminDiscountKeys.all)\n      break\n    case \"gift_card\":\n      queryClient.invalidateQueries(adminGiftCardKeys.all)\n      break\n    case \"price_list\":\n      queryClient.invalidateQueries(adminPriceListKeys.all)\n      break\n  }\n}\n\nexport const buildCustomOptions = <\n  TData,\n  TError,\n  TVariables,\n  TContext,\n  TKey extends QueryKey\n>(\n  queryClient: QueryClient,\n  queryKey?: TKey,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>,\n  relatedDomains?: RelatedDomains\n): UseMutationOptions<TData, TError, TVariables, TContext> => {\n  return {\n    ...options,\n    onSuccess: (...args) => {\n      if (queryKey !== undefined) {\n        queryKey.forEach((key) => {\n          queryClient.invalidateQueries({ queryKey: key as QueryKey })\n        })\n      }\n\n      if (relatedDomains) {\n        Object.keys(relatedDomains).forEach((key) => {\n          if (relatedDomains[key as RelatedDomain]) {\n            invalidateRelatedDomain(queryClient, key as RelatedDomain)\n          }\n        })\n      }\n\n      if (options?.onSuccess) {\n        return options.onSuccess(...args)\n      }\n    },\n  }\n}\n\nexport const useAdminCustomPost = <\n  TPayload extends Record<string, any>,\n  TResponse\n>(\n  path: string,\n  queryKey: QueryKey,\n  relatedDomains?: RelatedDomains,\n  options?: UseMutationOptions<Response<TResponse>, Error, TPayload>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: TPayload) =>\n      client.admin.custom.post<TPayload, TResponse>(path, payload),\n    buildCustomOptions(queryClient, queryKey, options, relatedDomains)\n  )\n}\n\nexport const useAdminCustomDelete = <TResponse>(\n  path: string,\n  queryKey: QueryKey,\n  relatedDomains?: RelatedDomains,\n  options?: UseMutationOptions<Response<TResponse>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.custom.delete<TResponse>(path),\n    buildCustomOptions(queryClient, queryKey, options, relatedDomains)\n  )\n}\n","import {\n  AdminCustomerGroupsListRes,\n  AdminCustomerGroupsRes,\n  AdminCustomersListRes,\n  AdminGetCustomerGroupsGroupParams,\n  AdminGetCustomerGroupsParams,\n  AdminGetCustomersParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_CUSTOMER_GROUPS_QUERY_KEY = `admin_customer_groups` as const\n\nexport const adminCustomerGroupKeys = {\n  ...queryKeysFactory(ADMIN_CUSTOMER_GROUPS_QUERY_KEY),\n  detailCustomer(id: string, query?: AdminGetCustomersParams) {\n    return [...this.detail(id), \"customers\", { ...(query || {}) }]\n  },\n}\n\ntype CustomerGroupQueryKeys = typeof adminCustomerGroupKeys\n\n/**\n * Hook retrieves a customer group by id.\n *\n * @param id - customer group id\n * @param query - query params\n * @param options\n */\nexport const useAdminCustomerGroup = (\n  id: string,\n  query?: AdminGetCustomerGroupsGroupParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCustomerGroupsRes>,\n    Error,\n    ReturnType<CustomerGroupQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCustomerGroupKeys.detail(id),\n    () => client.admin.customerGroups.retrieve(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\n/**\n * Hook retrieves a list of customer groups.\n *\n * @param query - pagination/filtering params\n * @param options\n */\nexport const useAdminCustomerGroups = (\n  query?: AdminGetCustomerGroupsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCustomerGroupsListRes>,\n    Error,\n    ReturnType<CustomerGroupQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCustomerGroupKeys.list(query),\n    () => client.admin.customerGroups.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\n/**\n * Hook retrieves a list of customers that belong to provided groups.\n *\n * @param id - customer group id\n * @param query - pagination/filtering params\n * @param options\n */\nexport const useAdminCustomerGroupCustomers = (\n  id: string,\n  query?: AdminGetCustomersParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCustomersListRes>,\n    Error,\n    ReturnType<CustomerGroupQueryKeys[\"detailCustomer\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCustomerGroupKeys.detailCustomer(id, query),\n    () => client.admin.customerGroups.listCustomers(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminCustomerGroupsDeleteRes,\n  AdminCustomerGroupsRes,\n  AdminDeleteCustomerGroupsGroupCustomerBatchReq,\n  AdminPostCustomerGroupsGroupCustomersBatchReq,\n  AdminPostCustomerGroupsGroupReq,\n  AdminPostCustomerGroupsReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminCustomerGroupKeys } from \"./queries\"\n\n/**\n * Hook returns functions for creating customer groups.\n *\n * @param options\n */\nexport const useAdminCreateCustomerGroup = (\n  options?: UseMutationOptions<\n    Response<AdminCustomerGroupsRes>,\n    Error,\n    AdminPostCustomerGroupsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostCustomerGroupsReq) =>\n      client.admin.customerGroups.create(payload),\n    buildOptions(queryClient, adminCustomerGroupKeys.lists(), options)\n  )\n}\n\n/**\n * Hook return functions for updating a customer group.\n *\n * @param id - id of the customer group that is being updated\n * @param options\n */\nexport const useAdminUpdateCustomerGroup = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCustomerGroupsRes>,\n    Error,\n    AdminPostCustomerGroupsGroupReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostCustomerGroupsGroupReq) =>\n      client.admin.customerGroups.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminCustomerGroupKeys.lists(), adminCustomerGroupKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Hook return functions for deleting a customer group.\n *\n * @param id - id of the customer group that is being deleted\n * @param options\n */\nexport const useAdminDeleteCustomerGroup = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCustomerGroupsDeleteRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.customerGroups.delete(id),\n    buildOptions(\n      queryClient,\n      [adminCustomerGroupKeys.lists(), adminCustomerGroupKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Hook returns functions for addition of multiple customers to a customer group.\n *\n * @param id - id of the customer group in which customers are being added\n * @param options\n */\nexport const useAdminAddCustomersToCustomerGroup = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCustomerGroupsRes>,\n    Error,\n    AdminPostCustomerGroupsGroupCustomersBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostCustomerGroupsGroupCustomersBatchReq) =>\n      client.admin.customerGroups.addCustomers(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminCustomerGroupKeys.lists(),\n        adminCustomerGroupKeys.detailCustomer(id),\n      ],\n      options\n    )\n  )\n}\n\n/**\n * Hook returns function for removal of multiple customers from a customer group.\n *\n * @param id - id of a group from which customers will be removed\n * @param options\n */\nexport const useAdminRemoveCustomersFromCustomerGroup = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCustomerGroupsRes>,\n    Error,\n    AdminDeleteCustomerGroupsGroupCustomerBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteCustomerGroupsGroupCustomerBatchReq) =>\n      client.admin.customerGroups.removeCustomers(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminCustomerGroupKeys.lists(),\n        adminCustomerGroupKeys.detailCustomer(id),\n      ],\n      options\n    )\n  )\n}\n","import {\n  AdminCustomersListRes,\n  AdminCustomersRes,\n  AdminGetCustomersParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_CUSTOMERS_QUERY_KEY = `admin_customers` as const\n\nexport const adminCustomerKeys = queryKeysFactory(ADMIN_CUSTOMERS_QUERY_KEY)\n\ntype CustomerQueryKeys = typeof adminCustomerKeys\n\nexport const useAdminCustomers = (\n  query?: AdminGetCustomersParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCustomersListRes>,\n    Error,\n    ReturnType<CustomerQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCustomerKeys.list(query),\n    () => client.admin.customers.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminCustomer = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCustomersRes>,\n    Error,\n    ReturnType<CustomerQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCustomerKeys.detail(id),\n    () => client.admin.customers.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport {\n  AdminCustomersRes,\n  AdminPostCustomersCustomerReq,\n  AdminPostCustomersReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminCustomerKeys } from \"./queries\"\n\nexport const useAdminCreateCustomer = (\n  options?: UseMutationOptions<\n    Response<AdminCustomersRes>,\n    Error,\n    AdminPostCustomersReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostCustomersReq) => client.admin.customers.create(payload),\n    buildOptions(queryClient, adminCustomerKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateCustomer = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCustomersRes>,\n    Error,\n    AdminPostCustomersCustomerReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostCustomersCustomerReq) =>\n      client.admin.customers.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminCustomerKeys.lists(), adminCustomerKeys.detail(id)],\n      options\n    )\n  )\n}\n","import {\n  AdminDiscountConditionsRes,\n  AdminDiscountsListRes,\n  AdminDiscountsRes,\n  AdminGetDiscountParams,\n  AdminGetDiscountsDiscountConditionsConditionParams,\n  AdminGetDiscountsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_DISCOUNTS_QUERY_KEY = `admin_discounts` as const\n\nexport const adminDiscountKeys = {\n  ...queryKeysFactory(ADMIN_DISCOUNTS_QUERY_KEY),\n  detailCondition(id: string, query?: any) {\n    return [\n      ...this.detail(id),\n      \"condition\" as const,\n      { ...(query || {}) },\n    ] as const\n  },\n}\n\ntype DiscountQueryKeys = typeof adminDiscountKeys\n\nexport const useAdminDiscounts = (\n  query?: AdminGetDiscountsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDiscountsListRes>,\n    Error,\n    ReturnType<DiscountQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDiscountKeys.list(query),\n    () => client.admin.discounts.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminDiscount = (\n  id: string,\n  query?: AdminGetDiscountParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDiscountsRes>,\n    Error,\n    ReturnType<DiscountQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDiscountKeys.detail(id),\n    () => client.admin.discounts.retrieve(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminGetDiscountByCode = (\n  code: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDiscountsRes>,\n    Error,\n    ReturnType<DiscountQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDiscountKeys.detail(code),\n    () => client.admin.discounts.retrieveByCode(code),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminGetDiscountCondition = (\n  id: string,\n  conditionId: string,\n  query?: AdminGetDiscountsDiscountConditionsConditionParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDiscountConditionsRes>,\n    Error,\n    ReturnType<DiscountQueryKeys[\"detailCondition\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDiscountKeys.detailCondition(conditionId),\n    () => client.admin.discounts.getCondition(id, conditionId, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminDeleteDiscountsDiscountConditionsConditionBatchReq,\n  AdminDiscountsDeleteRes,\n  AdminDiscountsRes,\n  AdminPostDiscountsDiscountConditions,\n  AdminPostDiscountsDiscountConditionsCondition,\n  AdminPostDiscountsDiscountConditionsConditionBatchParams,\n  AdminPostDiscountsDiscountConditionsConditionBatchReq,\n  AdminPostDiscountsDiscountDynamicCodesReq,\n  AdminPostDiscountsDiscountReq,\n  AdminPostDiscountsReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminDiscountKeys } from \"./queries\"\n\nexport const useAdminAddDiscountConditionResourceBatch = (\n  discountId: string,\n  conditionId: string,\n  query?: AdminPostDiscountsDiscountConditionsConditionBatchParams,\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminPostDiscountsDiscountConditionsConditionBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDiscountsDiscountConditionsConditionBatchReq) =>\n      client.admin.discounts.addConditionResourceBatch(\n        discountId,\n        conditionId,\n        payload,\n        query\n      ),\n    buildOptions(queryClient, adminDiscountKeys.detail(discountId), options)\n  )\n}\n\nexport const useAdminDeleteDiscountConditionResourceBatch = (\n  discountId: string,\n  conditionId: string,\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminDeleteDiscountsDiscountConditionsConditionBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteDiscountsDiscountConditionsConditionBatchReq) =>\n      client.admin.discounts.deleteConditionResourceBatch(\n        discountId,\n        conditionId,\n        payload\n      ),\n    buildOptions(queryClient, [adminDiscountKeys.detail(discountId)], options)\n  )\n}\n\nexport const useAdminCreateDiscount = (\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminPostDiscountsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDiscountsReq) => client.admin.discounts.create(payload),\n    buildOptions(queryClient, adminDiscountKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateDiscount = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminPostDiscountsDiscountReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDiscountsDiscountReq) =>\n      client.admin.discounts.update(id, payload),\n    buildOptions(queryClient, adminDiscountKeys.detail(id), options)\n  )\n}\n\nexport const useAdminDeleteDiscount = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDiscountsDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.discounts.delete(id),\n    buildOptions(queryClient, adminDiscountKeys.lists(), options)\n  )\n}\n\nexport const useAdminDiscountAddRegion = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDiscountsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (regionId: string) => client.admin.discounts.addRegion(id, regionId),\n    buildOptions(queryClient, adminDiscountKeys.detail(id), options)\n  )\n}\n\nexport const useAdminDiscountRemoveRegion = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDiscountsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (regionId: string) => client.admin.discounts.removeRegion(id, regionId),\n    buildOptions(queryClient, adminDiscountKeys.detail(id), options)\n  )\n}\n\nexport const useAdminCreateDynamicDiscountCode = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminPostDiscountsDiscountDynamicCodesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDiscountsDiscountDynamicCodesReq) =>\n      client.admin.discounts.createDynamicCode(id, payload),\n    buildOptions(\n      queryClient,\n      [adminDiscountKeys.lists(), adminDiscountKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteDynamicDiscountCode = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDiscountsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (code: string) => client.admin.discounts.deleteDynamicCode(id, code),\n    buildOptions(\n      queryClient,\n      [adminDiscountKeys.lists(), adminDiscountKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDiscountCreateCondition = (\n  discountId: string,\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminPostDiscountsDiscountConditions\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDiscountsDiscountConditions) =>\n      client.admin.discounts.createCondition(discountId, payload),\n    buildOptions(queryClient, adminDiscountKeys.detail(discountId), options)\n  )\n}\n\nexport const useAdminDiscountUpdateCondition = (\n  discountId: string,\n  conditionId: string,\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminPostDiscountsDiscountConditionsCondition\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDiscountsDiscountConditionsCondition) =>\n      client.admin.discounts.updateCondition(discountId, conditionId, payload),\n    buildOptions(queryClient, adminDiscountKeys.detail(discountId), options)\n  )\n}\n\nexport const useAdminDiscountRemoveCondition = (\n  discountId: string,\n  options?: UseMutationOptions<Response<AdminDiscountsDeleteRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (conditionId: string) =>\n      client.admin.discounts.deleteCondition(discountId, conditionId),\n    buildOptions(queryClient, adminDiscountKeys.detail(discountId), options)\n  )\n}\n","import {\n  AdminGetGiftCardsParams,\n  AdminGiftCardsListRes,\n  AdminGiftCardsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_GIFT_CARDS_QUERY_KEY = `admin_gift_cards` as const\n\nexport const adminGiftCardKeys = queryKeysFactory(ADMIN_GIFT_CARDS_QUERY_KEY)\n\ntype GiftCardQueryKeys = typeof adminGiftCardKeys\n\nexport const useAdminGiftCards = (\n  query?: AdminGetGiftCardsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminGiftCardsListRes>,\n    Error,\n    ReturnType<GiftCardQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminGiftCardKeys.list(query),\n    () => client.admin.giftCards.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminGiftCard = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminGiftCardsRes>,\n    Error,\n    ReturnType<GiftCardQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminGiftCardKeys.detail(id),\n    () => client.admin.giftCards.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminGiftCardsDeleteRes,\n  AdminGiftCardsRes,\n  AdminPostGiftCardsGiftCardReq,\n  AdminPostGiftCardsReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminGiftCardKeys } from \"./queries\"\n\nexport const useAdminCreateGiftCard = (\n  options?: UseMutationOptions<\n    Response<AdminGiftCardsRes>,\n    Error,\n    AdminPostGiftCardsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostGiftCardsReq) => client.admin.giftCards.create(payload),\n    buildOptions(queryClient, adminGiftCardKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateGiftCard = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminGiftCardsRes>,\n    Error,\n    AdminPostGiftCardsGiftCardReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostGiftCardsGiftCardReq) =>\n      client.admin.giftCards.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminGiftCardKeys.lists(), adminGiftCardKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteGiftCard = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminGiftCardsDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.giftCards.delete(id),\n    buildOptions(\n      queryClient,\n      [adminGiftCardKeys.lists(), adminGiftCardKeys.detail(id)],\n      options\n    )\n  )\n}\n","import {\n  AdminOrdersRes,\n  AdminPostOrdersOrderFulfillmentsReq,\n  AdminPostOrdersOrderRefundsReq,\n  AdminPostOrdersOrderReq,\n  AdminPostOrdersOrderReturnsReq,\n  AdminPostOrdersOrderShipmentReq,\n  AdminPostOrdersOrderShippingMethodsReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminProductKeys } from \"../products\"\nimport { adminVariantKeys } from \"../variants\"\nimport { adminOrderKeys } from \"./queries\"\n\nexport const useAdminUpdateOrder = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderReq) =>\n      client.admin.orders.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelOrder = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orders.cancel(id),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCompleteOrder = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orders.complete(id),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCapturePayment = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orders.capturePayment(id),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminRefundPayment = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderRefundsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderRefundsReq) =>\n      client.admin.orders.refundPayment(id, payload),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateFulfillment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderFulfillmentsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderFulfillmentsReq) =>\n      client.admin.orders.createFulfillment(orderId, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminOrderKeys.lists(),\n        adminOrderKeys.detail(orderId),\n        adminVariantKeys.all,\n        adminProductKeys.lists(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelFulfillment = (\n  orderId: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (fulfillmentId: string) =>\n      client.admin.orders.cancelFulfillment(orderId, fulfillmentId),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(orderId)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateShipment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderShipmentReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderShipmentReq) =>\n      client.admin.orders.createShipment(orderId, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminRequestReturn = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderReturnsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderReturnsReq) =>\n      client.admin.orders.requestReturn(orderId, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminAddShippingMethod = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderShippingMethodsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderShippingMethodsReq) =>\n      client.admin.orders.addShippingMethod(orderId, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminArchiveOrder = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orders.archive(id),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n","import {\n  AdminGetPriceListPaginationParams,\n  AdminGetPriceListsPriceListProductsParams,\n  AdminPriceListRes,\n  AdminPriceListsListRes,\n  AdminProductsListRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_PRICE_LISTS_QUERY_KEY = `admin_price_lists` as const\n\nexport const adminPriceListKeys = {\n  ...queryKeysFactory(ADMIN_PRICE_LISTS_QUERY_KEY),\n  detailProducts(id: string, query?: any) {\n    return [\n      ...this.detail(id),\n      \"products\" as const,\n      { ...(query || {}) },\n    ] as const\n  },\n}\n\ntype PriceListQueryKeys = typeof adminPriceListKeys\n\nexport const useAdminPriceLists = (\n  query?: AdminGetPriceListPaginationParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminPriceListsListRes>,\n    Error,\n    ReturnType<PriceListQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminPriceListKeys.list(query),\n    () => client.admin.priceLists.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminPriceListProducts = (\n  id: string,\n  query?: AdminGetPriceListsPriceListProductsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductsListRes>,\n    Error,\n    ReturnType<PriceListQueryKeys[\"detailProducts\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminPriceListKeys.detailProducts(id, query),\n    () => client.admin.priceLists.listProducts(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminPriceList = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminPriceListRes>,\n    Error,\n    ReturnType<PriceListQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminPriceListKeys.detail(id),\n    () => client.admin.priceLists.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminDeletePriceListPricesPricesReq,\n  AdminDeletePriceListsPriceListProductsPricesBatchReq,\n  AdminPostPriceListPricesPricesReq,\n  AdminPostPriceListsPriceListPriceListReq,\n  AdminPostPriceListsPriceListReq,\n  AdminPriceListDeleteBatchRes,\n  AdminPriceListDeleteProductPricesRes,\n  AdminPriceListDeleteRes,\n  AdminPriceListDeleteVariantPricesRes,\n  AdminPriceListRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  UseMutationOptions,\n  useMutation,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminProductKeys } from \"../products\"\nimport { adminVariantKeys } from \"../variants\"\nimport { adminPriceListKeys } from \"./queries\"\n\nexport const useAdminCreatePriceList = (\n  options?: UseMutationOptions<\n    Response<AdminPriceListRes>,\n    Error,\n    AdminPostPriceListsPriceListReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostPriceListsPriceListReq) =>\n      client.admin.priceLists.create(payload),\n    buildOptions(queryClient, [adminPriceListKeys.lists()], options)\n  )\n}\n\nexport const useAdminUpdatePriceList = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPriceListRes>,\n    Error,\n    AdminPostPriceListsPriceListPriceListReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostPriceListsPriceListPriceListReq) =>\n      client.admin.priceLists.update(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminPriceListKeys.detail(id),\n        adminPriceListKeys.lists(),\n        adminPriceListKeys.detailProducts(id),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminDeletePriceList = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminPriceListDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.priceLists.delete(id),\n    buildOptions(\n      queryClient,\n      [adminPriceListKeys.detail(id), adminPriceListKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminCreatePriceListPrices = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPriceListRes>,\n    Error,\n    AdminPostPriceListPricesPricesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostPriceListPricesPricesReq) =>\n      client.admin.priceLists.addPrices(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminPriceListKeys.detail(id),\n        adminPriceListKeys.lists(),\n        adminPriceListKeys.detailProducts(id),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminDeletePriceListPrices = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPriceListDeleteBatchRes>,\n    Error,\n    AdminDeletePriceListPricesPricesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeletePriceListPricesPricesReq) =>\n      client.admin.priceLists.deletePrices(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminPriceListKeys.detail(id),\n        adminPriceListKeys.lists(),\n        adminPriceListKeys.detailProducts(id),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminDeletePriceListProductsPrices = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPriceListDeleteBatchRes>,\n    Error,\n    AdminDeletePriceListsPriceListProductsPricesBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeletePriceListsPriceListProductsPricesBatchReq) =>\n      client.admin.priceLists.deleteProductsPrices(id, payload),\n    buildOptions(\n      queryClient,\n      [adminPriceListKeys.detail(id), adminPriceListKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminDeletePriceListProductPrices = (\n  id: string,\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminPriceListDeleteProductPricesRes>,\n    Error\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.priceLists.deleteProductPrices(id, productId),\n    buildOptions(\n      queryClient,\n      [\n        adminPriceListKeys.detail(id),\n        adminPriceListKeys.lists(),\n        adminProductKeys.detail(productId),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminDeletePriceListVariantPrices = (\n  id: string,\n  variantId: string,\n  options?: UseMutationOptions<\n    Response<AdminPriceListDeleteVariantPricesRes>,\n    Error\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.priceLists.deleteVariantPrices(id, variantId),\n    buildOptions(\n      queryClient,\n      [\n        adminPriceListKeys.detail(id),\n        adminPriceListKeys.lists(),\n        adminVariantKeys.detail(variantId),\n      ],\n      options\n    )\n  )\n}\n","import { Response } from \"@medusajs/medusa-js\"\nimport { QueryKey, useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\n\nexport const useAdminCustomQuery = <\n  TQuery extends Record<string, any>,\n  TResponse = any\n>(\n  path: string,\n  queryKey: QueryKey,\n  query?: TQuery,\n  options?: UseQueryOptionsWrapper<\n    Response<TResponse>,\n    Error,\n    (string | TQuery | QueryKey | undefined)[]\n  >\n) => {\n  const { client } = useMedusa()\n\n  const { data, ...rest } = useQuery(\n    [path, query, queryKey],\n    () => client.admin.custom.get<TQuery, TResponse>(path, query),\n    options\n  )\n\n  return { data, ...rest } as const\n}\n","import {\n  AdminDraftOrdersListRes,\n  AdminDraftOrdersRes,\n  AdminGetDraftOrdersParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_DRAFT_ORDERS_QUERY_KEY = `admin_draft_orders` as const\n\nexport const adminDraftOrderKeys = queryKeysFactory(\n  ADMIN_DRAFT_ORDERS_QUERY_KEY\n)\n\ntype DraftOrderQueryKeys = typeof adminDraftOrderKeys\n\nexport const useAdminDraftOrders = (\n  query?: AdminGetDraftOrdersParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDraftOrdersListRes>,\n    Error,\n    ReturnType<DraftOrderQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDraftOrderKeys.list(query),\n    () => client.admin.draftOrders.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminDraftOrder = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDraftOrdersRes>,\n    Error,\n    ReturnType<DraftOrderQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDraftOrderKeys.detail(id),\n    () => client.admin.draftOrders.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminDraftOrdersDeleteRes,\n  AdminDraftOrdersRes,\n  AdminPostDraftOrdersDraftOrderLineItemsItemReq,\n  AdminPostDraftOrdersDraftOrderLineItemsReq,\n  AdminPostDraftOrdersDraftOrderRegisterPaymentRes,\n  AdminPostDraftOrdersDraftOrderReq,\n  AdminPostDraftOrdersReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminDraftOrderKeys } from \"./queries\"\n\nexport const useAdminCreateDraftOrder = (\n  options?: UseMutationOptions<\n    Response<AdminDraftOrdersRes>,\n    Error,\n    AdminPostDraftOrdersReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDraftOrdersReq) =>\n      client.admin.draftOrders.create(payload),\n    buildOptions(queryClient, adminDraftOrderKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateDraftOrder = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDraftOrdersRes>,\n    Error,\n    AdminPostDraftOrdersDraftOrderReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDraftOrdersDraftOrderReq) =>\n      client.admin.draftOrders.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminDraftOrderKeys.detail(id), adminDraftOrderKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteDraftOrder = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDraftOrdersDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.draftOrders.delete(id),\n    buildOptions(\n      queryClient,\n      [adminDraftOrderKeys.detail(id), adminDraftOrderKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminDraftOrderRegisterPayment = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPostDraftOrdersDraftOrderRegisterPaymentRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.draftOrders.markPaid(id),\n    buildOptions(queryClient, adminDraftOrderKeys.detail(id), options)\n  )\n}\n\nexport const useAdminDraftOrderAddLineItem = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDraftOrdersRes>,\n    Error,\n    AdminPostDraftOrdersDraftOrderLineItemsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDraftOrdersDraftOrderLineItemsReq) =>\n      client.admin.draftOrders.addLineItem(id, payload),\n    buildOptions(queryClient, adminDraftOrderKeys.detail(id), options)\n  )\n}\n\nexport const useAdminDraftOrderRemoveLineItem = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDraftOrdersRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (itemId: string) => client.admin.draftOrders.removeLineItem(id, itemId),\n    buildOptions(queryClient, adminDraftOrderKeys.detail(id), options)\n  )\n}\n\nexport const useAdminDraftOrderUpdateLineItem = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDraftOrdersRes>,\n    Error,\n    AdminPostDraftOrdersDraftOrderLineItemsItemReq & { item_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    ({\n      item_id,\n      ...payload\n    }: AdminPostDraftOrdersDraftOrderLineItemsItemReq & { item_id: string }) =>\n      client.admin.draftOrders.updateLineItem(id, item_id, payload),\n    buildOptions(queryClient, adminDraftOrderKeys.detail(id), options)\n  )\n}\n","import {\n  AdminGetInventoryItemsItemLocationLevelsParams,\n  AdminGetInventoryItemsParams,\n  AdminGetStockLocationsParams,\n  AdminInventoryItemsListWithVariantsAndLocationLevelsRes,\n  AdminInventoryItemsLocationLevelsRes,\n  AdminInventoryItemsRes,\n} from \"@medusajs/medusa\"\n\nimport { Response } from \"@medusajs/medusa-js\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\nimport { useMedusa } from \"../../../contexts\"\nimport { useQuery } from \"@tanstack/react-query\"\n\nconst ADMIN_INVENTORY_ITEMS_QUERY_KEY = `admin_inventory_items` as const\n\nexport const adminInventoryItemsKeys = queryKeysFactory(\n  ADMIN_INVENTORY_ITEMS_QUERY_KEY\n)\n\ntype InventoryItemsQueryKeys = typeof adminInventoryItemsKeys\n\nexport const useAdminInventoryItems = (\n  query?: AdminGetInventoryItemsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminInventoryItemsListWithVariantsAndLocationLevelsRes>,\n    Error,\n    ReturnType<InventoryItemsQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n\n  const { data, ...rest } = useQuery(\n    adminInventoryItemsKeys.list(query),\n    () => client.admin.inventoryItems.list(query),\n    { ...options }\n  )\n\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminInventoryItem = (\n  inventoryItemId: string,\n  query?: AdminGetStockLocationsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminInventoryItemsRes>,\n    Error,\n    ReturnType<InventoryItemsQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n\n  const { data, ...rest } = useQuery(\n    adminInventoryItemsKeys.detail(inventoryItemId),\n    () => client.admin.inventoryItems.retrieve(inventoryItemId, query),\n    { ...options }\n  )\n\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminInventoryItemLocationLevels = (\n  inventoryItemId: string,\n  query?: AdminGetInventoryItemsItemLocationLevelsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminInventoryItemsLocationLevelsRes>,\n    Error,\n    ReturnType<InventoryItemsQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n\n  const { data, ...rest } = useQuery(\n    adminInventoryItemsKeys.detail(inventoryItemId),\n    () =>\n      client.admin.inventoryItems.listLocationLevels(inventoryItemId, query),\n    { ...options }\n  )\n\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminInventoryItemsDeleteRes,\n  AdminInventoryItemsRes,\n  AdminPostInventoryItemsInventoryItemReq,\n  AdminPostInventoryItemsItemLocationLevelsLevelReq,\n  AdminPostInventoryItemsItemLocationLevelsReq,\n  AdminPostInventoryItemsReq,\n  AdminPostInventoryItemsParams\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminInventoryItemsKeys } from \"./queries\"\n\n// inventory item\n\n// create inventory item\nexport const useAdminCreateInventoryItem = (\n  options?: UseMutationOptions<\n    Response<AdminInventoryItemsRes>,\n    Error,\n    AdminPostInventoryItemsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostInventoryItemsReq, query?: AdminPostInventoryItemsParams) =>\n      client.admin.inventoryItems.create(payload, query),\n    buildOptions(\n      queryClient,\n      [adminInventoryItemsKeys.lists()],\n      options\n    )\n  )\n}\n\n\n// update inventory item\nexport const useAdminUpdateInventoryItem = (\n  inventoryItemId: string,\n  options?: UseMutationOptions<\n    Response<AdminInventoryItemsRes>,\n    Error,\n    AdminPostInventoryItemsInventoryItemReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostInventoryItemsInventoryItemReq) =>\n      client.admin.inventoryItems.update(inventoryItemId, payload),\n    buildOptions(\n      queryClient,\n      [adminInventoryItemsKeys.lists(), adminInventoryItemsKeys.detail(inventoryItemId)],\n      options\n    )\n  )\n}\n\n// delete inventory item\nexport const useAdminDeleteInventoryItem = (\n  inventoryItemId: string,\n  options?: UseMutationOptions<\n    Response<AdminInventoryItemsDeleteRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.inventoryItems.delete(inventoryItemId),\n    buildOptions(\n      queryClient,\n      [adminInventoryItemsKeys.lists(), adminInventoryItemsKeys.detail(inventoryItemId)],\n      options\n    )\n  )\n}\n\n// location level\nexport const useAdminUpdateLocationLevel = (\n  inventoryItemId: string,\n  options?: UseMutationOptions<\n    Response<AdminInventoryItemsRes>,\n    Error,\n    AdminPostInventoryItemsItemLocationLevelsLevelReq & {\n      stockLocationId: string\n    }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (\n      payload: AdminPostInventoryItemsItemLocationLevelsLevelReq & {\n        stockLocationId: string\n      }\n    ) =>\n      client.admin.inventoryItems.updateLocationLevel(\n        inventoryItemId,\n        payload.stockLocationId,\n        {\n          incoming_quantity: payload.incoming_quantity,\n          stocked_quantity: payload.stocked_quantity,\n        }\n      ),\n    buildOptions(\n      queryClient,\n      [\n        adminInventoryItemsKeys.detail(inventoryItemId),\n        adminInventoryItemsKeys.lists(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteLocationLevel = (\n  inventoryItemId: string,\n  options?: UseMutationOptions<Response<AdminInventoryItemsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (stockLocationId: string) =>\n      client.admin.inventoryItems.deleteLocationLevel(\n        inventoryItemId,\n        stockLocationId\n      ),\n    buildOptions(\n      queryClient,\n      [\n        adminInventoryItemsKeys.detail(inventoryItemId),\n        adminInventoryItemsKeys.lists(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateLocationLevel = (\n  inventoryItemId: string,\n  options?: UseMutationOptions<\n    Response<AdminInventoryItemsRes>,\n    Error,\n    AdminPostInventoryItemsItemLocationLevelsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostInventoryItemsItemLocationLevelsReq) =>\n      client.admin.inventoryItems.createLocationLevel(inventoryItemId, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminInventoryItemsKeys.detail(inventoryItemId),\n        adminInventoryItemsKeys.lists(),\n      ],\n      options\n    )\n  )\n}\n","import { AdminListInvitesRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_INVITES_QUERY_KEY = `admin_invites` as const\n\nexport const adminInviteKeys = queryKeysFactory(ADMIN_INVITES_QUERY_KEY)\n\ntype InviteQueryKeys = typeof adminInviteKeys\n\nexport const useAdminInvites = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminListInvitesRes>,\n    Error,\n    ReturnType<InviteQueryKeys[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminInviteKeys.lists(),\n    () => client.admin.invites.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminInviteDeleteRes,\n  AdminPostInvitesInviteAcceptReq,\n} from \"@medusajs/medusa\"\nimport { AdminPostInvitesPayload, Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminInviteKeys } from \"./queries\"\n\nexport const useAdminAcceptInvite = (\n  options?: UseMutationOptions<\n    Response<void>,\n    Error,\n    AdminPostInvitesInviteAcceptReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostInvitesInviteAcceptReq) =>\n      client.admin.invites.accept(payload),\n    buildOptions(queryClient, adminInviteKeys.lists(), options)\n  )\n}\n\nexport const useAdminResendInvite = (\n  id: string,\n  options?: UseMutationOptions\n) => {\n  const { client } = useMedusa()\n  return useMutation(() => client.admin.invites.resend(id), options)\n}\n\nexport const useAdminCreateInvite = (\n  options?: UseMutationOptions<Response<void>, Error, AdminPostInvitesPayload>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostInvitesPayload) => client.admin.invites.create(payload),\n    buildOptions(queryClient, adminInviteKeys.lists(), options)\n  )\n}\n\nexport const useAdminDeleteInvite = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminInviteDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.invites.delete(id),\n    buildOptions(\n      queryClient,\n      [adminInviteKeys.lists(), adminInviteKeys.detail(id)],\n      options\n    )\n  )\n}\n","import {\n  AdminGetNotesParams,\n  AdminNotesListRes,\n  AdminNotesRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_NOTE_QUERY_KEY = `admin_notes` as const\n\nexport const adminNoteKeys = queryKeysFactory(ADMIN_NOTE_QUERY_KEY)\n\ntype NoteQueryKeys = typeof adminNoteKeys\n\nexport const useAdminNotes = (\n  query?: AdminGetNotesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminNotesListRes>,\n    Error,\n    ReturnType<NoteQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminNoteKeys.list(query),\n    () => client.admin.notes.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminNote = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminNotesRes>,\n    Error,\n    ReturnType<NoteQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminNoteKeys.detail(id),\n    () => client.admin.notes.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminNotesDeleteRes,\n  AdminNotesRes,\n  AdminPostNotesNoteReq,\n  AdminPostNotesReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminNoteKeys } from \"./queries\"\n\nexport const useAdminCreateNote = (\n  options?: UseMutationOptions<\n    Response<AdminNotesRes>,\n    Error,\n    AdminPostNotesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostNotesReq) => client.admin.notes.create(payload),\n    buildOptions(queryClient, adminNoteKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateNote = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminNotesRes>,\n    Error,\n    AdminPostNotesNoteReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostNotesNoteReq) => client.admin.notes.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminNoteKeys.detail(id), adminNoteKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteNote = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminNotesDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.notes.delete(id),\n    buildOptions(\n      queryClient,\n      [adminNoteKeys.detail(id), adminNoteKeys.lists()],\n      options\n    )\n  )\n}\n","import {\n  AdminGetNotificationsParams,\n  AdminNotificationsListRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_NOTIFICATIONS_QUERY_KEY = `admin_notifications` as const\n\nexport const adminNotificationKeys = queryKeysFactory(\n  ADMIN_NOTIFICATIONS_QUERY_KEY\n)\n\ntype NotificationQueryKeys = typeof adminNotificationKeys\n\nexport const useAdminNotifications = (\n  query?: AdminGetNotificationsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminNotificationsListRes>,\n    Error,\n    ReturnType<NotificationQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminNotificationKeys.list(query),\n    () => client.admin.notifications.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminNotificationsRes,\n  AdminPostNotificationsNotificationResendReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminNotificationKeys } from \"./queries\"\n\nexport const useAdminResendNotification = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminNotificationsRes>,\n    Error,\n    AdminPostNotificationsNotificationResendReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostNotificationsNotificationResendReq) =>\n      client.admin.notifications.resend(id, payload),\n    buildOptions(\n      queryClient,\n      [adminNotificationKeys.lists(), adminNotificationKeys.detail(id)],\n      options\n    )\n  )\n}\n","import {\n  AdminOrderEditsListRes,\n  AdminOrderEditsRes,\n  GetOrderEditsOrderEditParams,\n  GetOrderEditsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_ORDER_EDITS_QUERY_KEY = `admin_order_edits` as const\n\nexport const adminOrderEditsKeys = queryKeysFactory(ADMIN_ORDER_EDITS_QUERY_KEY)\ntype OrderEditQueryKeys = typeof adminOrderEditsKeys\n\nexport const useAdminOrderEdit = (\n  id: string,\n  query?: GetOrderEditsOrderEditParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminOrderEditsRes>,\n    Error,\n    ReturnType<OrderEditQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminOrderEditsKeys.detail(id),\n    () => client.admin.orderEdits.retrieve(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminOrderEdits = (\n  query?: GetOrderEditsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminOrderEditsListRes>,\n    Error,\n    ReturnType<OrderEditQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminOrderEditsKeys.list(query),\n    () => client.admin.orderEdits.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport {\n  AdminOrderEditDeleteRes,\n  AdminOrderEditItemChangeDeleteRes,\n  AdminOrderEditsRes,\n  AdminPostOrderEditsEditLineItemsLineItemReq,\n  AdminPostOrderEditsEditLineItemsReq,\n  AdminPostOrderEditsOrderEditReq,\n  AdminPostOrderEditsReq,\n} from \"@medusajs/medusa\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminOrderKeys } from \"../orders\"\nimport { adminOrderEditsKeys } from \"./queries\"\n\nexport const useAdminCreateOrderEdit = (\n  options?: UseMutationOptions<\n    Response<AdminOrderEditsRes>,\n    Error,\n    AdminPostOrderEditsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostOrderEditsReq) =>\n      client.admin.orderEdits.create(payload),\n    buildOptions(\n      queryClient,\n      [adminOrderEditsKeys.lists(), adminOrderKeys.details()],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteOrderEdit = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrderEditDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orderEdits.delete(id),\n    buildOptions(\n      queryClient,\n      [\n        adminOrderEditsKeys.detail(id),\n        adminOrderEditsKeys.lists(),\n        adminOrderKeys.details(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteOrderEditItemChange = (\n  orderEditId: string,\n  itemChangeId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrderEditItemChangeDeleteRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orderEdits.deleteItemChange(orderEditId, itemChangeId),\n    buildOptions(\n      queryClient,\n      [adminOrderEditsKeys.detail(orderEditId), adminOrderEditsKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminOrderEditUpdateLineItem = (\n  orderEditId: string,\n  itemId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrderEditsRes>,\n    Error,\n    AdminPostOrderEditsEditLineItemsLineItemReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrderEditsEditLineItemsLineItemReq) =>\n      client.admin.orderEdits.updateLineItem(orderEditId, itemId, payload),\n    buildOptions(\n      queryClient,\n      [adminOrderEditsKeys.detail(orderEditId), adminOrderEditsKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminOrderEditDeleteLineItem = (\n  orderEditId: string,\n  itemId: string,\n  options?: UseMutationOptions<Response<AdminOrderEditsRes>, Error>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orderEdits.removeLineItem(orderEditId, itemId),\n    buildOptions(\n      queryClient,\n      [adminOrderEditsKeys.detail(orderEditId), adminOrderEditsKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminUpdateOrderEdit = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminOrderEditsRes>,\n    Error,\n    AdminPostOrderEditsOrderEditReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrderEditsOrderEditReq) =>\n      client.admin.orderEdits.update(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminOrderEditsKeys.lists(),\n        adminOrderEditsKeys.detail(id),\n        adminOrderKeys.details(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminOrderEditAddLineItem = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminOrderEditsRes>,\n    Error,\n    AdminPostOrderEditsEditLineItemsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostOrderEditsEditLineItemsReq) =>\n      client.admin.orderEdits.addLineItem(id, payload),\n    buildOptions(\n      queryClient,\n      [adminOrderEditsKeys.lists(), adminOrderEditsKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminRequestOrderEditConfirmation = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrderEditsRes>, Error>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orderEdits.requestConfirmation(id),\n    buildOptions(\n      queryClient,\n      [\n        adminOrderEditsKeys.lists(),\n        adminOrderEditsKeys.detail(id),\n        adminOrderKeys.details(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelOrderEdit = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrderEditsRes>, Error>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orderEdits.cancel(id),\n    buildOptions(\n      queryClient,\n      [\n        adminOrderEditsKeys.lists(),\n        adminOrderEditsKeys.detail(id),\n        adminOrderKeys.details(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminConfirmOrderEdit = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrderEditsRes>, Error>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orderEdits.confirm(id),\n    buildOptions(\n      queryClient,\n      [\n        adminOrderEditsKeys.lists(),\n        adminOrderEditsKeys.detail(id),\n        adminOrderKeys.details(),\n      ],\n      options\n    )\n  )\n}\n","import { AdminPaymentCollectionsRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst PAYMENT_COLLECTION_QUERY_KEY = `paymentCollection` as const\n\nexport const adminPaymentCollectionQueryKeys = queryKeysFactory<\n  typeof PAYMENT_COLLECTION_QUERY_KEY\n>(PAYMENT_COLLECTION_QUERY_KEY)\n\ntype AdminPaymentCollectionKey = typeof adminPaymentCollectionQueryKeys\n\nexport const useAdminPaymentCollection = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminPaymentCollectionsRes>,\n    Error,\n    ReturnType<AdminPaymentCollectionKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminPaymentCollectionQueryKeys.detail(id),\n    () => client.admin.paymentCollections.retrieve(id),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n","import { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport {\n  AdminPaymentCollectionDeleteRes,\n  AdminPaymentCollectionsRes,\n  AdminUpdatePaymentCollectionsReq,\n} from \"@medusajs/medusa\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminPaymentCollectionQueryKeys } from \"./queries\"\n\nexport const useAdminDeletePaymentCollection = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPaymentCollectionDeleteRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.paymentCollections.delete(id),\n    buildOptions(\n      queryClient,\n      [\n        adminPaymentCollectionQueryKeys.detail(id),\n        adminPaymentCollectionQueryKeys.lists(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminUpdatePaymentCollection = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPaymentCollectionsRes>,\n    Error,\n    AdminUpdatePaymentCollectionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminUpdatePaymentCollectionsReq) =>\n      client.admin.paymentCollections.update(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminPaymentCollectionQueryKeys.detail(id),\n        adminPaymentCollectionQueryKeys.lists(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminMarkPaymentCollectionAsAuthorized = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPaymentCollectionsRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.paymentCollections.markAsAuthorized(id),\n    buildOptions(\n      queryClient,\n      [\n        adminPaymentCollectionQueryKeys.detail(id),\n        adminPaymentCollectionQueryKeys.lists(),\n      ],\n      options\n    )\n  )\n}\n","import { AdminPaymentRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst PAYMENT_QUERY_KEY = `payment` as const\n\nexport const adminPaymentQueryKeys =\n  queryKeysFactory<typeof PAYMENT_QUERY_KEY>(PAYMENT_QUERY_KEY)\n\ntype AdminPaymentKey = typeof adminPaymentQueryKeys\n\nexport const useAdminPayment = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminPaymentRes>,\n    Error,\n    ReturnType<AdminPaymentKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminPaymentQueryKeys.detail(id),\n    () => client.admin.payments.retrieve(id),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n","import { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport {\n  AdminPaymentRes,\n  AdminPostPaymentRefundsReq,\n  AdminRefundRes,\n} from \"@medusajs/medusa\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminPaymentQueryKeys } from \"./queries\"\n\nexport const useAdminPaymentsCapturePayment = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminPaymentRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.payments.capturePayment(id),\n    buildOptions(\n      queryClient,\n      [adminPaymentQueryKeys.detail(id), adminPaymentQueryKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminPaymentsRefundPayment = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminRefundRes>,\n    Error,\n    AdminPostPaymentRefundsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostPaymentRefundsReq) =>\n      client.admin.payments.refundPayment(id, payload),\n    buildOptions(\n      queryClient,\n      [adminPaymentQueryKeys.detail(id), adminPaymentQueryKeys.lists()],\n      options\n    )\n  )\n}\n","import {\n  AdminGetProductCategoriesParams,\n  AdminProductCategoriesListRes,\n  AdminGetProductCategoryParams,\n  AdminProductCategoriesCategoryRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_PRODUCT_CATEGORIES_QUERY_KEY = `product_categories` as const\nexport const adminProductCategoryKeys = queryKeysFactory(\n  ADMIN_PRODUCT_CATEGORIES_QUERY_KEY\n)\ntype ProductCategoryQueryKeys = typeof adminProductCategoryKeys\n\nexport const useAdminProductCategories = (\n  query?: AdminGetProductCategoriesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductCategoriesListRes>,\n    Error,\n    ReturnType<ProductCategoryQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductCategoryKeys.list(query),\n    () => client.admin.productCategories.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminProductCategory = (\n  id: string,\n  query?: AdminGetProductCategoryParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductCategoriesCategoryRes>,\n    Error,\n    ReturnType<ProductCategoryQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductCategoryKeys.detail(id),\n    () => client.admin.productCategories.retrieve(id, query),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n","import {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  AdminDeleteProductCategoriesCategoryProductsBatchReq,\n  AdminPostProductCategoriesCategoryProductsBatchReq,\n  AdminPostProductCategoriesCategoryReq,\n  AdminPostProductCategoriesReq,\n  AdminProductCategoriesCategoryDeleteRes,\n  AdminProductCategoriesCategoryRes,\n} from \"@medusajs/medusa\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminProductCategoryKeys } from \"./queries\"\nimport { adminProductKeys } from \"../products\"\n\n/**\n * Hook provides a mutation function for creating product categories.\n *\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable the corresponding feature flag in your medusa backend project.\n */\nexport const useAdminCreateProductCategory = (\n  options?: UseMutationOptions<\n    Response<AdminProductCategoriesCategoryRes>,\n    Error,\n    AdminPostProductCategoriesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostProductCategoriesReq) =>\n      client.admin.productCategories.create(payload),\n    buildOptions(\n      queryClient,\n      [adminProductCategoryKeys.list(), adminProductKeys.details()],\n      options\n    )\n  )\n}\n\n/** Update a product category\n *\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable feature flag `product_categories` in your medusa backend project.\n * @description updates a product category\n * @returns the updated medusa product category\n */\nexport const useAdminUpdateProductCategory = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminProductCategoriesCategoryRes>,\n    Error,\n    AdminPostProductCategoriesCategoryReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostProductCategoriesCategoryReq) =>\n      client.admin.productCategories.update(id, payload),\n      buildOptions(\n        queryClient,\n        [\n          adminProductCategoryKeys.lists(),\n          adminProductCategoryKeys.detail(id),\n          adminProductKeys.details(),\n        ],\n        options\n      )\n    )\n}\n\n/**\n * Delete a product category\n *\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable featureflag `product_categories` in your medusa backend project.\n * @param id\n * @param options\n */\nexport const useAdminDeleteProductCategory = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminProductCategoriesCategoryDeleteRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.productCategories.delete(id),\n    buildOptions(\n      queryClient,\n      [\n        adminProductCategoryKeys.lists(),\n        adminProductCategoryKeys.detail(id),\n        adminProductKeys.all\n      ],\n      options\n    )\n  )\n}\n\n/**\n * Add products to a product category\n *\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable featureflag `product_categories` in your medusa backend project.\n * @description Add products to a product category\n * @param id\n * @param options\n */\nexport const useAdminAddProductsToCategory = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminProductCategoriesCategoryRes>,\n    Error,\n    AdminPostProductCategoriesCategoryProductsBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostProductCategoriesCategoryProductsBatchReq) => {\n      return client.admin.productCategories.addProducts(id, payload)\n    },\n    buildOptions(\n      queryClient,\n      [\n        adminProductCategoryKeys.lists(),\n        adminProductCategoryKeys.detail(id),\n        adminProductKeys.list({ product_category_id: [id] }),\n      ],\n      options\n    )\n  )\n}\n\n/**\n * Remove products from a product category\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable featureflag `product_categories` in your medusa backend project.\n * @description remove products from a product category\n * @param id\n * @param options\n */\nexport const useAdminDeleteProductsFromCategory = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminProductCategoriesCategoryRes>,\n    Error,\n    AdminDeleteProductCategoriesCategoryProductsBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminDeleteProductCategoriesCategoryProductsBatchReq) => {\n      return client.admin.productCategories.removeProducts(id, payload)\n    },\n    buildOptions(\n      queryClient,\n      [\n        adminProductCategoryKeys.lists(),\n        adminProductCategoryKeys.detail(id),\n        adminProductKeys.list({ product_category_id: [id] }),\n      ],\n      options\n    )\n  )\n}\n","import {\n  AdminGetProductTagsParams,\n  AdminProductTagsListRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_PRODUCT_TAGS_QUERY_KEY = `admin_product_tags` as const\n\nexport const adminProductTagKeys = queryKeysFactory(\n  ADMIN_PRODUCT_TAGS_QUERY_KEY\n)\n\ntype ProductQueryKeys = typeof adminProductTagKeys\n\nexport const useAdminProductTags = (\n  query?: AdminGetProductTagsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductTagsListRes>,\n    Error,\n    ReturnType<ProductQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductTagKeys.list(query),\n    () => client.admin.productTags.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminGetProductTypesParams,\n  AdminProductTypesListRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_PRODUCT_TYPES_QUERY_KEY = `admin_product_types` as const\n\nexport const adminProductTypeKeys = queryKeysFactory(\n  ADMIN_PRODUCT_TYPES_QUERY_KEY\n)\n\ntype ProductTypesQueryKeys = typeof adminProductTypeKeys\n\nexport const useAdminProductTypes = (\n  query?: AdminGetProductTypesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductTypesListRes>,\n    Error,\n    ReturnType<ProductTypesQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductTypeKeys.list(query),\n    () => client.admin.productTypes.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminPublishableApiKeysListRes,\n  AdminPublishableApiKeysListSalesChannelsRes,\n  AdminPublishableApiKeysRes,\n  GetPublishableApiKeySalesChannelsParams,\n  GetPublishableApiKeysParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_PUBLISHABLE_API_KEYS_QUERY_KEY =\n  `admin_publishable_api_keys` as const\n\nexport const adminPublishableApiKeysKeys = {\n  ...queryKeysFactory(ADMIN_PUBLISHABLE_API_KEYS_QUERY_KEY),\n  detailSalesChannels(id: string, query?: any) {\n    return [\n      ...this.detail(id),\n      \"sales_channels\" as const,\n      { ...(query || {}) },\n    ] as const\n  },\n}\n\ntype PublishableApiKeyQueryKeys = typeof adminPublishableApiKeysKeys\n\nexport const useAdminPublishableApiKey = (\n  id: string,\n  query?: GetPublishableApiKeysParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminPublishableApiKeysRes>,\n    Error,\n    ReturnType<PublishableApiKeyQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminPublishableApiKeysKeys.detail(id),\n    () => client.admin.publishableApiKeys.retrieve(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminPublishableApiKeys = (\n  query?: GetPublishableApiKeysParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminPublishableApiKeysListRes>,\n    Error,\n    ReturnType<PublishableApiKeyQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminPublishableApiKeysKeys.list(query),\n    () => client.admin.publishableApiKeys.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminPublishableApiKeySalesChannels = (\n  id: string,\n  query?: GetPublishableApiKeySalesChannelsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminPublishableApiKeysListSalesChannelsRes>,\n    Error,\n    ReturnType<PublishableApiKeyQueryKeys[\"detailSalesChannels\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminPublishableApiKeysKeys.detailSalesChannels(id, query),\n    () => client.admin.publishableApiKeys.listSalesChannels(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport {\n  AdminPostPublishableApiKeySalesChannelsBatchReq,\n  AdminPostPublishableApiKeysPublishableApiKeyReq,\n  AdminPostPublishableApiKeysReq,\n  AdminPublishableApiKeyDeleteRes,\n  AdminPublishableApiKeysRes,\n} from \"@medusajs/medusa\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminPublishableApiKeysKeys } from \"./queries\"\n\nexport const useAdminCreatePublishableApiKey = (\n  options?: UseMutationOptions<\n    Response<AdminPublishableApiKeysRes>,\n    Error,\n    AdminPostPublishableApiKeysReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostPublishableApiKeysReq) =>\n      client.admin.publishableApiKeys.create(payload),\n    buildOptions(queryClient, [adminPublishableApiKeysKeys.lists()], options)\n  )\n}\n\nexport const useAdminUpdatePublishableApiKey = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPublishableApiKeysRes>,\n    Error,\n    AdminPostPublishableApiKeysPublishableApiKeyReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostPublishableApiKeysPublishableApiKeyReq) =>\n      client.admin.publishableApiKeys.update(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminPublishableApiKeysKeys.lists(),\n        adminPublishableApiKeysKeys.detail(id),\n        adminPublishableApiKeysKeys.details(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminDeletePublishableApiKey = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPublishableApiKeyDeleteRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.publishableApiKeys.delete(id),\n    buildOptions(\n      queryClient,\n      [\n        adminPublishableApiKeysKeys.detail(id),\n        adminPublishableApiKeysKeys.lists(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminRevokePublishableApiKey = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminPublishableApiKeysRes>, Error>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.publishableApiKeys.revoke(id),\n    buildOptions(\n      queryClient,\n      [\n        adminPublishableApiKeysKeys.lists(),\n        adminPublishableApiKeysKeys.detail(id),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminAddPublishableKeySalesChannelsBatch = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPublishableApiKeysRes>,\n    Error,\n    AdminPostPublishableApiKeySalesChannelsBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostPublishableApiKeySalesChannelsBatchReq) =>\n      client.admin.publishableApiKeys.addSalesChannelsBatch(id, payload),\n    buildOptions(\n      queryClient,\n      [adminPublishableApiKeysKeys.detailSalesChannels(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminRemovePublishableKeySalesChannelsBatch = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPublishableApiKeysRes>,\n    Error,\n    AdminPostPublishableApiKeySalesChannelsBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostPublishableApiKeySalesChannelsBatchReq) =>\n      client.admin.publishableApiKeys.deleteSalesChannelsBatch(id, payload),\n    buildOptions(\n      queryClient,\n      [adminPublishableApiKeysKeys.detailSalesChannels(id)],\n      options\n    )\n  )\n}\n","import {\n  AdminGetRegionsParams,\n  AdminGetRegionsRegionFulfillmentOptionsRes,\n  AdminRegionsListRes,\n  AdminRegionsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_REGIONS_QUERY_KEY = `admin_regions` as const\n\nexport const adminRegionKeys = queryKeysFactory(ADMIN_REGIONS_QUERY_KEY)\n\ntype RegionQueryKeys = typeof adminRegionKeys\n\nexport const useAdminRegions = (\n  query?: AdminGetRegionsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminRegionsListRes>,\n    Error,\n    ReturnType<RegionQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminRegionKeys.list(query),\n    () => client.admin.regions.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminRegion = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminRegionsRes>,\n    Error,\n    ReturnType<RegionQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminRegionKeys.detail(id),\n    () => client.admin.regions.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminRegionFulfillmentOptions = (\n  regionId: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminGetRegionsRegionFulfillmentOptionsRes>,\n    Error,\n    ReturnType<RegionQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminRegionKeys.detail(`${regionId}_fullfillment-options`),\n    () => client.admin.regions.retrieveFulfillmentOptions(regionId),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminPostRegionsRegionCountriesReq,\n  AdminPostRegionsRegionFulfillmentProvidersReq,\n  AdminPostRegionsRegionPaymentProvidersReq,\n  AdminPostRegionsRegionReq,\n  AdminPostRegionsReq,\n  AdminRegionsDeleteRes,\n  AdminRegionsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminRegionKeys } from \"./queries\"\n\nexport const useAdminCreateRegion = (\n  options?: UseMutationOptions<\n    Response<AdminRegionsRes>,\n    Error,\n    AdminPostRegionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostRegionsReq) => client.admin.regions.create(payload),\n    buildOptions(queryClient, adminRegionKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateRegion = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminRegionsRes>,\n    Error,\n    AdminPostRegionsRegionReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostRegionsRegionReq) =>\n      client.admin.regions.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminRegionKeys.lists(), adminRegionKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteRegion = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminRegionsDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.regions.delete(id),\n    buildOptions(\n      queryClient,\n      [adminRegionKeys.lists(), adminRegionKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminRegionAddCountry = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminRegionsRes>,\n    Error,\n    AdminPostRegionsRegionCountriesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostRegionsRegionCountriesReq) =>\n      client.admin.regions.addCountry(id, payload),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n\nexport const useAdminRegionRemoveCountry = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminRegionsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (country_code: string) =>\n      client.admin.regions.deleteCountry(id, country_code),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n\nexport const useAdminRegionAddFulfillmentProvider = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminRegionsRes>,\n    Error,\n    AdminPostRegionsRegionFulfillmentProvidersReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostRegionsRegionFulfillmentProvidersReq) =>\n      client.admin.regions.addFulfillmentProvider(id, payload),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n\nexport const useAdminRegionDeleteFulfillmentProvider = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminRegionsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (provider_id: string) =>\n      client.admin.regions.deleteFulfillmentProvider(id, provider_id),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n\nexport const useAdminRegionAddPaymentProvider = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminRegionsRes>,\n    Error,\n    AdminPostRegionsRegionPaymentProvidersReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostRegionsRegionPaymentProvidersReq) =>\n      client.admin.regions.addPaymentProvider(id, payload),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n\nexport const useAdminRegionDeletePaymentProvider = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminRegionsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (provider_id: string) =>\n      client.admin.regions.deletePaymentProvider(id, provider_id),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n","import {\n  AdminPostReservationsReq,\n  AdminPostReservationsReservationReq,\n  AdminReservationsDeleteRes,\n  AdminReservationsRes,\n} from \"@medusajs/medusa\"\nimport {\n  UseMutationOptions,\n  useMutation,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminInventoryItemsKeys } from \"../inventory-item\"\nimport { adminVariantKeys } from \"../variants\"\nimport { adminReservationsKeys } from \"./queries\"\n\nexport const useAdminCreateReservation = (\n  options?: UseMutationOptions<\n    Response<AdminReservationsRes>,\n    Error,\n    AdminPostReservationsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostReservationsReq) =>\n      client.admin.reservations.create(payload),\n    buildOptions(\n      queryClient,\n      [adminReservationsKeys.lists(), adminVariantKeys.all],\n      options\n    )\n  )\n}\n\nexport const useAdminUpdateReservation = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminReservationsRes>,\n    Error,\n    AdminPostReservationsReservationReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostReservationsReservationReq) =>\n      client.admin.reservations.update(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminReservationsKeys.lists(),\n        adminReservationsKeys.detail(id),\n        adminVariantKeys.all,\n        adminInventoryItemsKeys.details()\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteReservation = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminReservationsDeleteRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.reservations.delete(id),\n    buildOptions(\n      queryClient,\n      [\n        adminReservationsKeys.lists(),\n        adminReservationsKeys.detail(id),\n        adminVariantKeys.all,\n      ],\n      options\n    )\n  )\n}\n","import {\n  AdminGetReservationsParams,\n  AdminReservationsListRes,\n  AdminReservationsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_RESERVATIONS_QUERY_KEY = `admin_reservations` as const\n\nexport const adminReservationsKeys = queryKeysFactory(\n  ADMIN_RESERVATIONS_QUERY_KEY\n)\n\ntype ReservationsQueryKeys = typeof adminReservationsKeys\n\nexport const useAdminReservations = (\n  query?: AdminGetReservationsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminReservationsListRes>,\n    Error,\n    ReturnType<ReservationsQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n\n  const { data, ...rest } = useQuery(\n    adminReservationsKeys.list(query),\n    () => client.admin.reservations.list(query),\n    { ...options }\n  )\n\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminReservation = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminReservationsRes>,\n    Error,\n    ReturnType<ReservationsQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n\n  const { data, ...rest } = useQuery(\n    adminReservationsKeys.detail(id),\n    () => client.admin.reservations.retrieve(id),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminReturnReasonsListRes,\n  AdminReturnReasonsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_RETURNS_REASONS_QUERY_KEY = `admin_return_reasons` as const\n\nexport const adminReturnReasonKeys = queryKeysFactory(\n  ADMIN_RETURNS_REASONS_QUERY_KEY\n)\n\ntype ReturnReasonQueryKeys = typeof adminReturnReasonKeys\n\nexport const useAdminReturnReasons = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminReturnReasonsListRes>,\n    Error,\n    ReturnType<ReturnReasonQueryKeys[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminReturnReasonKeys.lists(),\n    () => client.admin.returnReasons.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminReturnReason = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminReturnReasonsRes>,\n    Error,\n    ReturnType<ReturnReasonQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminReturnReasonKeys.detail(id),\n    () => client.admin.returnReasons.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminPostReturnReasonsReasonReq,\n  AdminPostReturnReasonsReq,\n  AdminReturnReasonsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminReturnReasonKeys } from \"./queries\"\n\nexport const useAdminCreateReturnReason = (\n  options?: UseMutationOptions<\n    Response<AdminReturnReasonsRes>,\n    Error,\n    AdminPostReturnReasonsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostReturnReasonsReq) =>\n      client.admin.returnReasons.create(payload),\n    buildOptions(queryClient, adminReturnReasonKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateReturnReason = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminReturnReasonsRes>,\n    Error,\n    AdminPostReturnReasonsReasonReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostReturnReasonsReasonReq) =>\n      client.admin.returnReasons.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminReturnReasonKeys.detail(id), adminReturnReasonKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteReturnReason = (\n  id: string,\n  options?: UseMutationOptions\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.returnReasons.delete(id),\n    buildOptions(\n      queryClient,\n      [adminReturnReasonKeys.detail(id), adminReturnReasonKeys.lists()],\n      options\n    )\n  )\n}\n","import { AdminReturnsListRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_RETURNS_QUERY_KEY = `admin_returns` as const\n\nexport const adminReturnKeys = queryKeysFactory(ADMIN_RETURNS_QUERY_KEY)\n\ntype ReturnQueryKeys = typeof adminReturnKeys\n\nexport const useAdminReturns = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminReturnsListRes>,\n    Error,\n    ReturnType<ReturnQueryKeys[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminReturnKeys.lists(),\n    () => client.admin.returns.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminPostReturnsReturnReceiveReq,\n  AdminReturnsCancelRes,\n  AdminReturnsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminReturnKeys } from \"./queries\"\n\nexport const useAdminReceiveReturn = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminReturnsRes>,\n    Error,\n    AdminPostReturnsReturnReceiveReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload) => client.admin.returns.receive(id, payload),\n    buildOptions(\n      queryClient,\n      [adminReturnKeys.detail(id), adminReturnKeys.list()],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelReturn = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminReturnsCancelRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.returns.cancel(id),\n    buildOptions(\n      queryClient,\n      [adminReturnKeys.detail(id), adminReturnKeys.list()],\n      options\n    )\n  )\n}\n","import {\n  AdminGetSalesChannelsParams,\n  AdminSalesChannelsListRes,\n  AdminSalesChannelsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_SALES_CHANNELS_QUERY_KEY = `admin_sales_channels` as const\n\nexport const adminSalesChannelsKeys = queryKeysFactory(\n  ADMIN_SALES_CHANNELS_QUERY_KEY\n)\n\ntype SalesChannelsQueryKeys = typeof adminSalesChannelsKeys\n\n/** retrieve a sales channel\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable feature flag `sales_channels` in your medusa backend project.\n * @description gets a sales channel\n * @returns a medusa sales channel\n */\nexport const useAdminSalesChannel = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminSalesChannelsRes>,\n    Error,\n    ReturnType<SalesChannelsQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminSalesChannelsKeys.detail(id),\n    () => client.admin.salesChannels.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\n/**\n * retrieve a list of sales channels\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable feature flag `sales_channels` in your medusa backend project.\n * @description Retrieve a list of sales channel\n * @returns a list of sales channel as well as the pagination properties\n */\nexport const useAdminSalesChannels = (\n  query?: AdminGetSalesChannelsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminSalesChannelsListRes>,\n    Error,\n    ReturnType<SalesChannelsQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminSalesChannelsKeys.list(query),\n    () => client.admin.salesChannels.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminDeleteSalesChannelsChannelProductsBatchReq,\n  AdminPostSalesChannelsChannelProductsBatchReq,\n  AdminPostSalesChannelsReq,\n  AdminPostSalesChannelsSalesChannelReq,\n  AdminSalesChannelsDeleteRes,\n  AdminSalesChannelsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminProductKeys } from \"../products\"\nimport { adminStockLocationsKeys } from \"../stock-locations\"\nimport { adminSalesChannelsKeys } from \"./queries\"\n\n/**\n * Hook provides a mutation function for creating sales channel.\n *\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable the corresponding feature flag in your medusa backend project.\n */\nexport const useAdminCreateSalesChannel = (\n  options?: UseMutationOptions<\n    Response<AdminSalesChannelsRes>,\n    Error,\n    AdminPostSalesChannelsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostSalesChannelsReq) =>\n      client.admin.salesChannels.create(payload),\n    buildOptions(queryClient, [adminSalesChannelsKeys.list()], options)\n  )\n}\n\n/** update a sales channel\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable feature flag `sales_channels` in your medusa backend project.\n * @description updates a sales channel\n * @returns the updated medusa sales channel\n */\nexport const useAdminUpdateSalesChannel = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminSalesChannelsRes>,\n    Error,\n    AdminPostSalesChannelsSalesChannelReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostSalesChannelsSalesChannelReq) =>\n      client.admin.salesChannels.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminSalesChannelsKeys.lists(), adminSalesChannelsKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Delete a sales channel\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n * @param id\n * @param options\n */\nexport const useAdminDeleteSalesChannel = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminSalesChannelsDeleteRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.salesChannels.delete(id),\n    buildOptions(\n      queryClient,\n      [adminSalesChannelsKeys.lists(), adminSalesChannelsKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Remove products from a sales channel\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n * @description remove products from a sales channel\n * @param id\n * @param options\n */\nexport const useAdminDeleteProductsFromSalesChannel = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminSalesChannelsRes>,\n    Error,\n    AdminDeleteSalesChannelsChannelProductsBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminDeleteSalesChannelsChannelProductsBatchReq) => {\n      return client.admin.salesChannels.removeProducts(id, payload)\n    },\n    buildOptions(\n      queryClient,\n      [\n        adminSalesChannelsKeys.lists(),\n        adminSalesChannelsKeys.detail(id),\n        adminProductKeys.list({ sales_channel_id: [id] }),\n      ],\n      options\n    )\n  )\n}\n\n/**\n * Add products to a sales channel\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n * @description Add products to a sales channel\n * @param id\n * @param options\n */\nexport const useAdminAddProductsToSalesChannel = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminSalesChannelsRes>,\n    Error,\n    AdminPostSalesChannelsChannelProductsBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostSalesChannelsChannelProductsBatchReq) => {\n      return client.admin.salesChannels.addProducts(id, payload)\n    },\n    buildOptions(\n      queryClient,\n      [\n        adminSalesChannelsKeys.lists(),\n        adminSalesChannelsKeys.detail(id),\n        adminProductKeys.list({ sales_channel_id: [id] }),\n      ],\n      options\n    )\n  )\n}\n\n/**\n * Add a location to a sales channel\n * @experimental This feature is under development and may change in the future.\n * To use this feature please install the stock location in your medusa backend project.\n * @description Add a location to a sales channel\n * @param options\n */\nexport const useAdminAddLocationToSalesChannel = (\n  options?: UseMutationOptions<\n    Response<AdminSalesChannelsRes>,\n    Error,\n    {\n      sales_channel_id: string\n      location_id: string\n    }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(({ sales_channel_id, location_id }) => {\n    return client.admin.salesChannels.addLocation(sales_channel_id, {\n      location_id,\n    })\n  }, buildOptions(\n    queryClient, \n    [\n      adminSalesChannelsKeys.lists(), \n      adminSalesChannelsKeys.details(), \n      adminStockLocationsKeys.all\n    ], \n    options\n    )\n  )\n}\n\n/**\n * Remove a location from a sales channel\n * @experimental This feature is under development and may change in the future.\n * To use this feature please install the stock location in your medusa backend project.\n * @description Remove a location from a sales channel\n * @param options\n */\nexport const useAdminRemoveLocationFromSalesChannel = (\n  options?: UseMutationOptions<\n    Response<AdminSalesChannelsRes>,\n    Error,\n    {\n      sales_channel_id: string\n      location_id: string\n    }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(({ sales_channel_id, location_id }) => {\n    return client.admin.salesChannels.removeLocation(sales_channel_id, {\n      location_id,\n    })\n  }, buildOptions(\n    queryClient, \n    [\n      adminSalesChannelsKeys.lists(), \n      adminSalesChannelsKeys.details(), \n      adminStockLocationsKeys.all\n    ], \n    options\n    )\n  )\n}\n","import {\n  AdminGetStockLocationsParams,\n  AdminStockLocationsListRes,\n  AdminStockLocationsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_STOCK_LOCATIONS_QUERY_KEY = `admin_stock_locations` as const\n\nexport const adminStockLocationsKeys = queryKeysFactory(\n  ADMIN_STOCK_LOCATIONS_QUERY_KEY\n)\n\ntype StockLocationsQueryKeys = typeof adminStockLocationsKeys\n\nexport const useAdminStockLocations = (\n  query?: AdminGetStockLocationsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminStockLocationsListRes>,\n    Error,\n    ReturnType<StockLocationsQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n\n  const { data, ...rest } = useQuery(\n    adminStockLocationsKeys.list(query),\n    () => client.admin.stockLocations.list(query),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminStockLocation = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminStockLocationsRes>,\n    Error,\n    ReturnType<StockLocationsQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n\n  const { data, ...rest } = useQuery(\n    adminStockLocationsKeys.detail(id),\n    () => client.admin.stockLocations.retrieve(id),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminPostStockLocationsReq,\n  AdminStockLocationsDeleteRes,\n  AdminStockLocationsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminProductKeys } from \"../products\"\nimport { adminVariantKeys } from \"../variants\"\nimport { adminStockLocationsKeys } from \"./queries\"\n\nexport const useAdminCreateStockLocation = (\n  options?: UseMutationOptions<\n    Response<AdminStockLocationsRes>,\n    Error,\n    AdminPostStockLocationsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostStockLocationsReq) =>\n      client.admin.stockLocations.create(payload),\n    buildOptions(queryClient, [adminStockLocationsKeys.lists()], options)\n  )\n}\n\nexport const useAdminUpdateStockLocation = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminStockLocationsRes>,\n    Error,\n    AdminPostStockLocationsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostStockLocationsReq) =>\n      client.admin.stockLocations.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminStockLocationsKeys.lists(), adminStockLocationsKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteStockLocation = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminStockLocationsDeleteRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.stockLocations.delete(id),\n    buildOptions(\n      queryClient,\n      [\n        adminStockLocationsKeys.lists(),\n        adminStockLocationsKeys.detail(id),\n        adminVariantKeys.all,\n        adminProductKeys.lists(),\n      ],\n      options\n    )\n  )\n}\n","import {\n  AdminGetShippingOptionsParams,\n  AdminShippingOptionsListRes,\n  AdminShippingOptionsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_SHIPPING_OPTIONS_QUERY_KEY = `admin_shipping_options` as const\n\nexport const adminShippingOptionKeys = queryKeysFactory(\n  ADMIN_SHIPPING_OPTIONS_QUERY_KEY\n)\n\ntype ShippingOptionQueryKeys = typeof adminShippingOptionKeys\n\nexport const useAdminShippingOptions = (\n  query?: AdminGetShippingOptionsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminShippingOptionsListRes>,\n    Error,\n    ReturnType<ShippingOptionQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminShippingOptionKeys.list(query),\n    () => client.admin.shippingOptions.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminShippingOption = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminShippingOptionsRes>,\n    Error,\n    ReturnType<ShippingOptionQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminShippingOptionKeys.detail(id),\n    () => client.admin.shippingOptions.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminPostShippingOptionsOptionReq,\n  AdminPostShippingOptionsReq,\n  AdminShippingOptionsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminShippingOptionKeys } from \"./queries\"\n\nexport const useAdminCreateShippingOption = (\n  options?: UseMutationOptions<\n    Response<AdminShippingOptionsRes>,\n    Error,\n    AdminPostShippingOptionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostShippingOptionsReq) =>\n      client.admin.shippingOptions.create(payload),\n    buildOptions(queryClient, adminShippingOptionKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateShippingOption = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminShippingOptionsRes>,\n    Error,\n    AdminPostShippingOptionsOptionReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostShippingOptionsOptionReq) =>\n      client.admin.shippingOptions.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminShippingOptionKeys.lists(), adminShippingOptionKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteShippingOption = (\n  id: string,\n  options?: UseMutationOptions\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.shippingOptions.delete(id),\n    buildOptions(\n      queryClient,\n      [adminShippingOptionKeys.lists(), adminShippingOptionKeys.detail(id)],\n      options\n    )\n  )\n}\n","import {\n  AdminShippingProfilesListRes,\n  AdminShippingProfilesRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_COLLECTIONS_QUERY_KEY = `admin_shippingProfiles` as const\n\nexport const adminShippingProfileKeys = queryKeysFactory(\n  ADMIN_COLLECTIONS_QUERY_KEY\n)\n\ntype ShippingProfileQueryKeys = typeof adminShippingProfileKeys\n\nexport const useAdminShippingProfiles = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminShippingProfilesListRes>,\n    Error,\n    ReturnType<ShippingProfileQueryKeys[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminShippingProfileKeys.lists(),\n    () => client.admin.shippingProfiles.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminShippingProfile = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminShippingProfilesRes>,\n    Error,\n    ReturnType<ShippingProfileQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminShippingProfileKeys.detail(id),\n    () => client.admin.shippingProfiles.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminDeleteShippingProfileRes,\n  AdminPostShippingProfilesReq,\n  AdminShippingProfilesRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminShippingProfileKeys } from \"./queries\"\n\nexport const useAdminCreateShippingProfile = (\n  options?: UseMutationOptions<\n    Response<AdminShippingProfilesRes>,\n    Error,\n    AdminPostShippingProfilesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostShippingProfilesReq) =>\n      client.admin.shippingProfiles.create(payload),\n    buildOptions(queryClient, adminShippingProfileKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateShippingProfile = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminShippingProfilesRes>,\n    Error,\n    AdminPostShippingProfilesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostShippingProfilesReq) =>\n      client.admin.shippingProfiles.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminShippingProfileKeys.lists(), adminShippingProfileKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteShippingProfile = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDeleteShippingProfileRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.shippingProfiles.delete(id),\n    buildOptions(\n      queryClient,\n      [adminShippingProfileKeys.lists(), adminShippingProfileKeys.detail(id)],\n      options\n    )\n  )\n}\n","import {\n  AdminExtendedStoresRes,\n  AdminPaymentProvidersList,\n  AdminTaxProvidersList,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_STORE_QUERY_KEY = `admin_store` as const\n\nexport const adminStoreKeys = queryKeysFactory(ADMIN_STORE_QUERY_KEY)\n\ntype StoreQueryKeys = typeof adminStoreKeys\n\nexport const useAdminStorePaymentProviders = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminPaymentProvidersList>,\n    Error,\n    ReturnType<StoreQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminStoreKeys.detail(\"payment_providers\"),\n    () => client.admin.store.listPaymentProviders(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminStoreTaxProviders = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminTaxProvidersList>,\n    Error,\n    ReturnType<StoreQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminStoreKeys.detail(\"tax_providers\"),\n    () => client.admin.store.listTaxProviders(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminStore = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminExtendedStoresRes>,\n    Error,\n    ReturnType<StoreQueryKeys[\"details\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminStoreKeys.details(),\n    () => client.admin.store.retrieve(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { AdminPostStoreReq, AdminStoresRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminStoreKeys } from \"./queries\"\n\nexport const useAdminUpdateStore = (\n  options?: UseMutationOptions<\n    Response<AdminStoresRes>,\n    Error,\n    AdminPostStoreReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostStoreReq) => client.admin.store.update(payload),\n    buildOptions(queryClient, adminStoreKeys.details(), options)\n  )\n}\n\nexport const useAdminAddStoreCurrency = (\n  options?: UseMutationOptions<Response<AdminStoresRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (currency_code: string) => client.admin.store.addCurrency(currency_code),\n    buildOptions(queryClient, adminStoreKeys.details(), options)\n  )\n}\n\nexport const useAdminDeleteStoreCurrency = (\n  options?: UseMutationOptions<Response<AdminStoresRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (currency_code: string) => client.admin.store.deleteCurrency(currency_code),\n    buildOptions(queryClient, adminStoreKeys.details(), options)\n  )\n}\n","import {\n  AdminGetSwapsParams,\n  AdminSwapsListRes,\n  AdminSwapsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_SWAPS_QUERY_KEY = `admin_swaps` as const\n\nexport const adminSwapKeys = queryKeysFactory(ADMIN_SWAPS_QUERY_KEY)\n\ntype SwapsQueryKey = typeof adminSwapKeys\n\nexport const useAdminSwaps = (\n  query?: AdminGetSwapsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminSwapsListRes>,\n    Error,\n    ReturnType<SwapsQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminSwapKeys.list(query),\n    () => client.admin.swaps.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminSwap = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminSwapsRes>,\n    Error,\n    ReturnType<SwapsQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminSwapKeys.detail(id),\n    () => client.admin.swaps.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminOrdersRes,\n  AdminPostOrdersOrderSwapsReq,\n  AdminPostOrdersOrderSwapsSwapFulfillmentsReq,\n  AdminPostOrdersOrderSwapsSwapShipmentsReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { adminOrderKeys, adminProductKeys, adminVariantKeys } from \"..\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminSwapKeys } from \"./queries\"\n\nexport const useAdminCreateSwap = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderSwapsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostOrdersOrderSwapsReq) =>\n      client.admin.orders.createSwap(orderId, payload),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.detail(orderId), adminSwapKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelSwap = (\n  orderId: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (swapId: string) => client.admin.orders.cancelSwap(orderId, swapId),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.detail(orderId), adminSwapKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminFulfillSwap = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderSwapsSwapFulfillmentsReq & { swap_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      swap_id,\n      ...payload\n    }: AdminPostOrdersOrderSwapsSwapFulfillmentsReq & { swap_id: string }) =>\n      client.admin.orders.fulfillSwap(orderId, swap_id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminOrderKeys.detail(orderId),\n        adminSwapKeys.lists(),\n        adminVariantKeys.all,\n        adminProductKeys.lists(),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateSwapShipment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderSwapsSwapShipmentsReq & { swap_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      swap_id,\n      ...payload\n    }: AdminPostOrdersOrderSwapsSwapShipmentsReq & { swap_id: string }) =>\n      client.admin.orders.createSwapShipment(orderId, swap_id, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminProcessSwapPayment = (\n  orderId: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (swapId: string) => client.admin.orders.processSwapPayment(orderId, swapId),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.detail(orderId), adminSwapKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelSwapFulfillment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    { swap_id: string; fulfillment_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      swap_id,\n      fulfillment_id,\n    }: {\n      swap_id: string\n      fulfillment_id: string\n    }) =>\n      client.admin.orders.cancelSwapFulfillment(\n        orderId,\n        swap_id,\n        fulfillment_id\n      ),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.detail(orderId), adminSwapKeys.lists()],\n      options\n    )\n  )\n}\n","import {\n  AdminGetTaxRatesParams,\n  AdminTaxRatesListRes,\n  AdminTaxRatesRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_TAX_RATES_QUERY_KEY = `admin_tax_rates` as const\n\nexport const adminTaxRateKeys = queryKeysFactory(ADMIN_TAX_RATES_QUERY_KEY)\n\ntype TaxRateQueryKeys = typeof adminTaxRateKeys\n\nexport const useAdminTaxRates = (\n  query?: AdminGetTaxRatesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminTaxRatesListRes>,\n    Error,\n    ReturnType<TaxRateQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminTaxRateKeys.list(query),\n    () => client.admin.taxRates.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminTaxRate = (\n  id: string,\n  query?: AdminGetTaxRatesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminTaxRatesRes>,\n    Error,\n    ReturnType<TaxRateQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminTaxRateKeys.detail(id),\n    () => client.admin.taxRates.retrieve(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminDeleteTaxRatesTaxRateProductsReq,\n  AdminDeleteTaxRatesTaxRateProductTypesReq,\n  AdminDeleteTaxRatesTaxRateShippingOptionsReq,\n  AdminPostTaxRatesReq,\n  AdminPostTaxRatesTaxRateProductsReq,\n  AdminPostTaxRatesTaxRateProductTypesReq,\n  AdminPostTaxRatesTaxRateReq,\n  AdminPostTaxRatesTaxRateShippingOptionsReq,\n  AdminTaxRatesDeleteRes,\n  AdminTaxRatesRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminTaxRateKeys } from \"./queries\"\n\nexport const useAdminCreateTaxRate = (\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminPostTaxRatesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostTaxRatesReq) => client.admin.taxRates.create(payload),\n    buildOptions(queryClient, adminTaxRateKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateTaxRate = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminPostTaxRatesTaxRateReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostTaxRatesTaxRateReq) =>\n      client.admin.taxRates.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteTaxRate = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminTaxRatesDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.taxRates.delete(id),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateProductTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminPostTaxRatesTaxRateProductsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostTaxRatesTaxRateProductsReq) =>\n      client.admin.taxRates.addProducts(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteProductTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminDeleteTaxRatesTaxRateProductsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteTaxRatesTaxRateProductsReq) =>\n      client.admin.taxRates.removeProducts(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateProductTypeTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminPostTaxRatesTaxRateProductTypesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostTaxRatesTaxRateProductTypesReq) =>\n      client.admin.taxRates.addProductTypes(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteProductTypeTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminDeleteTaxRatesTaxRateProductTypesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteTaxRatesTaxRateProductTypesReq) =>\n      client.admin.taxRates.removeProductTypes(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateShippingTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminPostTaxRatesTaxRateShippingOptionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostTaxRatesTaxRateShippingOptionsReq) =>\n      client.admin.taxRates.addShippingOptions(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteShippingTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminDeleteTaxRatesTaxRateShippingOptionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteTaxRatesTaxRateShippingOptionsReq) =>\n      client.admin.taxRates.removeShippingOptions(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n","import {\n  AdminDeleteUploadsReq,\n  AdminDeleteUploadsRes,\n  AdminPostUploadsDownloadUrlReq,\n  AdminUploadsDownloadUrlRes,\n  AdminUploadsRes,\n} from \"@medusajs/medusa\"\nimport { AdminCreateUploadPayload, Response } from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminUploadFile = (\n  options?: UseMutationOptions<\n    Response<AdminUploadsRes>,\n    Error,\n    AdminCreateUploadPayload\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation((payload: AdminCreateUploadPayload) => {\n    return client.admin.uploads.create(payload)\n  }, buildOptions(queryClient, undefined, options))\n}\n\nexport const useAdminUploadProtectedFile = (\n  options?: UseMutationOptions<\n    Response<AdminUploadsRes>,\n    Error,\n    AdminCreateUploadPayload\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation((payload: AdminCreateUploadPayload) => {\n    return client.admin.uploads.createProtected(payload)\n  }, buildOptions(queryClient, undefined, options))\n}\n\nexport const useAdminCreatePresignedDownloadUrl = (\n  options?: UseMutationOptions<\n    Response<AdminUploadsDownloadUrlRes>,\n    Error,\n    AdminPostUploadsDownloadUrlReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostUploadsDownloadUrlReq) =>\n      client.admin.uploads.getPresignedDownloadUrl(payload),\n    buildOptions(queryClient, undefined, options)\n  )\n}\n\nexport const useAdminDeleteFile = (\n  options?: UseMutationOptions<\n    Response<AdminDeleteUploadsRes>,\n    Error,\n    AdminDeleteUploadsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteUploadsReq) => client.admin.uploads.delete(payload),\n    buildOptions(queryClient, undefined, options)\n  )\n}\n","import { AdminUserRes, AdminUsersListRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_USERS_QUERY_KEY = `admin_users` as const\n\nexport const adminUserKeys = queryKeysFactory(ADMIN_USERS_QUERY_KEY)\n\ntype UserQueryKeys = typeof adminUserKeys\n\nexport const useAdminUsers = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminUsersListRes>,\n    Error,\n    ReturnType<UserQueryKeys[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminUserKeys.lists(),\n    () => client.admin.users.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminUser = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminUserRes>,\n    Error,\n    ReturnType<UserQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminUserKeys.detail(id),\n    () => client.admin.users.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminDeleteUserRes,\n  AdminResetPasswordRequest,\n  AdminResetPasswordTokenRequest,\n  AdminUserRes,\n} from \"@medusajs/medusa\"\nimport {\n  AdminCreateUserPayload,\n  AdminUpdateUserPayload,\n  Response,\n} from \"@medusajs/medusa-js\"\nimport {\n  useMutation,\n  UseMutationOptions,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { adminUserKeys } from \"./queries\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateUser = (\n  options?: UseMutationOptions<\n    Response<AdminUserRes>,\n    Error,\n    AdminCreateUserPayload\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminCreateUserPayload) => client.admin.users.create(payload),\n    buildOptions(queryClient, adminUserKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateUser = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminUserRes>,\n    Error,\n    AdminUpdateUserPayload\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminUpdateUserPayload) => client.admin.users.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminUserKeys.lists(), adminUserKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteUser = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDeleteUserRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.users.delete(id),\n    buildOptions(\n      queryClient,\n      [adminUserKeys.detail(id), adminUserKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminResetPassword = (\n  options?: UseMutationOptions<\n    Response<AdminUserRes>,\n    Error,\n    AdminResetPasswordRequest\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (payload: AdminResetPasswordRequest) =>\n      client.admin.users.resetPassword(payload),\n    options\n  )\n}\n\nexport const useAdminSendResetPasswordToken = (\n  options?: UseMutationOptions<\n    Response<void>,\n    Error,\n    AdminResetPasswordTokenRequest\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (payload: AdminResetPasswordTokenRequest) =>\n      client.admin.users.sendResetPasswordToken(payload),\n    options\n  )\n}\n"],"mappings":"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","names":["src_exports","__export","CartProvider","MedusaProvider","SessionCartProvider","adminAuthKeys","adminBatchJobsKeys","adminCollectionKeys","adminCurrenciesKeys","adminCustomerGroupKeys","adminCustomerKeys","adminDiscountKeys","adminDraftOrderKeys","adminGiftCardKeys","adminInventoryItemsKeys","adminInviteKeys","adminNoteKeys","adminNotificationKeys","adminOrderEditsKeys","adminOrderKeys","adminPaymentCollectionQueryKeys","adminPaymentQueryKeys","adminPriceListKeys","adminProductCategoryKeys","adminProductKeys","adminProductTagKeys","adminProductTypeKeys","adminPublishableApiKeysKeys","adminRegionKeys","adminReservationsKeys","adminReturnKeys","adminReturnReasonKeys","adminSalesChannelsKeys","adminShippingOptionKeys","adminShippingProfileKeys","adminStockLocationsKeys","adminStoreKeys","adminSwapKeys","adminTaxRateKeys","adminUserKeys","adminVariantKeys","cartKeys","collectionKeys","computeAmount","computeVariantPrice","customerKeys","formatAmount","formatVariantPrice","generateCartState","getVariantPrice","giftCardKeys","orderEditQueryKeys","orderKeys","paymentCollectionQueryKeys","productKeys","productTagKeys","productTypeKeys","storeProductCategoryKeys","useAddShippingMethodToCart","useAdminAcceptInvite","useAdminAddCustomersToCustomerGroup","useAdminAddDiscountConditionResourceBatch","useAdminAddLocationToSalesChannel","useAdminAddProductsToCategory","useAdminAddProductsToCollection","useAdminAddProductsToSalesChannel","useAdminAddPublishableKeySalesChannelsBatch","useAdminAddShippingMethod","useAdminAddStoreCurrency","useAdminArchiveOrder","useAdminBatchJob","useAdminBatchJobs","useAdminCancelBatchJob","useAdminCancelClaim","useAdminCancelClaimFulfillment","useAdminCancelFulfillment","useAdminCancelOrder","useAdminCancelOrderEdit","useAdminCancelReturn","useAdminCancelSwap","useAdminCancelSwapFulfillment","useAdminCapturePayment","useAdminCollection","useAdminCollections","useAdminCompleteOrder","useAdminConfirmBatchJob","useAdminConfirmOrderEdit","useAdminCreateBatchJob","useAdminCreateClaim","useAdminCreateClaimShipment","useAdminCreateCollection","useAdminCreateCustomer","useAdminCreateCustomerGroup","useAdminCreateDiscount","useAdminCreateDraftOrder","useAdminCreateDynamicDiscountCode","useAdminCreateFulfillment","useAdminCreateGiftCard","useAdminCreateInventoryItem","useAdminCreateInvite","useAdminCreateLocationLevel","useAdminCreateNote","useAdminCreateOrderEdit","useAdminCreatePresignedDownloadUrl","useAdminCreatePriceList","useAdminCreatePriceListPrices","useAdminCreateProduct","useAdminCreateProductCategory","useAdminCreateProductOption","useAdminCreateProductTaxRates","useAdminCreateProductTypeTaxRates","useAdminCreatePublishableApiKey","useAdminCreateRegion","useAdminCreateReservation","useAdminCreateReturnReason","useAdminCreateSalesChannel","useAdminCreateShipment","useAdminCreateShippingOption","useAdminCreateShippingProfile","useAdminCreateShippingTaxRates","useAdminCreateStockLocation","useAdminCreateSwap","useAdminCreateSwapShipment","useAdminCreateTaxRate","useAdminCreateUser","useAdminCreateVariant","useAdminCurrencies","useAdminCustomDelete","useAdminCustomPost","useAdminCustomQuery","useAdminCustomer","useAdminCustomerGroup","useAdminCustomerGroupCustomers","useAdminCustomerGroups","useAdminCustomers","useAdminDeleteCollection","useAdminDeleteCustomerGroup","useAdminDeleteDiscount","useAdminDeleteDiscountConditionResourceBatch","useAdminDeleteDraftOrder","useAdminDeleteDynamicDiscountCode","useAdminDeleteFile","useAdminDeleteGiftCard","useAdminDeleteInventoryItem","useAdminDeleteInvite","useAdminDeleteLocationLevel","useAdminDeleteNote","useAdminDeleteOrderEdit","useAdminDeleteOrderEditItemChange","useAdminDeletePaymentCollection","useAdminDeletePriceList","useAdminDeletePriceListPrices","useAdminDeletePriceListProductPrices","useAdminDeletePriceListProductsPrices","useAdminDeletePriceListVariantPrices","useAdminDeleteProduct","useAdminDeleteProductCategory","useAdminDeleteProductOption","useAdminDeleteProductTaxRates","useAdminDeleteProductTypeTaxRates","useAdminDeleteProductsFromCategory","useAdminDeleteProductsFromSalesChannel","useAdminDeletePublishableApiKey","useAdminDeleteRegion","useAdminDeleteReservation","useAdminDeleteReturnReason","useAdminDeleteSalesChannel","useAdminDeleteSession","useAdminDeleteShippingOption","useAdminDeleteShippingProfile","useAdminDeleteShippingTaxRates","useAdminDeleteStockLocation","useAdminDeleteStoreCurrency","useAdminDeleteTaxRate","useAdminDeleteUser","useAdminDeleteVariant","useAdminDiscount","useAdminDiscountAddRegion","useAdminDiscountCreateCondition","useAdminDiscountRemoveCondition","useAdminDiscountRemoveRegion","useAdminDiscountUpdateCondition","useAdminDiscounts","useAdminDraftOrder","useAdminDraftOrderAddLineItem","useAdminDraftOrderRegisterPayment","useAdminDraftOrderRemoveLineItem","useAdminDraftOrderUpdateLineItem","useAdminDraftOrders","useAdminFulfillClaim","useAdminFulfillSwap","useAdminGetDiscountByCode","useAdminGetDiscountCondition","useAdminGetSession","useAdminGiftCard","useAdminGiftCards","useAdminInventoryItem","useAdminInventoryItemLocationLevels","useAdminInventoryItems","useAdminInvites","useAdminLogin","useAdminMarkPaymentCollectionAsAuthorized","useAdminNote","useAdminNotes","useAdminNotifications","useAdminOrder","useAdminOrderEdit","useAdminOrderEditAddLineItem","useAdminOrderEditDeleteLineItem","useAdminOrderEditUpdateLineItem","useAdminOrderEdits","useAdminOrders","useAdminPayment","useAdminPaymentCollection","useAdminPaymentsCapturePayment","useAdminPaymentsRefundPayment","useAdminPriceList","useAdminPriceListProducts","useAdminPriceLists","useAdminProcessSwapPayment","useAdminProduct","useAdminProductCategories","useAdminProductCategory","useAdminProductTagUsage","useAdminProductTags","useAdminProductTypes","useAdminProducts","useAdminPublishableApiKey","useAdminPublishableApiKeySalesChannels","useAdminPublishableApiKeys","useAdminReceiveReturn","useAdminRefundPayment","useAdminRegion","useAdminRegionAddCountry","useAdminRegionAddFulfillmentProvider","useAdminRegionAddPaymentProvider","useAdminRegionDeleteFulfillmentProvider","useAdminRegionDeletePaymentProvider","useAdminRegionFulfillmentOptions","useAdminRegionRemoveCountry","useAdminRegions","useAdminRemoveCustomersFromCustomerGroup","useAdminRemoveLocationFromSalesChannel","useAdminRemoveProductsFromCollection","useAdminRemovePublishableKeySalesChannelsBatch","useAdminRequestOrderEditConfirmation","useAdminRequestReturn","useAdminResendInvite","useAdminResendNotification","useAdminReservation","useAdminReservations","useAdminResetPassword","useAdminReturnReason","useAdminReturnReasons","useAdminReturns","useAdminRevokePublishableApiKey","useAdminSalesChannel","useAdminSalesChannels","useAdminSendResetPasswordToken","useAdminShippingOption","useAdminShippingOptions","useAdminShippingProfile","useAdminShippingProfiles","useAdminStockLocation","useAdminStockLocations","useAdminStore","useAdminStorePaymentProviders","useAdminStoreTaxProviders","useAdminSwap","useAdminSwaps","useAdminTaxRate","useAdminTaxRates","useAdminUpdateClaim","useAdminUpdateCollection","useAdminUpdateCurrency","useAdminUpdateCustomer","useAdminUpdateCustomerGroup","useAdminUpdateDiscount","useAdminUpdateDraftOrder","useAdminUpdateGiftCard","useAdminUpdateInventoryItem","useAdminUpdateLocationLevel","useAdminUpdateNote","useAdminUpdateOrder","useAdminUpdateOrderEdit","useAdminUpdatePaymentCollection","useAdminUpdatePriceList","useAdminUpdateProduct","useAdminUpdateProductCategory","useAdminUpdateProductOption","useAdminUpdatePublishableApiKey","useAdminUpdateRegion","useAdminUpdateReservation","useAdminUpdateReturnReason","useAdminUpdateSalesChannel","useAdminUpdateShippingOption","useAdminUpdateShippingProfile","useAdminUpdateStockLocation","useAdminUpdateStore","useAdminUpdateTaxRate","useAdminUpdateUser","useAdminUpdateVariant","useAdminUploadFile","useAdminUploadProtectedFile","useAdminUser","useAdminUsers","useAdminVariant","useAdminVariants","useAdminVariantsInventory","useAuthorizePaymentSession","useAuthorizePaymentSessionsBatch","useCart","useCartOrder","useCartShippingOptions","useCartSwap","useCollection","useCollections","useCompleteCart","useCompleteOrderEdit","useCreateCart","useCreateCustomer","useCreateLineItem","useCreatePaymentSession","useCreateReturn","useCreateSwap","useCustomerOrders","useDeclineOrderEdit","useDeleteLineItem","useDeletePaymentSession","useGetCart","useGiftCard","useGrantOrderAccess","useManageMultiplePaymentSessions","useManagePaymentSession","useMeCustomer","useMedusa","useOrder","useOrderEdit","useOrders","usePaymentCollection","usePaymentCollectionRefreshPaymentSession","useProduct","useProductCategories","useProductCategory","useProductTags","useProductTypes","useProducts","useRefreshPaymentSession","useRegion","useRegions","useRequestOrderAccess","useReturnReason","useReturnReasons","useSessionCart","useSetPaymentSession","useShippingOptions","useStartCheckout","useUpdateCart","useUpdateLineItem","useUpdateMe","useUpdatePaymentSession","__toCommonJS","import_medusa_js","import_react_query","import_react","MedusaContext","React","useMedusa","context","MedusaProvider","queryClientProviderProps","baseUrl","apiKey","publishableApiKey","customHeaders","children","medusaClient","Medusa","import_react","isObject","input","isArray","isEmpty","formatVariantPrice","variant","region","includeTaxes","rest","amount","computeVariantPrice","convertToLocale","getVariantPrice","computeAmount","p","toDecimal","convertToDecimal","taxRate","getTaxRate","formatAmount","taxAwareAmount","noDivisionCurrencies","divisor","isEmpty","currency_code","minimumFractionDigits","maximumFractionDigits","locale","queryKeysFactory","globalKey","queryKeyFactory","query","id","React","useLocalStorage","key","initialState","item","setItem","data","SessionCartContext","React","reducer","state","action","generateCartState","duplicateVariantIndex","item","items","newItems","generateItems","sum","calculateSessionCartTotal","region","getVariantPrice","total","defaultInitialState","SessionCartProvider","initialState","children","saved","save","useLocalStorage","dispatch","React","setRegion","isObject","isEmpty","getItem","id","setItems","isArray","addItem","updateItem","updateItemQuantity","quantity","incrementItemQuantity","decrementItemQuantity","removeItem","clearItems","SessionCartContext","useSessionCart","context","import_react","import_react_query","CARTS_QUERY_KEY","cartKeys","queryKeysFactory","useGetCart","id","options","client","useMedusa","data","rest","import_react_query","useCreateCart","options","client","useMedusa","data","useUpdateCart","cartId","useCompleteCart","useCreatePaymentSession","useUpdatePaymentSession","provider_id","useRefreshPaymentSession","useSetPaymentSession","useAddShippingMethodToCart","useDeletePaymentSession","useStartCheckout","cart","import_react_query","COLLECTIONS_QUERY_KEY","collectionKeys","queryKeysFactory","useCollection","id","options","client","useMedusa","data","rest","useCollections","query","import_react_query","CUSTOMERS_QUERY_KEY","customerKeys","queryKeysFactory","id","useMeCustomer","options","client","useMedusa","data","rest","useCustomerOrders","query","import_react_query","useCreateCustomer","options","client","useMedusa","data","useUpdateMe","id","import_react_query","GIFT_CARDS_QUERY_KEY","giftCardKeys","queryKeysFactory","useGiftCard","id","options","client","useMedusa","data","rest","import_react_query","useCreateLineItem","cartId","options","client","useMedusa","data","useUpdateLineItem","lineId","useDeleteLineItem","import_react_query","ORDER_EDITS_QUERY_KEY","orderEditQueryKeys","queryKeysFactory","useOrderEdit","id","options","client","useMedusa","data","rest","import_react_query","buildOptions","queryClient","queryKey","options","args","key","useDeclineOrderEdit","id","options","client","useMedusa","queryClient","payload","buildOptions","orderEditQueryKeys","useCompleteOrderEdit","import_react_query","ORDERS_QUERY_KEY","orderKeys","queryKeysFactory","cartId","useOrder","id","options","client","useMedusa","data","rest","useCartOrder","useOrders","query","import_react_query","useRequestOrderAccess","options","client","useMedusa","queryClient","payload","buildOptions","orderKeys","useGrantOrderAccess","import_react_query","PAYMENT_COLLECTION_QUERY_KEY","paymentCollectionQueryKeys","queryKeysFactory","usePaymentCollection","id","options","client","useMedusa","data","rest","import_react_query","useManageMultiplePaymentSessions","id","options","client","useMedusa","queryClient","payload","buildOptions","paymentCollectionQueryKeys","useManagePaymentSession","useAuthorizePaymentSession","session_id","useAuthorizePaymentSessionsBatch","usePaymentCollectionRefreshPaymentSession","import_react_query","STORE_PRODUCT_CATEGORIES_QUERY_KEY","storeProductCategoryKeys","queryKeysFactory","useProductCategories","query","options","client","useMedusa","data","rest","useProductCategory","id","import_react_query","PRODUCT_TAGS_QUERY_KEY","productTagKeys","queryKeysFactory","useProductTags","query","options","client","useMedusa","data","rest","import_react_query","PRODUCT_TYPES_QUERY_KEY","productTypeKeys","queryKeysFactory","useProductTypes","query","options","client","useMedusa","data","rest","import_react_query","PRODUCTS_QUERY_KEY","productKeys","queryKeysFactory","useProducts","query","options","client","useMedusa","data","rest","useProduct","id","import_react_query","REGIONS_QUERY_KEY","regionsKey","queryKeysFactory","useRegions","options","client","useMedusa","data","rest","useRegion","id","import_react_query","RETURNS_REASONS_QUERY_KEY","returnReasonsKey","queryKeysFactory","useReturnReasons","options","client","useMedusa","data","rest","useReturnReason","id","import_react_query","useCreateReturn","options","client","useMedusa","data","import_react_query","SHIPPING_OPTION_QUERY_KEY","shippingOptionKey","queryKeysFactory","cartId","useShippingOptions","query","options","client","useMedusa","data","rest","useCartShippingOptions","import_react_query","SWAPS_QUERY_KEY","swapKey","queryKeysFactory","cartId","useCartSwap","options","client","useMedusa","data","rest","import_react_query","useCreateSwap","options","client","useMedusa","data","CartContext","React","useCart","context","defaultInitialState","CartProvider","children","initialState","cart","setCart","createCart","useCreateCart","updateCart","useUpdateCart","addShippingMethod","useAddShippingMethodToCart","startCheckout","useCreatePaymentSession","pay","useSetPaymentSession","completeCheckout","useCompleteCart","totalItems","i","acc","curr","import_react_query","ADMIN_AUTH_QUERY_KEY","adminAuthKeys","queryKeysFactory","useAdminGetSession","options","client","useMedusa","data","rest","import_react_query","useAdminLogin","options","client","useMedusa","queryClient","payload","buildOptions","adminAuthKeys","useAdminDeleteSession","import_react_query","ADMIN_COLLECTIONS_QUERY_KEY","adminBatchJobsKeys","queryKeysFactory","useAdminBatchJobs","query","options","client","useMedusa","data","rest","useAdminBatchJob","id","import_react_query","useAdminCreateBatchJob","options","client","useMedusa","queryClient","payload","buildOptions","adminBatchJobsKeys","useAdminCancelBatchJob","id","useAdminConfirmBatchJob","import_react_query","import_react_query","ADMIN_PRODUCTS_QUERY_KEY","adminProductKeys","queryKeysFactory","useAdminProducts","query","options","client","useMedusa","data","rest","useAdminProduct","id","useAdminProductTagUsage","import_react_query","useAdminCreateProduct","options","client","useMedusa","queryClient","payload","buildOptions","adminProductKeys","useAdminUpdateProduct","id","useAdminDeleteProduct","useAdminCreateVariant","productId","useAdminUpdateVariant","variant_id","useAdminDeleteVariant","variantId","useAdminCreateProductOption","useAdminUpdateProductOption","option_id","useAdminDeleteProductOption","optionId","import_react_query","ADMIN_VARIANT_QUERY_KEY","adminVariantKeys","queryKeysFactory","useAdminVariants","query","options","client","useMedusa","data","rest","useAdminVariant","id","useAdminVariantsInventory","import_react_query","ADMIN_ORDERS_QUERY_KEY","adminOrderKeys","queryKeysFactory","id","query","useAdminOrders","options","client","useMedusa","data","rest","useAdminOrder","useAdminCreateClaim","orderId","options","client","useMedusa","queryClient","payload","buildOptions","adminOrderKeys","useAdminUpdateClaim","claim_id","useAdminCancelClaim","claimId","useAdminFulfillClaim","adminVariantKeys","adminProductKeys","useAdminCancelClaimFulfillment","fulfillment_id","useAdminCreateClaimShipment","import_react_query","ADMIN_COLLECTIONS_QUERY_KEY","adminCollectionKeys","queryKeysFactory","useAdminCollections","query","options","client","useMedusa","data","rest","useAdminCollection","id","import_react_query","useAdminCreateCollection","options","client","useMedusa","queryClient","payload","buildOptions","adminCollectionKeys","useAdminUpdateCollection","id","useAdminDeleteCollection","useAdminAddProductsToCollection","useAdminRemoveProductsFromCollection","import_react_query","import_react_query","ADMIN_CURRENCIES_QUERY_KEY","adminCurrenciesKeys","queryKeysFactory","useAdminCurrencies","query","options","client","useMedusa","data","rest","useAdminUpdateCurrency","code","options","client","useMedusa","queryClient","payload","buildOptions","adminCurrenciesKeys","import_react_query","import_react_query","ADMIN_CUSTOMER_GROUPS_QUERY_KEY","adminCustomerGroupKeys","queryKeysFactory","id","query","useAdminCustomerGroup","options","client","useMedusa","data","rest","useAdminCustomerGroups","useAdminCustomerGroupCustomers","import_react_query","useAdminCreateCustomerGroup","options","client","useMedusa","queryClient","payload","buildOptions","adminCustomerGroupKeys","useAdminUpdateCustomerGroup","id","useAdminDeleteCustomerGroup","useAdminAddCustomersToCustomerGroup","useAdminRemoveCustomersFromCustomerGroup","import_react_query","ADMIN_CUSTOMERS_QUERY_KEY","adminCustomerKeys","queryKeysFactory","useAdminCustomers","query","options","client","useMedusa","data","rest","useAdminCustomer","id","import_react_query","useAdminCreateCustomer","options","client","useMedusa","queryClient","payload","buildOptions","adminCustomerKeys","useAdminUpdateCustomer","id","import_react_query","ADMIN_DISCOUNTS_QUERY_KEY","adminDiscountKeys","queryKeysFactory","id","query","useAdminDiscounts","options","client","useMedusa","data","rest","useAdminDiscount","useAdminGetDiscountByCode","code","useAdminGetDiscountCondition","conditionId","import_react_query","useAdminAddDiscountConditionResourceBatch","discountId","conditionId","query","options","client","useMedusa","queryClient","payload","buildOptions","adminDiscountKeys","useAdminDeleteDiscountConditionResourceBatch","useAdminCreateDiscount","useAdminUpdateDiscount","id","useAdminDeleteDiscount","useAdminDiscountAddRegion","regionId","useAdminDiscountRemoveRegion","useAdminCreateDynamicDiscountCode","useAdminDeleteDynamicDiscountCode","code","useAdminDiscountCreateCondition","useAdminDiscountUpdateCondition","useAdminDiscountRemoveCondition","import_react_query","ADMIN_GIFT_CARDS_QUERY_KEY","adminGiftCardKeys","queryKeysFactory","useAdminGiftCards","query","options","client","useMedusa","data","rest","useAdminGiftCard","id","import_react_query","useAdminCreateGiftCard","options","client","useMedusa","queryClient","payload","buildOptions","adminGiftCardKeys","useAdminUpdateGiftCard","id","useAdminDeleteGiftCard","import_react_query","useAdminUpdateOrder","id","options","client","useMedusa","queryClient","payload","buildOptions","adminOrderKeys","useAdminCancelOrder","useAdminCompleteOrder","useAdminCapturePayment","useAdminRefundPayment","useAdminCreateFulfillment","orderId","adminVariantKeys","adminProductKeys","useAdminCancelFulfillment","fulfillmentId","useAdminCreateShipment","useAdminRequestReturn","useAdminAddShippingMethod","useAdminArchiveOrder","import_react_query","ADMIN_PRICE_LISTS_QUERY_KEY","adminPriceListKeys","queryKeysFactory","id","query","useAdminPriceLists","options","client","useMedusa","data","rest","useAdminPriceListProducts","useAdminPriceList","import_react_query","useAdminCreatePriceList","options","client","useMedusa","queryClient","payload","buildOptions","adminPriceListKeys","useAdminUpdatePriceList","id","useAdminDeletePriceList","useAdminCreatePriceListPrices","useAdminDeletePriceListPrices","useAdminDeletePriceListProductsPrices","useAdminDeletePriceListProductPrices","productId","adminProductKeys","useAdminDeletePriceListVariantPrices","variantId","adminVariantKeys","invalidateRelatedDomain","queryClient","domain","adminProductKeys","adminCustomerKeys","adminCustomerGroupKeys","adminOrderKeys","adminDiscountKeys","adminGiftCardKeys","adminPriceListKeys","buildCustomOptions","queryKey","options","relatedDomains","args","key","useAdminCustomPost","path","client","useMedusa","payload","useAdminCustomDelete","import_react_query","useAdminCustomQuery","path","queryKey","query","options","client","useMedusa","data","rest","import_react_query","ADMIN_DRAFT_ORDERS_QUERY_KEY","adminDraftOrderKeys","queryKeysFactory","useAdminDraftOrders","query","options","client","useMedusa","data","rest","useAdminDraftOrder","id","import_react_query","useAdminCreateDraftOrder","options","client","useMedusa","queryClient","payload","buildOptions","adminDraftOrderKeys","useAdminUpdateDraftOrder","id","useAdminDeleteDraftOrder","useAdminDraftOrderRegisterPayment","useAdminDraftOrderAddLineItem","useAdminDraftOrderRemoveLineItem","itemId","useAdminDraftOrderUpdateLineItem","item_id","import_react_query","ADMIN_INVENTORY_ITEMS_QUERY_KEY","adminInventoryItemsKeys","queryKeysFactory","useAdminInventoryItems","query","options","client","useMedusa","data","rest","useAdminInventoryItem","inventoryItemId","useAdminInventoryItemLocationLevels","import_react_query","useAdminCreateInventoryItem","options","client","useMedusa","queryClient","payload","query","buildOptions","adminInventoryItemsKeys","useAdminUpdateInventoryItem","inventoryItemId","useAdminDeleteInventoryItem","useAdminUpdateLocationLevel","useAdminDeleteLocationLevel","stockLocationId","useAdminCreateLocationLevel","import_react_query","ADMIN_INVITES_QUERY_KEY","adminInviteKeys","queryKeysFactory","useAdminInvites","options","client","useMedusa","data","rest","import_react_query","useAdminAcceptInvite","options","client","useMedusa","queryClient","payload","buildOptions","adminInviteKeys","useAdminResendInvite","id","useAdminCreateInvite","useAdminDeleteInvite","import_react_query","ADMIN_NOTE_QUERY_KEY","adminNoteKeys","queryKeysFactory","useAdminNotes","query","options","client","useMedusa","data","rest","useAdminNote","id","import_react_query","useAdminCreateNote","options","client","useMedusa","queryClient","payload","buildOptions","adminNoteKeys","useAdminUpdateNote","id","useAdminDeleteNote","import_react_query","ADMIN_NOTIFICATIONS_QUERY_KEY","adminNotificationKeys","queryKeysFactory","useAdminNotifications","query","options","client","useMedusa","data","rest","import_react_query","useAdminResendNotification","id","options","client","useMedusa","queryClient","payload","buildOptions","adminNotificationKeys","import_react_query","ADMIN_ORDER_EDITS_QUERY_KEY","adminOrderEditsKeys","queryKeysFactory","useAdminOrderEdit","id","query","options","client","useMedusa","data","rest","useAdminOrderEdits","import_react_query","useAdminCreateOrderEdit","options","client","useMedusa","queryClient","payload","buildOptions","adminOrderEditsKeys","adminOrderKeys","useAdminDeleteOrderEdit","id","useAdminDeleteOrderEditItemChange","orderEditId","itemChangeId","useAdminOrderEditUpdateLineItem","itemId","useAdminOrderEditDeleteLineItem","useAdminUpdateOrderEdit","useAdminOrderEditAddLineItem","useAdminRequestOrderEditConfirmation","useAdminCancelOrderEdit","useAdminConfirmOrderEdit","import_react_query","PAYMENT_COLLECTION_QUERY_KEY","adminPaymentCollectionQueryKeys","queryKeysFactory","useAdminPaymentCollection","id","options","client","useMedusa","data","rest","import_react_query","useAdminDeletePaymentCollection","id","options","client","useMedusa","queryClient","buildOptions","adminPaymentCollectionQueryKeys","useAdminUpdatePaymentCollection","payload","useAdminMarkPaymentCollectionAsAuthorized","import_react_query","PAYMENT_QUERY_KEY","adminPaymentQueryKeys","queryKeysFactory","useAdminPayment","id","options","client","useMedusa","data","rest","import_react_query","useAdminPaymentsCapturePayment","id","options","client","useMedusa","queryClient","buildOptions","adminPaymentQueryKeys","useAdminPaymentsRefundPayment","payload","import_react_query","ADMIN_PRODUCT_CATEGORIES_QUERY_KEY","adminProductCategoryKeys","queryKeysFactory","useAdminProductCategories","query","options","client","useMedusa","data","rest","useAdminProductCategory","id","import_react_query","useAdminCreateProductCategory","options","client","useMedusa","queryClient","payload","buildOptions","adminProductCategoryKeys","adminProductKeys","useAdminUpdateProductCategory","id","useAdminDeleteProductCategory","useAdminAddProductsToCategory","useAdminDeleteProductsFromCategory","import_react_query","ADMIN_PRODUCT_TAGS_QUERY_KEY","adminProductTagKeys","queryKeysFactory","useAdminProductTags","query","options","client","useMedusa","data","rest","import_react_query","ADMIN_PRODUCT_TYPES_QUERY_KEY","adminProductTypeKeys","queryKeysFactory","useAdminProductTypes","query","options","client","useMedusa","data","rest","import_react_query","ADMIN_PUBLISHABLE_API_KEYS_QUERY_KEY","adminPublishableApiKeysKeys","queryKeysFactory","id","query","useAdminPublishableApiKey","options","client","useMedusa","data","rest","useAdminPublishableApiKeys","useAdminPublishableApiKeySalesChannels","import_react_query","useAdminCreatePublishableApiKey","options","client","useMedusa","queryClient","payload","buildOptions","adminPublishableApiKeysKeys","useAdminUpdatePublishableApiKey","id","useAdminDeletePublishableApiKey","useAdminRevokePublishableApiKey","useAdminAddPublishableKeySalesChannelsBatch","useAdminRemovePublishableKeySalesChannelsBatch","import_react_query","ADMIN_REGIONS_QUERY_KEY","adminRegionKeys","queryKeysFactory","useAdminRegions","query","options","client","useMedusa","data","rest","useAdminRegion","id","useAdminRegionFulfillmentOptions","regionId","import_react_query","useAdminCreateRegion","options","client","useMedusa","queryClient","payload","buildOptions","adminRegionKeys","useAdminUpdateRegion","id","useAdminDeleteRegion","useAdminRegionAddCountry","useAdminRegionRemoveCountry","country_code","useAdminRegionAddFulfillmentProvider","useAdminRegionDeleteFulfillmentProvider","provider_id","useAdminRegionAddPaymentProvider","useAdminRegionDeletePaymentProvider","import_react_query","import_react_query","ADMIN_RESERVATIONS_QUERY_KEY","adminReservationsKeys","queryKeysFactory","useAdminReservations","query","options","client","useMedusa","data","rest","useAdminReservation","id","useAdminCreateReservation","options","client","useMedusa","queryClient","payload","buildOptions","adminReservationsKeys","adminVariantKeys","useAdminUpdateReservation","id","adminInventoryItemsKeys","useAdminDeleteReservation","import_react_query","ADMIN_RETURNS_REASONS_QUERY_KEY","adminReturnReasonKeys","queryKeysFactory","useAdminReturnReasons","options","client","useMedusa","data","rest","useAdminReturnReason","id","import_react_query","useAdminCreateReturnReason","options","client","useMedusa","queryClient","payload","buildOptions","adminReturnReasonKeys","useAdminUpdateReturnReason","id","useAdminDeleteReturnReason","import_react_query","ADMIN_RETURNS_QUERY_KEY","adminReturnKeys","queryKeysFactory","useAdminReturns","options","client","useMedusa","data","rest","import_react_query","useAdminReceiveReturn","id","options","client","useMedusa","queryClient","payload","buildOptions","adminReturnKeys","useAdminCancelReturn","import_react_query","ADMIN_SALES_CHANNELS_QUERY_KEY","adminSalesChannelsKeys","queryKeysFactory","useAdminSalesChannel","id","options","client","useMedusa","data","rest","useAdminSalesChannels","query","import_react_query","import_react_query","ADMIN_STOCK_LOCATIONS_QUERY_KEY","adminStockLocationsKeys","queryKeysFactory","useAdminStockLocations","query","options","client","useMedusa","data","rest","useAdminStockLocation","id","import_react_query","useAdminCreateStockLocation","options","client","useMedusa","queryClient","payload","buildOptions","adminStockLocationsKeys","useAdminUpdateStockLocation","id","useAdminDeleteStockLocation","adminVariantKeys","adminProductKeys","useAdminCreateSalesChannel","options","client","useMedusa","queryClient","payload","buildOptions","adminSalesChannelsKeys","useAdminUpdateSalesChannel","id","useAdminDeleteSalesChannel","useAdminDeleteProductsFromSalesChannel","adminProductKeys","useAdminAddProductsToSalesChannel","useAdminAddLocationToSalesChannel","sales_channel_id","location_id","adminStockLocationsKeys","useAdminRemoveLocationFromSalesChannel","import_react_query","ADMIN_SHIPPING_OPTIONS_QUERY_KEY","adminShippingOptionKeys","queryKeysFactory","useAdminShippingOptions","query","options","client","useMedusa","data","rest","useAdminShippingOption","id","import_react_query","useAdminCreateShippingOption","options","client","useMedusa","queryClient","payload","buildOptions","adminShippingOptionKeys","useAdminUpdateShippingOption","id","useAdminDeleteShippingOption","import_react_query","ADMIN_COLLECTIONS_QUERY_KEY","adminShippingProfileKeys","queryKeysFactory","useAdminShippingProfiles","options","client","useMedusa","data","rest","useAdminShippingProfile","id","import_react_query","useAdminCreateShippingProfile","options","client","useMedusa","queryClient","payload","buildOptions","adminShippingProfileKeys","useAdminUpdateShippingProfile","id","useAdminDeleteShippingProfile","import_react_query","ADMIN_STORE_QUERY_KEY","adminStoreKeys","queryKeysFactory","useAdminStorePaymentProviders","options","client","useMedusa","data","rest","useAdminStoreTaxProviders","useAdminStore","import_react_query","useAdminUpdateStore","options","client","useMedusa","queryClient","payload","buildOptions","adminStoreKeys","useAdminAddStoreCurrency","currency_code","useAdminDeleteStoreCurrency","import_react_query","ADMIN_SWAPS_QUERY_KEY","adminSwapKeys","queryKeysFactory","useAdminSwaps","query","options","client","useMedusa","data","rest","useAdminSwap","id","import_react_query","useAdminCreateSwap","orderId","options","client","useMedusa","queryClient","payload","buildOptions","adminOrderKeys","adminSwapKeys","useAdminCancelSwap","swapId","useAdminFulfillSwap","swap_id","adminVariantKeys","adminProductKeys","useAdminCreateSwapShipment","useAdminProcessSwapPayment","useAdminCancelSwapFulfillment","fulfillment_id","import_react_query","ADMIN_TAX_RATES_QUERY_KEY","adminTaxRateKeys","queryKeysFactory","useAdminTaxRates","query","options","client","useMedusa","data","rest","useAdminTaxRate","id","import_react_query","useAdminCreateTaxRate","options","client","useMedusa","queryClient","payload","buildOptions","adminTaxRateKeys","useAdminUpdateTaxRate","id","useAdminDeleteTaxRate","useAdminCreateProductTaxRates","useAdminDeleteProductTaxRates","useAdminCreateProductTypeTaxRates","useAdminDeleteProductTypeTaxRates","useAdminCreateShippingTaxRates","useAdminDeleteShippingTaxRates","import_react_query","useAdminUploadFile","options","client","useMedusa","queryClient","payload","buildOptions","useAdminUploadProtectedFile","useAdminCreatePresignedDownloadUrl","useAdminDeleteFile","import_react_query","ADMIN_USERS_QUERY_KEY","adminUserKeys","queryKeysFactory","useAdminUsers","options","client","useMedusa","data","rest","useAdminUser","id","import_react_query","useAdminCreateUser","options","client","useMedusa","queryClient","payload","buildOptions","adminUserKeys","useAdminUpdateUser","id","useAdminDeleteUser","useAdminResetPassword","useAdminSendResetPasswordToken"]}