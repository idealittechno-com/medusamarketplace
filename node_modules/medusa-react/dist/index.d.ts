import * as _medusajs_medusa_js from '@medusajs/medusa-js';
import _medusajs_medusa_js__default, { Response, AdminPostInvitesPayload, AdminCreateUploadPayload, AdminCreateUserPayload, AdminUpdateUserPayload } from '@medusajs/medusa-js';
import * as _tanstack_react_query from '@tanstack/react-query';
import { QueryClientProviderProps, QueryKey, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import React from 'react';
import * as _medusajs_medusa from '@medusajs/medusa';
import { Region, ProductVariant as ProductVariant$1, StoreCartsRes, StorePostCartReq, StorePostCartsCartReq, StoreCompleteCartRes, StorePostCartsCartPaymentSessionUpdateReq, StorePostCartsCartShippingMethodReq, StoreCollectionsRes, StoreGetCollectionsParams, StoreCollectionsListRes, StoreCustomersRes, StoreGetCustomersCustomerOrdersParams, StoreCustomersListOrdersRes, StorePostCustomersReq, StorePostCustomersCustomerReq, StoreGiftCardsRes, StorePostCartsCartLineItemsReq, StorePostCartsCartLineItemsItemReq, StoreOrderEditsRes, StorePostOrderEditsOrderEditDecline, StoreGetOrdersParams, StoreOrdersRes, StorePostCustomersCustomerOrderClaimReq, StorePostCustomersCustomerAcceptClaimReq, StorePaymentCollectionsRes, StorePostPaymentCollectionsBatchSessionsReq, StorePaymentCollectionSessionsReq, StorePostPaymentCollectionsBatchSessionsAuthorizeReq, StorePaymentCollectionsSessionRes, StoreGetProductCategoriesParams, StoreGetProductCategoriesRes, StoreGetProductCategoriesCategoryParams, StoreGetProductCategoriesCategoryRes, StoreGetProductTagsParams, StoreProductTagsListRes, StoreGetProductTypesParams, StoreProductTypesListRes, StoreGetProductsParams, StoreProductsListRes, StoreProductsRes, StoreRegionsListRes, StoreRegionsRes, StoreReturnReasonsListRes, StoreReturnReasonsRes, StoreReturnsRes, StorePostReturnsReq, StoreGetShippingOptionsParams, StoreShippingOptionsListRes, StoreSwapsRes, StorePostSwapsReq, AdminAuthRes, AdminPostAuthReq, AdminGetBatchParams, AdminBatchJobListRes, AdminBatchJobRes, AdminPostBatchesReq, AdminOrdersRes, AdminPostOrdersOrderClaimsReq, AdminPostOrdersOrderClaimsClaimReq, AdminPostOrdersOrderClaimsClaimFulfillmentsReq, AdminPostOrdersOrderClaimsClaimShipmentsReq, AdminGetCollectionsParams, AdminCollectionsListRes, AdminCollectionsRes, AdminPostCollectionsReq, AdminPostCollectionsCollectionReq, AdminCollectionsDeleteRes, AdminPostProductsToCollectionReq, AdminDeleteProductsFromCollectionRes, AdminDeleteProductsFromCollectionReq, AdminCurrenciesRes, AdminPostCurrenciesCurrencyReq, AdminGetCurrenciesParams, AdminCurrenciesListRes, AdminGetCustomersParams, AdminGetCustomerGroupsGroupParams, AdminCustomerGroupsRes, AdminGetCustomerGroupsParams, AdminCustomerGroupsListRes, AdminCustomersListRes, AdminPostCustomerGroupsReq, AdminPostCustomerGroupsGroupReq, AdminCustomerGroupsDeleteRes, AdminPostCustomerGroupsGroupCustomersBatchReq, AdminDeleteCustomerGroupsGroupCustomerBatchReq, AdminCustomersRes, AdminPostCustomersReq, AdminPostCustomersCustomerReq, AdminGetDiscountsParams, AdminDiscountsListRes, AdminGetDiscountParams, AdminDiscountsRes, AdminGetDiscountsDiscountConditionsConditionParams, AdminDiscountConditionsRes, AdminPostDiscountsDiscountConditionsConditionBatchParams, AdminPostDiscountsDiscountConditionsConditionBatchReq, AdminDeleteDiscountsDiscountConditionsConditionBatchReq, AdminPostDiscountsReq, AdminPostDiscountsDiscountReq, AdminDiscountsDeleteRes, AdminPostDiscountsDiscountDynamicCodesReq, AdminPostDiscountsDiscountConditions, AdminPostDiscountsDiscountConditionsCondition, AdminGetDraftOrdersParams, AdminDraftOrdersListRes, AdminDraftOrdersRes, AdminPostDraftOrdersReq, AdminPostDraftOrdersDraftOrderReq, AdminDraftOrdersDeleteRes, AdminPostDraftOrdersDraftOrderRegisterPaymentRes, AdminPostDraftOrdersDraftOrderLineItemsReq, AdminPostDraftOrdersDraftOrderLineItemsItemReq, AdminGetGiftCardsParams, AdminGiftCardsListRes, AdminGiftCardsRes, AdminPostGiftCardsReq, AdminPostGiftCardsGiftCardReq, AdminGiftCardsDeleteRes, AdminGetInventoryItemsParams, AdminInventoryItemsListWithVariantsAndLocationLevelsRes, AdminGetStockLocationsParams, AdminInventoryItemsRes, AdminGetInventoryItemsItemLocationLevelsParams, AdminInventoryItemsLocationLevelsRes, AdminPostInventoryItemsReq, AdminPostInventoryItemsInventoryItemReq, AdminInventoryItemsDeleteRes, AdminPostInventoryItemsItemLocationLevelsLevelReq, AdminPostInventoryItemsItemLocationLevelsReq, AdminListInvitesRes, AdminPostInvitesInviteAcceptReq, AdminInviteDeleteRes, AdminGetNotesParams, AdminNotesListRes, AdminNotesRes, AdminPostNotesReq, AdminPostNotesNoteReq, AdminNotesDeleteRes, AdminGetNotificationsParams, AdminNotificationsListRes, AdminNotificationsRes, AdminPostNotificationsNotificationResendReq, GetOrderEditsOrderEditParams, AdminOrderEditsRes, GetOrderEditsParams, AdminOrderEditsListRes, AdminPostOrderEditsReq, AdminOrderEditDeleteRes, AdminOrderEditItemChangeDeleteRes, AdminPostOrderEditsEditLineItemsLineItemReq, AdminPostOrderEditsOrderEditReq, AdminPostOrderEditsEditLineItemsReq, AdminGetOrdersParams, AdminOrdersListRes, AdminPostOrdersOrderReq, AdminPostOrdersOrderRefundsReq, AdminPostOrdersOrderFulfillmentsReq, AdminPostOrdersOrderShipmentReq, AdminPostOrdersOrderReturnsReq, AdminPostOrdersOrderShippingMethodsReq, AdminPaymentCollectionsRes, AdminPaymentCollectionDeleteRes, AdminUpdatePaymentCollectionsReq, AdminPaymentRes, AdminRefundRes, AdminPostPaymentRefundsReq, AdminGetPriceListPaginationParams, AdminPriceListsListRes, AdminGetPriceListsPriceListProductsParams, AdminProductsListRes, AdminPriceListRes, AdminPostPriceListsPriceListReq, AdminPostPriceListsPriceListPriceListReq, AdminPriceListDeleteRes, AdminPostPriceListPricesPricesReq, AdminPriceListDeleteBatchRes, AdminDeletePriceListPricesPricesReq, AdminDeletePriceListsPriceListProductsPricesBatchReq, AdminPriceListDeleteProductPricesRes, AdminPriceListDeleteVariantPricesRes, AdminGetProductCategoriesParams, AdminProductCategoriesListRes, AdminGetProductCategoryParams, AdminProductCategoriesCategoryRes, AdminPostProductCategoriesReq, AdminPostProductCategoriesCategoryReq, AdminProductCategoriesCategoryDeleteRes, AdminPostProductCategoriesCategoryProductsBatchReq, AdminDeleteProductCategoriesCategoryProductsBatchReq, AdminGetProductTagsParams, AdminProductTagsListRes, AdminGetProductTypesParams, AdminProductTypesListRes, AdminGetProductsParams, AdminGetProductParams, AdminProductsRes, AdminProductsListTagsRes, AdminPostProductsReq, AdminPostProductsProductReq, AdminProductsDeleteRes, AdminPostProductsProductVariantsReq, AdminPostProductsProductVariantsVariantReq, AdminProductsDeleteVariantRes, AdminPostProductsProductOptionsReq, AdminPostProductsProductOptionsOption, AdminProductsDeleteOptionRes, GetPublishableApiKeysParams, AdminPublishableApiKeysRes, AdminPublishableApiKeysListRes, GetPublishableApiKeySalesChannelsParams, AdminPublishableApiKeysListSalesChannelsRes, AdminPostPublishableApiKeysReq, AdminPostPublishableApiKeysPublishableApiKeyReq, AdminPublishableApiKeyDeleteRes, AdminPostPublishableApiKeySalesChannelsBatchReq, AdminGetRegionsParams, AdminRegionsListRes, AdminRegionsRes, AdminGetRegionsRegionFulfillmentOptionsRes, AdminPostRegionsReq, AdminPostRegionsRegionReq, AdminRegionsDeleteRes, AdminPostRegionsRegionCountriesReq, AdminPostRegionsRegionFulfillmentProvidersReq, AdminPostRegionsRegionPaymentProvidersReq, AdminReservationsRes, AdminPostReservationsReq, AdminPostReservationsReservationReq, AdminReservationsDeleteRes, AdminGetReservationsParams, AdminReservationsListRes, AdminReturnReasonsListRes, AdminReturnReasonsRes, AdminPostReturnReasonsReq, AdminPostReturnReasonsReasonReq, AdminReturnsListRes, AdminReturnsRes, AdminPostReturnsReturnReceiveReq, AdminReturnsCancelRes, AdminSalesChannelsRes, AdminGetSalesChannelsParams, AdminSalesChannelsListRes, AdminPostSalesChannelsReq, AdminPostSalesChannelsSalesChannelReq, AdminSalesChannelsDeleteRes, AdminDeleteSalesChannelsChannelProductsBatchReq, AdminPostSalesChannelsChannelProductsBatchReq, AdminGetShippingOptionsParams, AdminShippingOptionsListRes, AdminShippingOptionsRes, AdminPostShippingOptionsReq, AdminPostShippingOptionsOptionReq, AdminShippingProfilesListRes, AdminShippingProfilesRes, AdminPostShippingProfilesReq, AdminDeleteShippingProfileRes, AdminStockLocationsListRes, AdminStockLocationsRes, AdminPostStockLocationsReq, AdminStockLocationsDeleteRes, AdminPaymentProvidersList, AdminTaxProvidersList, AdminExtendedStoresRes, AdminStoresRes, AdminPostStoreReq, AdminGetSwapsParams, AdminSwapsListRes, AdminSwapsRes, AdminPostOrdersOrderSwapsReq, AdminPostOrdersOrderSwapsSwapFulfillmentsReq, AdminPostOrdersOrderSwapsSwapShipmentsReq, AdminGetTaxRatesParams, AdminTaxRatesListRes, AdminTaxRatesRes, AdminPostTaxRatesReq, AdminPostTaxRatesTaxRateReq, AdminTaxRatesDeleteRes, AdminPostTaxRatesTaxRateProductsReq, AdminDeleteTaxRatesTaxRateProductsReq, AdminPostTaxRatesTaxRateProductTypesReq, AdminDeleteTaxRatesTaxRateProductTypesReq, AdminPostTaxRatesTaxRateShippingOptionsReq, AdminDeleteTaxRatesTaxRateShippingOptionsReq, AdminUploadsRes, AdminUploadsDownloadUrlRes, AdminPostUploadsDownloadUrlReq, AdminDeleteUploadsRes, AdminDeleteUploadsReq, AdminUsersListRes, AdminUserRes, AdminDeleteUserRes, AdminResetPasswordRequest, AdminResetPasswordTokenRequest, AdminGetVariantsParams, AdminVariantsListRes, AdminGetVariantParams, AdminVariantsRes, AdminGetVariantsVariantInventoryRes } from '@medusajs/medusa';
import * as _medusajs_medusa_dist_types_pricing from '@medusajs/medusa/dist/types/pricing';
import * as _medusajs_types from '@medusajs/types';
import { FindParams } from '@medusajs/medusa/dist/types/common';
import * as _medusajs_medusa_dist_types_store from '@medusajs/medusa/dist/types/store';

interface MedusaContextState {
    client: _medusajs_medusa_js__default;
}
declare const useMedusa: () => MedusaContextState;
interface MedusaProviderProps {
    baseUrl: string;
    queryClientProviderProps: QueryClientProviderProps;
    children: React.ReactNode;
    /**
     * Authentication token
     */
    apiKey?: string;
    /**
     * PublishableApiKey identifier that defines the scope of resources
     * available within the request
     */
    publishableApiKey?: string;
    customHeaders?: Record<string, any>;
}
declare const MedusaProvider: ({ queryClientProviderProps, baseUrl, apiKey, publishableApiKey, customHeaders, children, }: MedusaProviderProps) => React.JSX.Element;

type UseQueryOptionsWrapper<TQueryFn = unknown, E = Error, TQueryKey extends QueryKey = QueryKey> = Omit<UseQueryOptions<TQueryFn, E, TQueryFn, TQueryKey>, "queryKey" | "queryFn" | "select" | "refetchInterval">;
type RegionInfo = Pick<Region, "currency_code" | "tax_code" | "tax_rate">;
type ProductVariant = ConvertDateToString<Omit<ProductVariant$1, "beforeInsert">>;
type ProductVariantInfo = Pick<ProductVariant, "prices">;
type ConvertDateToString<T extends {}> = {
    [P in keyof T]: T[P] extends Date ? Date | string : T[P];
};
type Cart = StoreCartsRes["cart"];
type TQueryKey<TKey, TListQuery = any, TDetailQuery = string> = {
    all: [TKey];
    lists: () => [...TQueryKey<TKey>["all"], "list"];
    list: (query?: TListQuery) => [
        ...ReturnType<TQueryKey<TKey>["lists"]>,
        {
            query: TListQuery | undefined;
        }
    ];
    details: () => [...TQueryKey<TKey>["all"], "detail"];
    detail: (id: TDetailQuery) => [...ReturnType<TQueryKey<TKey>["details"]>, TDetailQuery];
};

interface Item {
    variant: ProductVariant;
    quantity: number;
    readonly total?: number;
}
interface SessionCartState {
    region: RegionInfo;
    items: Item[];
    totalItems: number;
    total: number;
}
interface SessionCartContextState extends SessionCartState {
    setRegion: (region: RegionInfo) => void;
    addItem: (item: Item) => void;
    removeItem: (id: string) => void;
    updateItem: (id: string, item: Partial<Item>) => void;
    setItems: (items: Item[]) => void;
    updateItemQuantity: (id: string, quantity: number) => void;
    incrementItemQuantity: (id: string) => void;
    decrementItemQuantity: (id: string) => void;
    getItem: (id: string) => Item | undefined;
    clearItems: () => void;
}
declare const generateCartState: (state: SessionCartState, items: Item[]) => {
    items: {
        total: number;
        variant: ProductVariant;
        quantity: number;
    }[];
    totalItems: number;
    total: number;
    region: RegionInfo;
};
interface SessionCartProviderProps {
    children: React.ReactNode;
    initialState?: SessionCartState;
}
declare const SessionCartProvider: ({ initialState, children, }: SessionCartProviderProps) => React.JSX.Element;
declare const useSessionCart: () => SessionCartContextState;

declare const cartKeys: TQueryKey<"carts", any, string>;
type CartQueryKey = typeof cartKeys;
declare const useGetCart: (id: string, options?: UseQueryOptionsWrapper<Response<StoreCartsRes>, Error, ReturnType<CartQueryKey["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreCartsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly cart?: Omit<_medusajs_medusa.Cart, "refundable_amount" | "refunded_total"> | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreCartsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly cart?: Omit<_medusajs_medusa.Cart, "refundable_amount" | "refunded_total"> | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreCartsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly cart?: Omit<_medusajs_medusa.Cart, "refundable_amount" | "refunded_total"> | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreCartsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly cart?: Omit<_medusajs_medusa.Cart, "refundable_amount" | "refunded_total"> | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useCreateCart: (options?: UseMutationOptions<StoreCartsRes, Error, StorePostCartReq | undefined>) => _tanstack_react_query.UseMutationResult<_medusajs_medusa_js.Response<StoreCartsRes>, Error, StorePostCartReq | undefined, unknown>;
declare const useUpdateCart: (cartId: string, options?: UseMutationOptions<StoreCartsRes, Error, StorePostCartsCartReq>) => _tanstack_react_query.UseMutationResult<_medusajs_medusa_js.Response<StoreCartsRes>, Error, StorePostCartsCartReq, unknown>;
declare const useCompleteCart: (cartId: string, options?: UseMutationOptions<StoreCompleteCartRes, Error>) => _tanstack_react_query.UseMutationResult<_medusajs_medusa_js.Response<StoreCompleteCartRes>, Error, void, unknown>;
declare const useCreatePaymentSession: (cartId: string, options?: UseMutationOptions<StoreCartsRes, Error>) => _tanstack_react_query.UseMutationResult<_medusajs_medusa_js.Response<StoreCartsRes>, Error, void, unknown>;
declare const useUpdatePaymentSession: (cartId: string, options?: UseMutationOptions<StoreCartsRes, Error, {
    provider_id: string;
} & StorePostCartsCartPaymentSessionUpdateReq>) => _tanstack_react_query.UseMutationResult<_medusajs_medusa_js.Response<StoreCartsRes>, Error, {
    provider_id: string;
} & StorePostCartsCartPaymentSessionUpdateReq, unknown>;
type RefreshPaymentSessionMutationData = {
    provider_id: string;
};
declare const useRefreshPaymentSession: (cartId: string, options?: UseMutationOptions<StoreCartsRes, Error, RefreshPaymentSessionMutationData>) => _tanstack_react_query.UseMutationResult<_medusajs_medusa_js.Response<StoreCartsRes>, Error, RefreshPaymentSessionMutationData, unknown>;
type SetPaymentSessionMutationData = {
    provider_id: string;
};
declare const useSetPaymentSession: (cartId: string, options?: UseMutationOptions<StoreCartsRes, Error, SetPaymentSessionMutationData>) => _tanstack_react_query.UseMutationResult<_medusajs_medusa_js.Response<StoreCartsRes>, Error, SetPaymentSessionMutationData, unknown>;
declare const useAddShippingMethodToCart: (cartId: string, options?: UseMutationOptions<StoreCartsRes, Error, StorePostCartsCartShippingMethodReq>) => _tanstack_react_query.UseMutationResult<_medusajs_medusa_js.Response<StoreCartsRes>, Error, StorePostCartsCartShippingMethodReq, unknown>;
type DeletePaymentSessionMutationData = {
    provider_id: string;
};
declare const useDeletePaymentSession: (cartId: string, options?: UseMutationOptions<StoreCartsRes, Error, DeletePaymentSessionMutationData>) => _tanstack_react_query.UseMutationResult<_medusajs_medusa_js.Response<StoreCartsRes>, Error, DeletePaymentSessionMutationData, unknown>;
declare const useStartCheckout: (options?: UseMutationOptions<StoreCartsRes["cart"], Error, StorePostCartReq>) => _tanstack_react_query.UseMutationResult<Omit<_medusajs_medusa.Cart, "refundable_amount" | "refunded_total">, Error, StorePostCartReq, unknown>;

declare const collectionKeys: TQueryKey<"collections", any, string>;
type CollectionQueryKey = typeof collectionKeys;
declare const useCollection: (id: string, options?: UseQueryOptionsWrapper<Response<StoreCollectionsRes>, Error, ReturnType<CollectionQueryKey["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreCollectionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly collection?: _medusajs_medusa.ProductCollection | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreCollectionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly collection?: _medusajs_medusa.ProductCollection | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreCollectionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly collection?: _medusajs_medusa.ProductCollection | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreCollectionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly collection?: _medusajs_medusa.ProductCollection | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useCollections: (query?: StoreGetCollectionsParams, options?: UseQueryOptionsWrapper<Response<StoreCollectionsListRes>, Error, ReturnType<CollectionQueryKey["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreCollectionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly collections?: _medusajs_medusa.ProductCollection[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreCollectionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly collections?: _medusajs_medusa.ProductCollection[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreCollectionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly collections?: _medusajs_medusa.ProductCollection[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreCollectionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly collections?: _medusajs_medusa.ProductCollection[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const customerKeys: {
    orders: (id: string) => readonly ["customers", "detail", string, "orders"];
    all: ["customers"];
    lists: () => ["customers", "list"];
    list: (query?: any) => ["customers", "list", {
        query: any;
    }];
    details: () => ["customers", "detail"];
    detail: (id: string) => ["customers", "detail", string];
};
type CustomerQueryKey = typeof customerKeys;
declare const useMeCustomer: (options?: UseQueryOptionsWrapper<Response<StoreCustomersRes>, Error, ReturnType<CustomerQueryKey["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreCustomersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly customer?: Omit<_medusajs_medusa.Customer, "password_hash"> | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreCustomersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly customer?: Omit<_medusajs_medusa.Customer, "password_hash"> | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreCustomersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly customer?: Omit<_medusajs_medusa.Customer, "password_hash"> | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreCustomersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly customer?: Omit<_medusajs_medusa.Customer, "password_hash"> | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useCustomerOrders: (query?: StoreGetCustomersCustomerOrdersParams, options?: UseQueryOptionsWrapper<Response<StoreCustomersListOrdersRes>, Error, ReturnType<CustomerQueryKey["orders"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreCustomersListOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly orders?: _medusajs_medusa.Order[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreCustomersListOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly orders?: _medusajs_medusa.Order[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreCustomersListOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly orders?: _medusajs_medusa.Order[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreCustomersListOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly orders?: _medusajs_medusa.Order[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useCreateCustomer: (options?: UseMutationOptions<StoreCustomersRes, Error, StorePostCustomersReq>) => _tanstack_react_query.UseMutationResult<_medusajs_medusa_js.Response<StoreCustomersRes>, Error, StorePostCustomersReq, unknown>;
declare const useUpdateMe: (options?: UseMutationOptions<StoreCustomersRes, Error, {
    id: string;
} & StorePostCustomersCustomerReq>) => _tanstack_react_query.UseMutationResult<_medusajs_medusa_js.Response<StoreCustomersRes>, Error, {
    id: string;
} & StorePostCustomersCustomerReq, unknown>;

declare const giftCardKeys: TQueryKey<"gift_cards", any, string>;
type GiftCardQueryKey = typeof giftCardKeys;
declare const useGiftCard: (id: string, options?: UseQueryOptionsWrapper<Response<StoreGiftCardsRes>, Error, ReturnType<GiftCardQueryKey["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreGiftCardsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly gift_card?: _medusajs_medusa.GiftCard | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreGiftCardsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly gift_card?: _medusajs_medusa.GiftCard | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreGiftCardsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly gift_card?: _medusajs_medusa.GiftCard | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreGiftCardsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly gift_card?: _medusajs_medusa.GiftCard | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useCreateLineItem: (cartId: string, options?: UseMutationOptions<StoreCartsRes, Error, StorePostCartsCartLineItemsReq>) => _tanstack_react_query.UseMutationResult<_medusajs_medusa_js.Response<StoreCartsRes>, Error, StorePostCartsCartLineItemsReq, unknown>;
declare const useUpdateLineItem: (cartId: string, options?: UseMutationOptions<StoreCartsRes, Error, StorePostCartsCartLineItemsItemReq & {
    lineId: string;
}>) => _tanstack_react_query.UseMutationResult<_medusajs_medusa_js.Response<StoreCartsRes>, Error, StorePostCartsCartLineItemsItemReq & {
    lineId: string;
}, unknown>;
declare const useDeleteLineItem: (cartId: string, options?: UseMutationOptions<StoreCartsRes, Error, {
    lineId: string;
}>) => _tanstack_react_query.UseMutationResult<_medusajs_medusa_js.Response<StoreCartsRes>, Error, {
    lineId: string;
}, unknown>;

declare const orderEditQueryKeys: TQueryKey<"orderEdit", any, string>;
type OrderQueryKey$1 = typeof orderEditQueryKeys;
declare const useOrderEdit: (id: string, options?: UseQueryOptionsWrapper<Response<StoreOrderEditsRes>, Error, ReturnType<OrderQueryKey$1["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreOrderEditsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order_edit?: Omit<_medusajs_medusa.OrderEdit, "internal_note" | "created_by" | "confirmed_by" | "canceled_by"> | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreOrderEditsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order_edit?: Omit<_medusajs_medusa.OrderEdit, "internal_note" | "created_by" | "confirmed_by" | "canceled_by"> | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreOrderEditsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order_edit?: Omit<_medusajs_medusa.OrderEdit, "internal_note" | "created_by" | "confirmed_by" | "canceled_by"> | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreOrderEditsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order_edit?: Omit<_medusajs_medusa.OrderEdit, "internal_note" | "created_by" | "confirmed_by" | "canceled_by"> | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useDeclineOrderEdit: (id: string, options?: UseMutationOptions<Response<StoreOrderEditsRes>, Error, StorePostOrderEditsOrderEditDecline>) => _tanstack_react_query.UseMutationResult<Response<StoreOrderEditsRes>, Error, StorePostOrderEditsOrderEditDecline, unknown>;
declare const useCompleteOrderEdit: (id: string, options?: UseMutationOptions<Response<StoreOrderEditsRes>, Error>) => _tanstack_react_query.UseMutationResult<Response<StoreOrderEditsRes>, Error, void, unknown>;

declare const orderKeys: {
    cart: (cartId: string) => readonly ["orders", "detail", "cart", string];
    all: ["orders"];
    lists: () => ["orders", "list"];
    list: (query?: StoreGetOrdersParams | undefined) => ["orders", "list", {
        query: StoreGetOrdersParams | undefined;
    }];
    details: () => ["orders", "detail"];
    detail: (id: string) => ["orders", "detail", string];
};
type OrderQueryKey = typeof orderKeys;
declare const useOrder: (id: string, options?: UseQueryOptionsWrapper<Response<StoreOrdersRes>, Error, ReturnType<OrderQueryKey["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order?: _medusajs_medusa.Order | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order?: _medusajs_medusa.Order | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order?: _medusajs_medusa.Order | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order?: _medusajs_medusa.Order | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useCartOrder: (cartId: string, options?: UseQueryOptionsWrapper<Response<StoreOrdersRes>, Error, ReturnType<OrderQueryKey["cart"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order?: _medusajs_medusa.Order | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order?: _medusajs_medusa.Order | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order?: _medusajs_medusa.Order | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order?: _medusajs_medusa.Order | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useOrders: (query: StoreGetOrdersParams, options?: UseQueryOptionsWrapper<Response<StoreOrdersRes>, Error, ReturnType<OrderQueryKey["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order?: _medusajs_medusa.Order | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order?: _medusajs_medusa.Order | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order?: _medusajs_medusa.Order | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order?: _medusajs_medusa.Order | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useRequestOrderAccess: (options?: UseMutationOptions<Response<{}>, Error, StorePostCustomersCustomerOrderClaimReq>) => _tanstack_react_query.UseMutationResult<{
    response: _medusajs_medusa_js.HTTPResponse;
}, Error, StorePostCustomersCustomerOrderClaimReq, unknown>;
declare const useGrantOrderAccess: (options?: UseMutationOptions<Response<{}>, Error, StorePostCustomersCustomerAcceptClaimReq>) => _tanstack_react_query.UseMutationResult<{
    response: _medusajs_medusa_js.HTTPResponse;
}, Error, StorePostCustomersCustomerAcceptClaimReq, unknown>;

declare const paymentCollectionQueryKeys: TQueryKey<"paymentCollection", any, string>;
type PaymentCollectionKey = typeof paymentCollectionQueryKeys;
declare const usePaymentCollection: (id: string, options?: UseQueryOptionsWrapper<Response<StorePaymentCollectionsRes>, Error, ReturnType<PaymentCollectionKey["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StorePaymentCollectionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly payment_collection?: _medusajs_medusa.PaymentCollection | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StorePaymentCollectionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly payment_collection?: _medusajs_medusa.PaymentCollection | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StorePaymentCollectionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly payment_collection?: _medusajs_medusa.PaymentCollection | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StorePaymentCollectionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly payment_collection?: _medusajs_medusa.PaymentCollection | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useManageMultiplePaymentSessions: (id: string, options?: UseMutationOptions<Response<StorePaymentCollectionsRes>, Error, StorePostPaymentCollectionsBatchSessionsReq>) => _tanstack_react_query.UseMutationResult<Response<StorePaymentCollectionsRes>, Error, StorePostPaymentCollectionsBatchSessionsReq, unknown>;
declare const useManagePaymentSession: (id: string, options?: UseMutationOptions<Response<StorePaymentCollectionsRes>, Error, StorePaymentCollectionSessionsReq>) => _tanstack_react_query.UseMutationResult<Response<StorePaymentCollectionsRes>, Error, StorePaymentCollectionSessionsReq, unknown>;
declare const useAuthorizePaymentSession: (id: string, options?: UseMutationOptions<Response<StorePaymentCollectionsRes>, Error, string>) => _tanstack_react_query.UseMutationResult<Response<StorePaymentCollectionsRes>, Error, string, unknown>;
declare const useAuthorizePaymentSessionsBatch: (id: string, options?: UseMutationOptions<Response<StorePaymentCollectionsRes>, Error, StorePostPaymentCollectionsBatchSessionsAuthorizeReq>) => _tanstack_react_query.UseMutationResult<Response<StorePaymentCollectionsRes>, Error, StorePostPaymentCollectionsBatchSessionsAuthorizeReq, unknown>;
declare const usePaymentCollectionRefreshPaymentSession: (id: string, options?: UseMutationOptions<Response<StorePaymentCollectionsSessionRes>, Error, string>) => _tanstack_react_query.UseMutationResult<Response<StorePaymentCollectionsSessionRes>, Error, string, unknown>;

declare const storeProductCategoryKeys: TQueryKey<"product_categories", any, string>;
type ProductCategoryQueryKeys$1 = typeof storeProductCategoryKeys;
declare const useProductCategories: (query?: StoreGetProductCategoriesParams, options?: UseQueryOptionsWrapper<Response<StoreGetProductCategoriesRes>, Error, ReturnType<ProductCategoryQueryKeys$1["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreGetProductCategoriesRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_categories?: _medusajs_medusa.ProductCategory[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreGetProductCategoriesRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_categories?: _medusajs_medusa.ProductCategory[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreGetProductCategoriesRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_categories?: _medusajs_medusa.ProductCategory[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreGetProductCategoriesRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_categories?: _medusajs_medusa.ProductCategory[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useProductCategory: (id: string, query?: StoreGetProductCategoriesCategoryParams, options?: UseQueryOptionsWrapper<Response<StoreGetProductCategoriesCategoryRes>, Error, ReturnType<ProductCategoryQueryKeys$1["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreGetProductCategoriesCategoryRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly product_category?: _medusajs_medusa.ProductCategory | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreGetProductCategoriesCategoryRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly product_category?: _medusajs_medusa.ProductCategory | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreGetProductCategoriesCategoryRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly product_category?: _medusajs_medusa.ProductCategory | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreGetProductCategoriesCategoryRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly product_category?: _medusajs_medusa.ProductCategory | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const productTagKeys: TQueryKey<"product_tags", any, string>;
type ProductTypesQueryKeys$2 = typeof productTagKeys;
declare const useProductTags: (query?: StoreGetProductTagsParams, options?: UseQueryOptionsWrapper<Response<StoreProductTagsListRes>, Error, ReturnType<ProductTypesQueryKeys$2["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreProductTagsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_tags?: _medusajs_medusa.ProductTag[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreProductTagsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_tags?: _medusajs_medusa.ProductTag[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreProductTagsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_tags?: _medusajs_medusa.ProductTag[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreProductTagsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_tags?: _medusajs_medusa.ProductTag[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const productTypeKeys: TQueryKey<"product_types", any, string>;
type ProductTypesQueryKeys$1 = typeof productTypeKeys;
declare const useProductTypes: (query?: StoreGetProductTypesParams, options?: UseQueryOptionsWrapper<Response<StoreProductTypesListRes>, Error, ReturnType<ProductTypesQueryKeys$1["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreProductTypesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_types?: _medusajs_medusa.ProductType[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreProductTypesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_types?: _medusajs_medusa.ProductType[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreProductTypesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_types?: _medusajs_medusa.ProductType[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreProductTypesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_types?: _medusajs_medusa.ProductType[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const productKeys: TQueryKey<"products", StoreGetProductsParams, string>;
type ProductQueryKey = typeof productKeys;
declare const useProducts: (query?: StoreGetProductsParams, options?: UseQueryOptionsWrapper<Response<StoreProductsListRes>, Error, ReturnType<ProductQueryKey["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreProductsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly products?: _medusajs_medusa_dist_types_pricing.PricedProduct[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreProductsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly products?: _medusajs_medusa_dist_types_pricing.PricedProduct[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreProductsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly products?: _medusajs_medusa_dist_types_pricing.PricedProduct[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreProductsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly products?: _medusajs_medusa_dist_types_pricing.PricedProduct[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useProduct: (id: string, options?: UseQueryOptionsWrapper<Response<StoreProductsRes>, Error, ReturnType<ProductQueryKey["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreProductsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly product?: _medusajs_medusa_dist_types_pricing.PricedProduct | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreProductsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly product?: _medusajs_medusa_dist_types_pricing.PricedProduct | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreProductsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly product?: _medusajs_medusa_dist_types_pricing.PricedProduct | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreProductsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly product?: _medusajs_medusa_dist_types_pricing.PricedProduct | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const regionsKey: TQueryKey<"regions", any, string>;
type RegionQueryType = typeof regionsKey;
declare const useRegions: (options?: UseQueryOptionsWrapper<Response<StoreRegionsListRes>, Error, ReturnType<RegionQueryType["lists"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreRegionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly regions?: _medusajs_medusa.Region[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreRegionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly regions?: _medusajs_medusa.Region[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreRegionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly regions?: _medusajs_medusa.Region[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreRegionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly regions?: _medusajs_medusa.Region[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useRegion: (id: string, options?: UseQueryOptionsWrapper<Response<StoreRegionsRes>, Error, ReturnType<RegionQueryType["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreRegionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly region?: _medusajs_medusa.Region | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreRegionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly region?: _medusajs_medusa.Region | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreRegionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly region?: _medusajs_medusa.Region | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreRegionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly region?: _medusajs_medusa.Region | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const returnReasonsKey: TQueryKey<"return_reasons", any, string>;
type ReturnReasonsQueryKey = typeof returnReasonsKey;
declare const useReturnReasons: (options?: UseQueryOptionsWrapper<Response<StoreReturnReasonsListRes>, Error, ReturnType<ReturnReasonsQueryKey["lists"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreReturnReasonsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly return_reasons?: _medusajs_medusa.ReturnReason[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreReturnReasonsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly return_reasons?: _medusajs_medusa.ReturnReason[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreReturnReasonsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly return_reasons?: _medusajs_medusa.ReturnReason[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreReturnReasonsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly return_reasons?: _medusajs_medusa.ReturnReason[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useReturnReason: (id: string, options?: UseQueryOptionsWrapper<Response<StoreReturnReasonsRes>, Error, ReturnType<ReturnReasonsQueryKey["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreReturnReasonsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly return_reason?: _medusajs_medusa.ReturnReason | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreReturnReasonsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly return_reason?: _medusajs_medusa.ReturnReason | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreReturnReasonsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly return_reason?: _medusajs_medusa.ReturnReason | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreReturnReasonsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly return_reason?: _medusajs_medusa.ReturnReason | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useCreateReturn: (options?: UseMutationOptions<StoreReturnsRes, Error, StorePostReturnsReq>) => _tanstack_react_query.UseMutationResult<_medusajs_medusa_js.Response<StoreReturnsRes>, Error, StorePostReturnsReq, unknown>;

declare const shippingOptionKey: {
    cart: (cartId: string) => readonly ["shipping_options", "cart", string];
    all: ["shipping_options"];
    lists: () => ["shipping_options", "list"];
    list: (query?: any) => ["shipping_options", "list", {
        query: any;
    }];
    details: () => ["shipping_options", "detail"];
    detail: (id: string) => ["shipping_options", "detail", string];
};
type ShippingOptionQueryKey = typeof shippingOptionKey;
declare const useShippingOptions: (query?: StoreGetShippingOptionsParams, options?: UseQueryOptionsWrapper<Response<StoreShippingOptionsListRes>, Error, ReturnType<ShippingOptionQueryKey["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreShippingOptionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly shipping_options?: _medusajs_medusa_dist_types_pricing.PricedShippingOption[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreShippingOptionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly shipping_options?: _medusajs_medusa_dist_types_pricing.PricedShippingOption[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreShippingOptionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly shipping_options?: _medusajs_medusa_dist_types_pricing.PricedShippingOption[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreShippingOptionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly shipping_options?: _medusajs_medusa_dist_types_pricing.PricedShippingOption[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useCartShippingOptions: (cartId: string, options?: UseQueryOptionsWrapper<Response<StoreShippingOptionsListRes>, Error, ReturnType<ShippingOptionQueryKey["cart"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreShippingOptionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly shipping_options?: _medusajs_medusa_dist_types_pricing.PricedShippingOption[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreShippingOptionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly shipping_options?: _medusajs_medusa_dist_types_pricing.PricedShippingOption[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreShippingOptionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly shipping_options?: _medusajs_medusa_dist_types_pricing.PricedShippingOption[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreShippingOptionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly shipping_options?: _medusajs_medusa_dist_types_pricing.PricedShippingOption[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const swapKey: {
    cart: (cartId: string) => readonly ["swaps", "cart", string];
    all: ["swaps"];
    lists: () => ["swaps", "list"];
    list: (query?: any) => ["swaps", "list", {
        query: any;
    }];
    details: () => ["swaps", "detail"];
    detail: (id: string) => ["swaps", "detail", string];
};
type SwapQueryKey = typeof swapKey;
declare const useCartSwap: (cartId: string, options?: UseQueryOptionsWrapper<Response<StoreSwapsRes>, Error, ReturnType<SwapQueryKey["cart"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreSwapsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly swap?: _medusajs_medusa.Swap | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreSwapsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly swap?: _medusajs_medusa.Swap | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreSwapsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly swap?: _medusajs_medusa.Swap | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<StoreSwapsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly swap?: _medusajs_medusa.Swap | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useCreateSwap: (options?: UseMutationOptions<StoreSwapsRes, Error, StorePostSwapsReq>) => _tanstack_react_query.UseMutationResult<_medusajs_medusa_js.Response<StoreSwapsRes>, Error, StorePostSwapsReq, unknown>;

interface CartState {
    cart?: Cart;
}
interface CartContext extends CartState {
    setCart: (cart: Cart) => void;
    pay: ReturnType<typeof useSetPaymentSession>;
    createCart: ReturnType<typeof useCreateCart>;
    startCheckout: ReturnType<typeof useCreatePaymentSession>;
    completeCheckout: ReturnType<typeof useCompleteCart>;
    updateCart: ReturnType<typeof useUpdateCart>;
    addShippingMethod: ReturnType<typeof useAddShippingMethodToCart>;
    totalItems: number;
}
declare const CartContext: React.Context<CartContext | null>;
declare const useCart: () => CartContext;
interface CartProps {
    children: React.ReactNode;
    initialState?: Cart;
}
declare const CartProvider: ({ children, initialState, }: CartProps) => React.JSX.Element;

declare const adminAuthKeys: TQueryKey<"admin_auth", any, string>;
type AuthQueryKey = typeof adminAuthKeys;
declare const useAdminGetSession: (options?: UseQueryOptionsWrapper<Response<AdminAuthRes>, Error, ReturnType<AuthQueryKey["details"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminAuthRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly user?: Omit<_medusajs_medusa.User, "password_hash"> | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminAuthRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly user?: Omit<_medusajs_medusa.User, "password_hash"> | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminAuthRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly user?: Omit<_medusajs_medusa.User, "password_hash"> | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminAuthRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly user?: Omit<_medusajs_medusa.User, "password_hash"> | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminLogin: (options?: UseMutationOptions<Response<AdminAuthRes>, Error, AdminPostAuthReq>) => _tanstack_react_query.UseMutationResult<Response<AdminAuthRes>, Error, AdminPostAuthReq, unknown>;
declare const useAdminDeleteSession: (options?: UseMutationOptions<Response<void>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<void>, Error, void, unknown>;

declare const adminBatchJobsKeys: TQueryKey<"admin_batches", any, string>;
type BatchJobsQueryKey = typeof adminBatchJobsKeys;
declare const useAdminBatchJobs: (query?: AdminGetBatchParams, options?: UseQueryOptionsWrapper<Response<AdminBatchJobListRes>, Error, ReturnType<BatchJobsQueryKey["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminBatchJobListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly batch_jobs?: _medusajs_medusa.BatchJob[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminBatchJobListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly batch_jobs?: _medusajs_medusa.BatchJob[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminBatchJobListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly batch_jobs?: _medusajs_medusa.BatchJob[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminBatchJobListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly batch_jobs?: _medusajs_medusa.BatchJob[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminBatchJob: (id: string, options?: UseQueryOptionsWrapper<Response<AdminBatchJobRes>, Error, ReturnType<BatchJobsQueryKey["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminBatchJobRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly batch_job?: _medusajs_medusa.BatchJob | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminBatchJobRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly batch_job?: _medusajs_medusa.BatchJob | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminBatchJobRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly batch_job?: _medusajs_medusa.BatchJob | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminBatchJobRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly batch_job?: _medusajs_medusa.BatchJob | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

/**
 * Hook returns functions for creating batch jobs.
 *
 * @param options
 */
declare const useAdminCreateBatchJob: (options?: UseMutationOptions<Response<AdminBatchJobRes>, Error, AdminPostBatchesReq>) => _tanstack_react_query.UseMutationResult<Response<AdminBatchJobRes>, Error, AdminPostBatchesReq, unknown>;
/**
 * Hook return functions for canceling a batch job
 *
 * @param id - id of the batch job
 * @param options
 */
declare const useAdminCancelBatchJob: (id: string, options?: UseMutationOptions<Response<AdminBatchJobRes>, Error>) => _tanstack_react_query.UseMutationResult<Response<AdminBatchJobRes>, Error, void, unknown>;
/**
 * Hook return functions for confirming a batch job
 *
 * @param id - id of the batch job
 * @param options
 */
declare const useAdminConfirmBatchJob: (id: string, options?: UseMutationOptions<Response<AdminBatchJobRes>, Error>) => _tanstack_react_query.UseMutationResult<Response<AdminBatchJobRes>, Error, void, unknown>;

declare const useAdminCreateClaim: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderClaimsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderClaimsReq, unknown>;
declare const useAdminUpdateClaim: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderClaimsClaimReq & {
    claim_id: string;
}>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderClaimsClaimReq & {
    claim_id: string;
}, unknown>;
declare const useAdminCancelClaim: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, string, unknown>;
declare const useAdminFulfillClaim: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderClaimsClaimFulfillmentsReq & {
    claim_id: string;
}>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderClaimsClaimFulfillmentsReq & {
    claim_id: string;
}, unknown>;
declare const useAdminCancelClaimFulfillment: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, {
    claim_id: string;
    fulfillment_id: string;
}>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, {
    claim_id: string;
    fulfillment_id: string;
}, unknown>;
declare const useAdminCreateClaimShipment: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderClaimsClaimShipmentsReq & {
    claim_id: string;
}>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderClaimsClaimShipmentsReq & {
    claim_id: string;
}, unknown>;

declare const adminCollectionKeys: TQueryKey<"admin_collections", any, string>;
type CollectionsQueryKey = typeof adminCollectionKeys;
declare const useAdminCollections: (query?: AdminGetCollectionsParams, options?: UseQueryOptionsWrapper<Response<AdminCollectionsListRes>, Error, ReturnType<CollectionsQueryKey["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCollectionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly collections?: _medusajs_medusa.ProductCollection[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCollectionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly collections?: _medusajs_medusa.ProductCollection[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCollectionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly collections?: _medusajs_medusa.ProductCollection[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCollectionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly collections?: _medusajs_medusa.ProductCollection[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminCollection: (id: string, options?: UseQueryOptionsWrapper<Response<AdminCollectionsRes>, Error, ReturnType<CollectionsQueryKey["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCollectionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly collection?: _medusajs_medusa.ProductCollection | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCollectionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly collection?: _medusajs_medusa.ProductCollection | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCollectionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly collection?: _medusajs_medusa.ProductCollection | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCollectionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly collection?: _medusajs_medusa.ProductCollection | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminCreateCollection: (options?: UseMutationOptions<Response<AdminCollectionsRes>, Error, AdminPostCollectionsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminCollectionsRes>, Error, AdminPostCollectionsReq, unknown>;
declare const useAdminUpdateCollection: (id: string, options?: UseMutationOptions<Response<AdminCollectionsRes>, Error, AdminPostCollectionsCollectionReq>) => _tanstack_react_query.UseMutationResult<Response<AdminCollectionsRes>, Error, AdminPostCollectionsCollectionReq, unknown>;
declare const useAdminDeleteCollection: (id: string, options?: UseMutationOptions<Response<AdminCollectionsDeleteRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<_medusajs_medusa.DeleteResponse>, Error, void, unknown>;
/**
 * Hook returns function for adding multiple products to a collection.
 *
 * @param id - id of the collection in which products are being added
 * @param options
 */
declare const useAdminAddProductsToCollection: (id: string, options?: UseMutationOptions<Response<AdminCollectionsRes>, Error, AdminPostProductsToCollectionReq>) => _tanstack_react_query.UseMutationResult<Response<AdminCollectionsRes>, Error, AdminPostProductsToCollectionReq, unknown>;
/**
 * Hook returns function for removal of multiple products from a collection.
 *
 * @param id - id of the collection from which products will be removed
 * @param options
 */
declare const useAdminRemoveProductsFromCollection: (id: string, options?: UseMutationOptions<Response<AdminDeleteProductsFromCollectionRes>, Error, AdminDeleteProductsFromCollectionReq>) => _tanstack_react_query.UseMutationResult<Response<AdminDeleteProductsFromCollectionRes>, Error, AdminDeleteProductsFromCollectionReq, unknown>;

declare const useAdminUpdateCurrency: (code: string, options?: UseMutationOptions<Response<AdminCurrenciesRes>, Error, AdminPostCurrenciesCurrencyReq>) => _tanstack_react_query.UseMutationResult<Response<AdminCurrenciesRes>, Error, AdminPostCurrenciesCurrencyReq, unknown>;

declare const adminCurrenciesKeys: TQueryKey<"admin_currencies", any, string>;
type CurrenciesQueryKey = typeof adminCurrenciesKeys;
declare const useAdminCurrencies: (query?: AdminGetCurrenciesParams, options?: UseQueryOptionsWrapper<Response<AdminCurrenciesListRes>, Error, ReturnType<CurrenciesQueryKey["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCurrenciesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly currencies?: _medusajs_medusa.Currency[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCurrenciesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly currencies?: _medusajs_medusa.Currency[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCurrenciesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly currencies?: _medusajs_medusa.Currency[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCurrenciesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly currencies?: _medusajs_medusa.Currency[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

type RelatedDomain = "product" | "customer" | "customer_group" | "order" | "discount" | "gift_card" | "price_list";
type RelatedDomains = {
    [key in RelatedDomain]?: boolean;
};
declare const useAdminCustomPost: <TPayload extends Record<string, any>, TResponse>(path: string, queryKey: QueryKey, relatedDomains?: RelatedDomains, options?: UseMutationOptions<Response<TResponse>, Error, TPayload, unknown> | undefined) => _tanstack_react_query.UseMutationResult<Response<TResponse>, Error, TPayload, unknown>;
declare const useAdminCustomDelete: <TResponse>(path: string, queryKey: QueryKey, relatedDomains?: RelatedDomains, options?: UseMutationOptions<Response<TResponse>, Error, void, unknown> | undefined) => _tanstack_react_query.UseMutationResult<Response<TResponse>, Error, void, unknown>;

declare const useAdminCustomQuery: <TQuery extends Record<string, any>, TResponse = any>(path: string, queryKey: QueryKey, query?: TQuery | undefined, options?: UseQueryOptionsWrapper<Response<TResponse>, Error, (string | QueryKey | TQuery | undefined)[]> | undefined) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<TResponse>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly data: Response<TResponse> | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<TResponse>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly data: Response<TResponse> | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<TResponse>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly data: Response<TResponse> | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<TResponse>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly data: Response<TResponse> | undefined;
};

declare const adminCustomerGroupKeys: {
    detailCustomer(id: string, query?: AdminGetCustomersParams): (string | {
        limit?: number | undefined;
        offset?: number | undefined;
        expand?: string | undefined;
        q?: string | undefined;
        has_account?: boolean | undefined;
        groups?: string[] | undefined;
    })[];
    all: ["admin_customer_groups"];
    lists: () => ["admin_customer_groups", "list"];
    list: (query?: any) => ["admin_customer_groups", "list", {
        query: any;
    }];
    details: () => ["admin_customer_groups", "detail"];
    detail: (id: string) => ["admin_customer_groups", "detail", string];
};
type CustomerGroupQueryKeys = typeof adminCustomerGroupKeys;
/**
 * Hook retrieves a customer group by id.
 *
 * @param id - customer group id
 * @param query - query params
 * @param options
 */
declare const useAdminCustomerGroup: (id: string, query?: AdminGetCustomerGroupsGroupParams, options?: UseQueryOptionsWrapper<Response<AdminCustomerGroupsRes>, Error, ReturnType<CustomerGroupQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCustomerGroupsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly customer_group?: _medusajs_medusa.CustomerGroup | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCustomerGroupsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly customer_group?: _medusajs_medusa.CustomerGroup | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCustomerGroupsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly customer_group?: _medusajs_medusa.CustomerGroup | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCustomerGroupsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly customer_group?: _medusajs_medusa.CustomerGroup | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
/**
 * Hook retrieves a list of customer groups.
 *
 * @param query - pagination/filtering params
 * @param options
 */
declare const useAdminCustomerGroups: (query?: AdminGetCustomerGroupsParams, options?: UseQueryOptionsWrapper<Response<AdminCustomerGroupsListRes>, Error, ReturnType<CustomerGroupQueryKeys["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCustomerGroupsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly customer_groups?: _medusajs_medusa.CustomerGroup[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCustomerGroupsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly customer_groups?: _medusajs_medusa.CustomerGroup[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCustomerGroupsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly customer_groups?: _medusajs_medusa.CustomerGroup[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCustomerGroupsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly customer_groups?: _medusajs_medusa.CustomerGroup[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
/**
 * Hook retrieves a list of customers that belong to provided groups.
 *
 * @param id - customer group id
 * @param query - pagination/filtering params
 * @param options
 */
declare const useAdminCustomerGroupCustomers: (id: string, query?: AdminGetCustomersParams, options?: UseQueryOptionsWrapper<Response<AdminCustomersListRes>, Error, ReturnType<CustomerGroupQueryKeys["detailCustomer"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCustomersListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly customers?: _medusajs_medusa.Customer[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCustomersListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly customers?: _medusajs_medusa.Customer[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCustomersListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly customers?: _medusajs_medusa.Customer[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCustomersListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly customers?: _medusajs_medusa.Customer[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

/**
 * Hook returns functions for creating customer groups.
 *
 * @param options
 */
declare const useAdminCreateCustomerGroup: (options?: UseMutationOptions<Response<AdminCustomerGroupsRes>, Error, AdminPostCustomerGroupsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminCustomerGroupsRes>, Error, AdminPostCustomerGroupsReq, unknown>;
/**
 * Hook return functions for updating a customer group.
 *
 * @param id - id of the customer group that is being updated
 * @param options
 */
declare const useAdminUpdateCustomerGroup: (id: string, options?: UseMutationOptions<Response<AdminCustomerGroupsRes>, Error, AdminPostCustomerGroupsGroupReq>) => _tanstack_react_query.UseMutationResult<Response<AdminCustomerGroupsRes>, Error, AdminPostCustomerGroupsGroupReq, unknown>;
/**
 * Hook return functions for deleting a customer group.
 *
 * @param id - id of the customer group that is being deleted
 * @param options
 */
declare const useAdminDeleteCustomerGroup: (id: string, options?: UseMutationOptions<Response<AdminCustomerGroupsDeleteRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<_medusajs_medusa.DeleteResponse>, Error, void, unknown>;
/**
 * Hook returns functions for addition of multiple customers to a customer group.
 *
 * @param id - id of the customer group in which customers are being added
 * @param options
 */
declare const useAdminAddCustomersToCustomerGroup: (id: string, options?: UseMutationOptions<Response<AdminCustomerGroupsRes>, Error, AdminPostCustomerGroupsGroupCustomersBatchReq>) => _tanstack_react_query.UseMutationResult<Response<AdminCustomerGroupsRes>, Error, AdminPostCustomerGroupsGroupCustomersBatchReq, unknown>;
/**
 * Hook returns function for removal of multiple customers from a customer group.
 *
 * @param id - id of a group from which customers will be removed
 * @param options
 */
declare const useAdminRemoveCustomersFromCustomerGroup: (id: string, options?: UseMutationOptions<Response<AdminCustomerGroupsRes>, Error, AdminDeleteCustomerGroupsGroupCustomerBatchReq>) => _tanstack_react_query.UseMutationResult<Response<AdminCustomerGroupsRes>, Error, AdminDeleteCustomerGroupsGroupCustomerBatchReq, unknown>;

declare const adminCustomerKeys: TQueryKey<"admin_customers", any, string>;
type CustomerQueryKeys = typeof adminCustomerKeys;
declare const useAdminCustomers: (query?: AdminGetCustomersParams, options?: UseQueryOptionsWrapper<Response<AdminCustomersListRes>, Error, ReturnType<CustomerQueryKeys["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCustomersListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly customers?: _medusajs_medusa.Customer[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCustomersListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly customers?: _medusajs_medusa.Customer[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCustomersListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly customers?: _medusajs_medusa.Customer[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCustomersListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly customers?: _medusajs_medusa.Customer[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminCustomer: (id: string, options?: UseQueryOptionsWrapper<Response<AdminCustomersRes>, Error, ReturnType<CustomerQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCustomersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly customer?: _medusajs_medusa.Customer | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCustomersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly customer?: _medusajs_medusa.Customer | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCustomersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly customer?: _medusajs_medusa.Customer | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminCustomersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly customer?: _medusajs_medusa.Customer | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminCreateCustomer: (options?: UseMutationOptions<Response<AdminCustomersRes>, Error, AdminPostCustomersReq>) => _tanstack_react_query.UseMutationResult<Response<AdminCustomersRes>, Error, AdminPostCustomersReq, unknown>;
declare const useAdminUpdateCustomer: (id: string, options?: UseMutationOptions<Response<AdminCustomersRes>, Error, AdminPostCustomersCustomerReq>) => _tanstack_react_query.UseMutationResult<Response<AdminCustomersRes>, Error, AdminPostCustomersCustomerReq, unknown>;

declare const adminDiscountKeys: {
    detailCondition(id: string, query?: any): readonly ["admin_discounts", "detail", string, "condition", any];
    all: ["admin_discounts"];
    lists: () => ["admin_discounts", "list"];
    list: (query?: any) => ["admin_discounts", "list", {
        query: any;
    }];
    details: () => ["admin_discounts", "detail"];
    detail: (id: string) => ["admin_discounts", "detail", string];
};
type DiscountQueryKeys = typeof adminDiscountKeys;
declare const useAdminDiscounts: (query?: AdminGetDiscountsParams, options?: UseQueryOptionsWrapper<Response<AdminDiscountsListRes>, Error, ReturnType<DiscountQueryKeys["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDiscountsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly discounts?: _medusajs_medusa.Discount[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDiscountsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly discounts?: _medusajs_medusa.Discount[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDiscountsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly discounts?: _medusajs_medusa.Discount[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDiscountsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly discounts?: _medusajs_medusa.Discount[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminDiscount: (id: string, query?: AdminGetDiscountParams, options?: UseQueryOptionsWrapper<Response<AdminDiscountsRes>, Error, ReturnType<DiscountQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDiscountsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly discount?: _medusajs_medusa.Discount | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDiscountsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly discount?: _medusajs_medusa.Discount | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDiscountsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly discount?: _medusajs_medusa.Discount | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDiscountsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly discount?: _medusajs_medusa.Discount | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminGetDiscountByCode: (code: string, options?: UseQueryOptionsWrapper<Response<AdminDiscountsRes>, Error, ReturnType<DiscountQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDiscountsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly discount?: _medusajs_medusa.Discount | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDiscountsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly discount?: _medusajs_medusa.Discount | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDiscountsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly discount?: _medusajs_medusa.Discount | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDiscountsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly discount?: _medusajs_medusa.Discount | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminGetDiscountCondition: (id: string, conditionId: string, query?: AdminGetDiscountsDiscountConditionsConditionParams, options?: UseQueryOptionsWrapper<Response<AdminDiscountConditionsRes>, Error, ReturnType<DiscountQueryKeys["detailCondition"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDiscountConditionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly discount_condition?: _medusajs_medusa.DiscountCondition | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDiscountConditionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly discount_condition?: _medusajs_medusa.DiscountCondition | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDiscountConditionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly discount_condition?: _medusajs_medusa.DiscountCondition | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDiscountConditionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly discount_condition?: _medusajs_medusa.DiscountCondition | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminAddDiscountConditionResourceBatch: (discountId: string, conditionId: string, query?: AdminPostDiscountsDiscountConditionsConditionBatchParams, options?: UseMutationOptions<Response<AdminDiscountsRes>, Error, AdminPostDiscountsDiscountConditionsConditionBatchReq>) => _tanstack_react_query.UseMutationResult<Response<AdminDiscountsRes>, Error, AdminPostDiscountsDiscountConditionsConditionBatchReq, unknown>;
declare const useAdminDeleteDiscountConditionResourceBatch: (discountId: string, conditionId: string, options?: UseMutationOptions<Response<AdminDiscountsRes>, Error, AdminDeleteDiscountsDiscountConditionsConditionBatchReq>) => _tanstack_react_query.UseMutationResult<Response<AdminDiscountsRes>, Error, AdminDeleteDiscountsDiscountConditionsConditionBatchReq, unknown>;
declare const useAdminCreateDiscount: (options?: UseMutationOptions<Response<AdminDiscountsRes>, Error, AdminPostDiscountsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminDiscountsRes>, Error, AdminPostDiscountsReq, unknown>;
declare const useAdminUpdateDiscount: (id: string, options?: UseMutationOptions<Response<AdminDiscountsRes>, Error, AdminPostDiscountsDiscountReq>) => _tanstack_react_query.UseMutationResult<Response<AdminDiscountsRes>, Error, AdminPostDiscountsDiscountReq, unknown>;
declare const useAdminDeleteDiscount: (id: string, options?: UseMutationOptions<Response<AdminDiscountsDeleteRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<_medusajs_medusa.DeleteResponse>, Error, void, unknown>;
declare const useAdminDiscountAddRegion: (id: string, options?: UseMutationOptions<Response<AdminDiscountsRes>, Error, string>) => _tanstack_react_query.UseMutationResult<Response<AdminDiscountsRes>, Error, string, unknown>;
declare const useAdminDiscountRemoveRegion: (id: string, options?: UseMutationOptions<Response<AdminDiscountsRes>, Error, string>) => _tanstack_react_query.UseMutationResult<Response<AdminDiscountsRes>, Error, string, unknown>;
declare const useAdminCreateDynamicDiscountCode: (id: string, options?: UseMutationOptions<Response<AdminDiscountsRes>, Error, AdminPostDiscountsDiscountDynamicCodesReq>) => _tanstack_react_query.UseMutationResult<Response<AdminDiscountsRes>, Error, AdminPostDiscountsDiscountDynamicCodesReq, unknown>;
declare const useAdminDeleteDynamicDiscountCode: (id: string, options?: UseMutationOptions<Response<AdminDiscountsRes>, Error, string>) => _tanstack_react_query.UseMutationResult<Response<AdminDiscountsRes>, Error, string, unknown>;
declare const useAdminDiscountCreateCondition: (discountId: string, options?: UseMutationOptions<Response<AdminDiscountsRes>, Error, AdminPostDiscountsDiscountConditions>) => _tanstack_react_query.UseMutationResult<Response<AdminDiscountsRes>, Error, AdminPostDiscountsDiscountConditions, unknown>;
declare const useAdminDiscountUpdateCondition: (discountId: string, conditionId: string, options?: UseMutationOptions<Response<AdminDiscountsRes>, Error, AdminPostDiscountsDiscountConditionsCondition>) => _tanstack_react_query.UseMutationResult<Response<AdminDiscountsRes>, Error, AdminPostDiscountsDiscountConditionsCondition, unknown>;
declare const useAdminDiscountRemoveCondition: (discountId: string, options?: UseMutationOptions<Response<AdminDiscountsDeleteRes>, Error, string>) => _tanstack_react_query.UseMutationResult<Response<_medusajs_medusa.DeleteResponse>, Error, string, unknown>;

declare const adminDraftOrderKeys: TQueryKey<"admin_draft_orders", any, string>;
type DraftOrderQueryKeys = typeof adminDraftOrderKeys;
declare const useAdminDraftOrders: (query?: AdminGetDraftOrdersParams, options?: UseQueryOptionsWrapper<Response<AdminDraftOrdersListRes>, Error, ReturnType<DraftOrderQueryKeys["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDraftOrdersListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly draft_orders?: _medusajs_medusa.DraftOrder[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDraftOrdersListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly draft_orders?: _medusajs_medusa.DraftOrder[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDraftOrdersListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly draft_orders?: _medusajs_medusa.DraftOrder[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDraftOrdersListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly draft_orders?: _medusajs_medusa.DraftOrder[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminDraftOrder: (id: string, options?: UseQueryOptionsWrapper<Response<AdminDraftOrdersRes>, Error, ReturnType<DraftOrderQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDraftOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly draft_order?: _medusajs_medusa.DraftOrder | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDraftOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly draft_order?: _medusajs_medusa.DraftOrder | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDraftOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly draft_order?: _medusajs_medusa.DraftOrder | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminDraftOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly draft_order?: _medusajs_medusa.DraftOrder | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminCreateDraftOrder: (options?: UseMutationOptions<Response<AdminDraftOrdersRes>, Error, AdminPostDraftOrdersReq>) => _tanstack_react_query.UseMutationResult<Response<AdminDraftOrdersRes>, Error, AdminPostDraftOrdersReq, unknown>;
declare const useAdminUpdateDraftOrder: (id: string, options?: UseMutationOptions<Response<AdminDraftOrdersRes>, Error, AdminPostDraftOrdersDraftOrderReq>) => _tanstack_react_query.UseMutationResult<Response<AdminDraftOrdersRes>, Error, AdminPostDraftOrdersDraftOrderReq, unknown>;
declare const useAdminDeleteDraftOrder: (id: string, options?: UseMutationOptions<Response<AdminDraftOrdersDeleteRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<_medusajs_medusa.DeleteResponse>, Error, void, unknown>;
declare const useAdminDraftOrderRegisterPayment: (id: string, options?: UseMutationOptions<Response<AdminPostDraftOrdersDraftOrderRegisterPaymentRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<AdminPostDraftOrdersDraftOrderRegisterPaymentRes>, Error, void, unknown>;
declare const useAdminDraftOrderAddLineItem: (id: string, options?: UseMutationOptions<Response<AdminDraftOrdersRes>, Error, AdminPostDraftOrdersDraftOrderLineItemsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminDraftOrdersRes>, Error, AdminPostDraftOrdersDraftOrderLineItemsReq, unknown>;
declare const useAdminDraftOrderRemoveLineItem: (id: string, options?: UseMutationOptions<Response<AdminDraftOrdersRes>, Error, string>) => _tanstack_react_query.UseMutationResult<Response<AdminDraftOrdersRes>, Error, string, unknown>;
declare const useAdminDraftOrderUpdateLineItem: (id: string, options?: UseMutationOptions<Response<AdminDraftOrdersRes>, Error, AdminPostDraftOrdersDraftOrderLineItemsItemReq & {
    item_id: string;
}>) => _tanstack_react_query.UseMutationResult<Response<AdminDraftOrdersRes>, Error, AdminPostDraftOrdersDraftOrderLineItemsItemReq & {
    item_id: string;
}, unknown>;

declare const adminGiftCardKeys: TQueryKey<"admin_gift_cards", any, string>;
type GiftCardQueryKeys = typeof adminGiftCardKeys;
declare const useAdminGiftCards: (query?: AdminGetGiftCardsParams, options?: UseQueryOptionsWrapper<Response<AdminGiftCardsListRes>, Error, ReturnType<GiftCardQueryKeys["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminGiftCardsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly gift_cards?: _medusajs_medusa.GiftCard[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminGiftCardsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly gift_cards?: _medusajs_medusa.GiftCard[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminGiftCardsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly gift_cards?: _medusajs_medusa.GiftCard[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminGiftCardsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly gift_cards?: _medusajs_medusa.GiftCard[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminGiftCard: (id: string, options?: UseQueryOptionsWrapper<Response<AdminGiftCardsRes>, Error, ReturnType<GiftCardQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminGiftCardsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly gift_card?: _medusajs_medusa.GiftCard | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminGiftCardsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly gift_card?: _medusajs_medusa.GiftCard | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminGiftCardsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly gift_card?: _medusajs_medusa.GiftCard | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminGiftCardsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly gift_card?: _medusajs_medusa.GiftCard | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminCreateGiftCard: (options?: UseMutationOptions<Response<AdminGiftCardsRes>, Error, AdminPostGiftCardsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminGiftCardsRes>, Error, AdminPostGiftCardsReq, unknown>;
declare const useAdminUpdateGiftCard: (id: string, options?: UseMutationOptions<Response<AdminGiftCardsRes>, Error, AdminPostGiftCardsGiftCardReq>) => _tanstack_react_query.UseMutationResult<Response<AdminGiftCardsRes>, Error, AdminPostGiftCardsGiftCardReq, unknown>;
declare const useAdminDeleteGiftCard: (id: string, options?: UseMutationOptions<Response<AdminGiftCardsDeleteRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<_medusajs_medusa.DeleteResponse>, Error, void, unknown>;

declare const adminInventoryItemsKeys: TQueryKey<"admin_inventory_items", any, string>;
type InventoryItemsQueryKeys = typeof adminInventoryItemsKeys;
declare const useAdminInventoryItems: (query?: AdminGetInventoryItemsParams, options?: UseQueryOptionsWrapper<Response<AdminInventoryItemsListWithVariantsAndLocationLevelsRes>, Error, ReturnType<InventoryItemsQueryKeys["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminInventoryItemsListWithVariantsAndLocationLevelsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly inventory_items?: _medusajs_medusa.DecoratedInventoryItemDTO[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminInventoryItemsListWithVariantsAndLocationLevelsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly inventory_items?: _medusajs_medusa.DecoratedInventoryItemDTO[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminInventoryItemsListWithVariantsAndLocationLevelsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly inventory_items?: _medusajs_medusa.DecoratedInventoryItemDTO[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminInventoryItemsListWithVariantsAndLocationLevelsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly inventory_items?: _medusajs_medusa.DecoratedInventoryItemDTO[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminInventoryItem: (inventoryItemId: string, query?: AdminGetStockLocationsParams, options?: UseQueryOptionsWrapper<Response<AdminInventoryItemsRes>, Error, ReturnType<InventoryItemsQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminInventoryItemsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly inventory_item?: _medusajs_types.InventoryItemDTO | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminInventoryItemsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly inventory_item?: _medusajs_types.InventoryItemDTO | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminInventoryItemsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly inventory_item?: _medusajs_types.InventoryItemDTO | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminInventoryItemsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly inventory_item?: _medusajs_types.InventoryItemDTO | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminInventoryItemLocationLevels: (inventoryItemId: string, query?: AdminGetInventoryItemsItemLocationLevelsParams, options?: UseQueryOptionsWrapper<Response<AdminInventoryItemsLocationLevelsRes>, Error, ReturnType<InventoryItemsQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminInventoryItemsLocationLevelsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly inventory_item?: {
        id: any;
        location_levels: _medusajs_types.InventoryLevelDTO[];
    } | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminInventoryItemsLocationLevelsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly inventory_item?: {
        id: any;
        location_levels: _medusajs_types.InventoryLevelDTO[];
    } | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminInventoryItemsLocationLevelsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly inventory_item?: {
        id: any;
        location_levels: _medusajs_types.InventoryLevelDTO[];
    } | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminInventoryItemsLocationLevelsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly inventory_item?: {
        id: any;
        location_levels: _medusajs_types.InventoryLevelDTO[];
    } | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminCreateInventoryItem: (options?: UseMutationOptions<Response<AdminInventoryItemsRes>, Error, AdminPostInventoryItemsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminInventoryItemsRes>, Error, AdminPostInventoryItemsReq, unknown>;
declare const useAdminUpdateInventoryItem: (inventoryItemId: string, options?: UseMutationOptions<Response<AdminInventoryItemsRes>, Error, AdminPostInventoryItemsInventoryItemReq>) => _tanstack_react_query.UseMutationResult<Response<AdminInventoryItemsRes>, Error, AdminPostInventoryItemsInventoryItemReq, unknown>;
declare const useAdminDeleteInventoryItem: (inventoryItemId: string, options?: UseMutationOptions<Response<AdminInventoryItemsDeleteRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<_medusajs_medusa.DeleteResponse>, Error, void, unknown>;
declare const useAdminUpdateLocationLevel: (inventoryItemId: string, options?: UseMutationOptions<Response<AdminInventoryItemsRes>, Error, AdminPostInventoryItemsItemLocationLevelsLevelReq & {
    stockLocationId: string;
}>) => _tanstack_react_query.UseMutationResult<Response<AdminInventoryItemsRes>, Error, AdminPostInventoryItemsItemLocationLevelsLevelReq & {
    stockLocationId: string;
}, unknown>;
declare const useAdminDeleteLocationLevel: (inventoryItemId: string, options?: UseMutationOptions<Response<AdminInventoryItemsRes>, Error, string>) => _tanstack_react_query.UseMutationResult<Response<AdminInventoryItemsRes>, Error, string, unknown>;
declare const useAdminCreateLocationLevel: (inventoryItemId: string, options?: UseMutationOptions<Response<AdminInventoryItemsRes>, Error, AdminPostInventoryItemsItemLocationLevelsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminInventoryItemsRes>, Error, AdminPostInventoryItemsItemLocationLevelsReq, unknown>;

declare const adminInviteKeys: TQueryKey<"admin_invites", any, string>;
type InviteQueryKeys = typeof adminInviteKeys;
declare const useAdminInvites: (options?: UseQueryOptionsWrapper<Response<AdminListInvitesRes>, Error, ReturnType<InviteQueryKeys["lists"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminListInvitesRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly invites?: _medusajs_medusa.Invite[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminListInvitesRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly invites?: _medusajs_medusa.Invite[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminListInvitesRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly invites?: _medusajs_medusa.Invite[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminListInvitesRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly invites?: _medusajs_medusa.Invite[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminAcceptInvite: (options?: UseMutationOptions<Response<void>, Error, AdminPostInvitesInviteAcceptReq>) => _tanstack_react_query.UseMutationResult<Response<void>, Error, AdminPostInvitesInviteAcceptReq, unknown>;
declare const useAdminResendInvite: (id: string, options?: UseMutationOptions) => _tanstack_react_query.UseMutationResult<any, unknown, void, unknown>;
declare const useAdminCreateInvite: (options?: UseMutationOptions<Response<void>, Error, AdminPostInvitesPayload>) => _tanstack_react_query.UseMutationResult<Response<void>, Error, AdminPostInvitesPayload, unknown>;
declare const useAdminDeleteInvite: (id: string, options?: UseMutationOptions<Response<AdminInviteDeleteRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<_medusajs_medusa.DeleteResponse>, Error, void, unknown>;

declare const adminNoteKeys: TQueryKey<"admin_notes", any, string>;
type NoteQueryKeys = typeof adminNoteKeys;
declare const useAdminNotes: (query?: AdminGetNotesParams, options?: UseQueryOptionsWrapper<Response<AdminNotesListRes>, Error, ReturnType<NoteQueryKeys["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminNotesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly notes?: _medusajs_medusa.Note[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminNotesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly notes?: _medusajs_medusa.Note[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminNotesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly notes?: _medusajs_medusa.Note[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminNotesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly notes?: _medusajs_medusa.Note[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminNote: (id: string, options?: UseQueryOptionsWrapper<Response<AdminNotesRes>, Error, ReturnType<NoteQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminNotesRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly note?: _medusajs_medusa.Note | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminNotesRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly note?: _medusajs_medusa.Note | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminNotesRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly note?: _medusajs_medusa.Note | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminNotesRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly note?: _medusajs_medusa.Note | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminCreateNote: (options?: UseMutationOptions<Response<AdminNotesRes>, Error, AdminPostNotesReq>) => _tanstack_react_query.UseMutationResult<Response<AdminNotesRes>, Error, AdminPostNotesReq, unknown>;
declare const useAdminUpdateNote: (id: string, options?: UseMutationOptions<Response<AdminNotesRes>, Error, AdminPostNotesNoteReq>) => _tanstack_react_query.UseMutationResult<Response<AdminNotesRes>, Error, AdminPostNotesNoteReq, unknown>;
declare const useAdminDeleteNote: (id: string, options?: UseMutationOptions<Response<AdminNotesDeleteRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<_medusajs_medusa.DeleteResponse>, Error, void, unknown>;

declare const adminNotificationKeys: TQueryKey<"admin_notifications", any, string>;
type NotificationQueryKeys = typeof adminNotificationKeys;
declare const useAdminNotifications: (query?: AdminGetNotificationsParams, options?: UseQueryOptionsWrapper<Response<AdminNotificationsListRes>, Error, ReturnType<NotificationQueryKeys["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminNotificationsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly notifications?: _medusajs_medusa.Notification[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminNotificationsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly notifications?: _medusajs_medusa.Notification[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminNotificationsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly notifications?: _medusajs_medusa.Notification[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminNotificationsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly notifications?: _medusajs_medusa.Notification[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminResendNotification: (id: string, options?: UseMutationOptions<Response<AdminNotificationsRes>, Error, AdminPostNotificationsNotificationResendReq>) => _tanstack_react_query.UseMutationResult<Response<AdminNotificationsRes>, Error, AdminPostNotificationsNotificationResendReq, unknown>;

declare const adminOrderEditsKeys: TQueryKey<"admin_order_edits", any, string>;
type OrderEditQueryKeys = typeof adminOrderEditsKeys;
declare const useAdminOrderEdit: (id: string, query?: GetOrderEditsOrderEditParams, options?: UseQueryOptionsWrapper<Response<AdminOrderEditsRes>, Error, ReturnType<OrderEditQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminOrderEditsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order_edit?: _medusajs_medusa.OrderEdit | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminOrderEditsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order_edit?: _medusajs_medusa.OrderEdit | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminOrderEditsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order_edit?: _medusajs_medusa.OrderEdit | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminOrderEditsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order_edit?: _medusajs_medusa.OrderEdit | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminOrderEdits: (query?: GetOrderEditsParams, options?: UseQueryOptionsWrapper<Response<AdminOrderEditsListRes>, Error, ReturnType<OrderEditQueryKeys["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminOrderEditsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly order_edits?: _medusajs_medusa.OrderEdit[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminOrderEditsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly order_edits?: _medusajs_medusa.OrderEdit[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminOrderEditsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly order_edits?: _medusajs_medusa.OrderEdit[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminOrderEditsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly order_edits?: _medusajs_medusa.OrderEdit[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminCreateOrderEdit: (options?: UseMutationOptions<Response<AdminOrderEditsRes>, Error, AdminPostOrderEditsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminOrderEditsRes>, Error, AdminPostOrderEditsReq, unknown>;
declare const useAdminDeleteOrderEdit: (id: string, options?: UseMutationOptions<Response<AdminOrderEditDeleteRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<_medusajs_medusa.DeleteResponse>, Error, void, unknown>;
declare const useAdminDeleteOrderEditItemChange: (orderEditId: string, itemChangeId: string, options?: UseMutationOptions<Response<AdminOrderEditItemChangeDeleteRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<AdminOrderEditItemChangeDeleteRes>, Error, void, unknown>;
declare const useAdminOrderEditUpdateLineItem: (orderEditId: string, itemId: string, options?: UseMutationOptions<Response<AdminOrderEditsRes>, Error, AdminPostOrderEditsEditLineItemsLineItemReq>) => _tanstack_react_query.UseMutationResult<Response<AdminOrderEditsRes>, Error, AdminPostOrderEditsEditLineItemsLineItemReq, unknown>;
declare const useAdminOrderEditDeleteLineItem: (orderEditId: string, itemId: string, options?: UseMutationOptions<Response<AdminOrderEditsRes>, Error>) => _tanstack_react_query.UseMutationResult<Response<AdminOrderEditsRes>, Error, void, unknown>;
declare const useAdminUpdateOrderEdit: (id: string, options?: UseMutationOptions<Response<AdminOrderEditsRes>, Error, AdminPostOrderEditsOrderEditReq>) => _tanstack_react_query.UseMutationResult<Response<AdminOrderEditsRes>, Error, AdminPostOrderEditsOrderEditReq, unknown>;
declare const useAdminOrderEditAddLineItem: (id: string, options?: UseMutationOptions<Response<AdminOrderEditsRes>, Error, AdminPostOrderEditsEditLineItemsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminOrderEditsRes>, Error, AdminPostOrderEditsEditLineItemsReq, unknown>;
declare const useAdminRequestOrderEditConfirmation: (id: string, options?: UseMutationOptions<Response<AdminOrderEditsRes>, Error>) => _tanstack_react_query.UseMutationResult<Response<AdminOrderEditsRes>, Error, void, unknown>;
declare const useAdminCancelOrderEdit: (id: string, options?: UseMutationOptions<Response<AdminOrderEditsRes>, Error>) => _tanstack_react_query.UseMutationResult<Response<AdminOrderEditsRes>, Error, void, unknown>;
declare const useAdminConfirmOrderEdit: (id: string, options?: UseMutationOptions<Response<AdminOrderEditsRes>, Error>) => _tanstack_react_query.UseMutationResult<Response<AdminOrderEditsRes>, Error, void, unknown>;

declare const adminOrderKeys: {
    detailOrder(id: string, query?: FindParams): (string | {
        expand?: string | undefined;
        fields?: string | undefined;
    })[];
    all: ["admin_orders"];
    lists: () => ["admin_orders", "list"];
    list: (query?: any) => ["admin_orders", "list", {
        query: any;
    }];
    details: () => ["admin_orders", "detail"];
    detail: (id: string) => ["admin_orders", "detail", string];
};
type OrderQueryKeys = typeof adminOrderKeys;
declare const useAdminOrders: (query?: AdminGetOrdersParams, options?: UseQueryOptionsWrapper<Response<AdminOrdersListRes>, Error, ReturnType<OrderQueryKeys["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminOrdersListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly orders?: _medusajs_medusa.Order[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminOrdersListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly orders?: _medusajs_medusa.Order[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminOrdersListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly orders?: _medusajs_medusa.Order[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminOrdersListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly orders?: _medusajs_medusa.Order[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminOrder: (id: string, query?: FindParams, options?: UseQueryOptionsWrapper<Response<AdminOrdersRes>, Error, ReturnType<OrderQueryKeys["detailOrder"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order?: _medusajs_medusa.Order | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order?: _medusajs_medusa.Order | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order?: _medusajs_medusa.Order | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminOrdersRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly order?: _medusajs_medusa.Order | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminUpdateOrder: (id: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderReq>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderReq, unknown>;
declare const useAdminCancelOrder: (id: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, void, unknown>;
declare const useAdminCompleteOrder: (id: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, void, unknown>;
declare const useAdminCapturePayment: (id: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, void, unknown>;
declare const useAdminRefundPayment: (id: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderRefundsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderRefundsReq, unknown>;
declare const useAdminCreateFulfillment: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderFulfillmentsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderFulfillmentsReq, unknown>;
declare const useAdminCancelFulfillment: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, string, unknown>;
declare const useAdminCreateShipment: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderShipmentReq>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderShipmentReq, unknown>;
declare const useAdminRequestReturn: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderReturnsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderReturnsReq, unknown>;
declare const useAdminAddShippingMethod: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderShippingMethodsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderShippingMethodsReq, unknown>;
declare const useAdminArchiveOrder: (id: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, void, unknown>;

declare const adminPaymentCollectionQueryKeys: TQueryKey<"paymentCollection", any, string>;
type AdminPaymentCollectionKey = typeof adminPaymentCollectionQueryKeys;
declare const useAdminPaymentCollection: (id: string, options?: UseQueryOptionsWrapper<Response<AdminPaymentCollectionsRes>, Error, ReturnType<AdminPaymentCollectionKey["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPaymentCollectionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly payment_collection?: _medusajs_medusa.PaymentCollection | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPaymentCollectionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly payment_collection?: _medusajs_medusa.PaymentCollection | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPaymentCollectionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly payment_collection?: _medusajs_medusa.PaymentCollection | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPaymentCollectionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly payment_collection?: _medusajs_medusa.PaymentCollection | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminDeletePaymentCollection: (id: string, options?: UseMutationOptions<Response<AdminPaymentCollectionDeleteRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<AdminPaymentCollectionDeleteRes>, Error, void, unknown>;
declare const useAdminUpdatePaymentCollection: (id: string, options?: UseMutationOptions<Response<AdminPaymentCollectionsRes>, Error, AdminUpdatePaymentCollectionsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminPaymentCollectionsRes>, Error, AdminUpdatePaymentCollectionsReq, unknown>;
declare const useAdminMarkPaymentCollectionAsAuthorized: (id: string, options?: UseMutationOptions<Response<AdminPaymentCollectionsRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<AdminPaymentCollectionsRes>, Error, void, unknown>;

declare const adminPaymentQueryKeys: TQueryKey<"payment", any, string>;
type AdminPaymentKey = typeof adminPaymentQueryKeys;
declare const useAdminPayment: (id: string, options?: UseQueryOptionsWrapper<Response<AdminPaymentRes>, Error, ReturnType<AdminPaymentKey["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPaymentRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly payment?: _medusajs_medusa.Payment | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPaymentRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly payment?: _medusajs_medusa.Payment | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPaymentRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly payment?: _medusajs_medusa.Payment | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPaymentRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly payment?: _medusajs_medusa.Payment | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminPaymentsCapturePayment: (id: string, options?: UseMutationOptions<Response<AdminPaymentRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<AdminPaymentRes>, Error, void, unknown>;
declare const useAdminPaymentsRefundPayment: (id: string, options?: UseMutationOptions<Response<AdminRefundRes>, Error, AdminPostPaymentRefundsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminRefundRes>, Error, AdminPostPaymentRefundsReq, unknown>;

declare const adminPriceListKeys: {
    detailProducts(id: string, query?: any): readonly ["admin_price_lists", "detail", string, "products", any];
    all: ["admin_price_lists"];
    lists: () => ["admin_price_lists", "list"];
    list: (query?: any) => ["admin_price_lists", "list", {
        query: any;
    }];
    details: () => ["admin_price_lists", "detail"];
    detail: (id: string) => ["admin_price_lists", "detail", string];
};
type PriceListQueryKeys = typeof adminPriceListKeys;
declare const useAdminPriceLists: (query?: AdminGetPriceListPaginationParams, options?: UseQueryOptionsWrapper<Response<AdminPriceListsListRes>, Error, ReturnType<PriceListQueryKeys["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPriceListsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly price_lists?: _medusajs_medusa.PriceList[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPriceListsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly price_lists?: _medusajs_medusa.PriceList[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPriceListsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly price_lists?: _medusajs_medusa.PriceList[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPriceListsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly price_lists?: _medusajs_medusa.PriceList[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminPriceListProducts: (id: string, query?: AdminGetPriceListsPriceListProductsParams, options?: UseQueryOptionsWrapper<Response<AdminProductsListRes>, Error, ReturnType<PriceListQueryKeys["detailProducts"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly products?: (_medusajs_medusa.Product | _medusajs_medusa_dist_types_pricing.PricedProduct)[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly products?: (_medusajs_medusa.Product | _medusajs_medusa_dist_types_pricing.PricedProduct)[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly products?: (_medusajs_medusa.Product | _medusajs_medusa_dist_types_pricing.PricedProduct)[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly products?: (_medusajs_medusa.Product | _medusajs_medusa_dist_types_pricing.PricedProduct)[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminPriceList: (id: string, options?: UseQueryOptionsWrapper<Response<AdminPriceListRes>, Error, ReturnType<PriceListQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPriceListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly price_list?: _medusajs_medusa.PriceList | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPriceListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly price_list?: _medusajs_medusa.PriceList | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPriceListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly price_list?: _medusajs_medusa.PriceList | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPriceListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly price_list?: _medusajs_medusa.PriceList | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminCreatePriceList: (options?: UseMutationOptions<Response<AdminPriceListRes>, Error, AdminPostPriceListsPriceListReq>) => _tanstack_react_query.UseMutationResult<Response<AdminPriceListRes>, Error, AdminPostPriceListsPriceListReq, unknown>;
declare const useAdminUpdatePriceList: (id: string, options?: UseMutationOptions<Response<AdminPriceListRes>, Error, AdminPostPriceListsPriceListPriceListReq>) => _tanstack_react_query.UseMutationResult<Response<AdminPriceListRes>, Error, AdminPostPriceListsPriceListPriceListReq, unknown>;
declare const useAdminDeletePriceList: (id: string, options?: UseMutationOptions<Response<AdminPriceListDeleteRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<_medusajs_medusa.DeleteResponse>, Error, void, unknown>;
declare const useAdminCreatePriceListPrices: (id: string, options?: UseMutationOptions<Response<AdminPriceListRes>, Error, AdminPostPriceListPricesPricesReq>) => _tanstack_react_query.UseMutationResult<Response<AdminPriceListRes>, Error, AdminPostPriceListPricesPricesReq, unknown>;
declare const useAdminDeletePriceListPrices: (id: string, options?: UseMutationOptions<Response<AdminPriceListDeleteBatchRes>, Error, AdminDeletePriceListPricesPricesReq>) => _tanstack_react_query.UseMutationResult<Response<AdminPriceListDeleteBatchRes>, Error, AdminDeletePriceListPricesPricesReq, unknown>;
declare const useAdminDeletePriceListProductsPrices: (id: string, options?: UseMutationOptions<Response<AdminPriceListDeleteBatchRes>, Error, AdminDeletePriceListsPriceListProductsPricesBatchReq>) => _tanstack_react_query.UseMutationResult<Response<AdminPriceListDeleteBatchRes>, Error, AdminDeletePriceListsPriceListProductsPricesBatchReq, unknown>;
declare const useAdminDeletePriceListProductPrices: (id: string, productId: string, options?: UseMutationOptions<Response<AdminPriceListDeleteProductPricesRes>, Error>) => _tanstack_react_query.UseMutationResult<Response<AdminPriceListDeleteBatchRes>, Error, void, unknown>;
declare const useAdminDeletePriceListVariantPrices: (id: string, variantId: string, options?: UseMutationOptions<Response<AdminPriceListDeleteVariantPricesRes>, Error>) => _tanstack_react_query.UseMutationResult<Response<AdminPriceListDeleteBatchRes>, Error, void, unknown>;

declare const adminProductCategoryKeys: TQueryKey<"product_categories", any, string>;
type ProductCategoryQueryKeys = typeof adminProductCategoryKeys;
declare const useAdminProductCategories: (query?: AdminGetProductCategoriesParams, options?: UseQueryOptionsWrapper<Response<AdminProductCategoriesListRes>, Error, ReturnType<ProductCategoryQueryKeys["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductCategoriesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_categories?: _medusajs_medusa.ProductCategory[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductCategoriesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_categories?: _medusajs_medusa.ProductCategory[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductCategoriesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_categories?: _medusajs_medusa.ProductCategory[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductCategoriesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_categories?: _medusajs_medusa.ProductCategory[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminProductCategory: (id: string, query?: AdminGetProductCategoryParams, options?: UseQueryOptionsWrapper<Response<AdminProductCategoriesCategoryRes>, Error, ReturnType<ProductCategoryQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductCategoriesCategoryRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly product_category?: _medusajs_medusa.ProductCategory | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductCategoriesCategoryRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly product_category?: _medusajs_medusa.ProductCategory | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductCategoriesCategoryRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly product_category?: _medusajs_medusa.ProductCategory | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductCategoriesCategoryRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly product_category?: _medusajs_medusa.ProductCategory | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

/**
 * Hook provides a mutation function for creating product categories.
 *
 * @experimental This feature is under development and may change in the future.
 * To use this feature please enable the corresponding feature flag in your medusa backend project.
 */
declare const useAdminCreateProductCategory: (options?: UseMutationOptions<Response<AdminProductCategoriesCategoryRes>, Error, AdminPostProductCategoriesReq>) => _tanstack_react_query.UseMutationResult<Response<AdminProductCategoriesCategoryRes>, Error, AdminPostProductCategoriesReq, unknown>;
/** Update a product category
 *
 * @experimental This feature is under development and may change in the future.
 * To use this feature please enable feature flag `product_categories` in your medusa backend project.
 * @description updates a product category
 * @returns the updated medusa product category
 */
declare const useAdminUpdateProductCategory: (id: string, options?: UseMutationOptions<Response<AdminProductCategoriesCategoryRes>, Error, AdminPostProductCategoriesCategoryReq>) => _tanstack_react_query.UseMutationResult<Response<AdminProductCategoriesCategoryRes>, Error, AdminPostProductCategoriesCategoryReq, unknown>;
/**
 * Delete a product category
 *
 * @experimental This feature is under development and may change in the future.
 * To use this feature please enable featureflag `product_categories` in your medusa backend project.
 * @param id
 * @param options
 */
declare const useAdminDeleteProductCategory: (id: string, options?: UseMutationOptions<Response<AdminProductCategoriesCategoryDeleteRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<_medusajs_medusa.DeleteResponse>, Error, void, unknown>;
/**
 * Add products to a product category
 *
 * @experimental This feature is under development and may change in the future.
 * To use this feature please enable featureflag `product_categories` in your medusa backend project.
 * @description Add products to a product category
 * @param id
 * @param options
 */
declare const useAdminAddProductsToCategory: (id: string, options?: UseMutationOptions<Response<AdminProductCategoriesCategoryRes>, Error, AdminPostProductCategoriesCategoryProductsBatchReq>) => _tanstack_react_query.UseMutationResult<Response<AdminProductCategoriesCategoryRes>, Error, AdminPostProductCategoriesCategoryProductsBatchReq, unknown>;
/**
 * Remove products from a product category
 * @experimental This feature is under development and may change in the future.
 * To use this feature please enable featureflag `product_categories` in your medusa backend project.
 * @description remove products from a product category
 * @param id
 * @param options
 */
declare const useAdminDeleteProductsFromCategory: (id: string, options?: UseMutationOptions<Response<AdminProductCategoriesCategoryRes>, Error, AdminDeleteProductCategoriesCategoryProductsBatchReq>) => _tanstack_react_query.UseMutationResult<Response<AdminProductCategoriesCategoryRes>, Error, AdminDeleteProductCategoriesCategoryProductsBatchReq, unknown>;

declare const adminProductTagKeys: TQueryKey<"admin_product_tags", any, string>;
type ProductQueryKeys$1 = typeof adminProductTagKeys;
declare const useAdminProductTags: (query?: AdminGetProductTagsParams, options?: UseQueryOptionsWrapper<Response<AdminProductTagsListRes>, Error, ReturnType<ProductQueryKeys$1["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductTagsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_tags?: _medusajs_medusa.ProductTag[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductTagsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_tags?: _medusajs_medusa.ProductTag[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductTagsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_tags?: _medusajs_medusa.ProductTag[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductTagsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_tags?: _medusajs_medusa.ProductTag[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const adminProductTypeKeys: TQueryKey<"admin_product_types", any, string>;
type ProductTypesQueryKeys = typeof adminProductTypeKeys;
declare const useAdminProductTypes: (query?: AdminGetProductTypesParams, options?: UseQueryOptionsWrapper<Response<AdminProductTypesListRes>, Error, ReturnType<ProductTypesQueryKeys["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductTypesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_types?: _medusajs_medusa.ProductType[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductTypesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_types?: _medusajs_medusa.ProductType[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductTypesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_types?: _medusajs_medusa.ProductType[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductTypesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly product_types?: _medusajs_medusa.ProductType[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const adminProductKeys: TQueryKey<"admin_products", any, string>;
type ProductQueryKeys = typeof adminProductKeys;
declare const useAdminProducts: (query?: AdminGetProductsParams, options?: UseQueryOptionsWrapper<Response<AdminProductsListRes>, Error, ReturnType<ProductQueryKeys["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly products?: (_medusajs_medusa.Product | _medusajs_medusa_dist_types_pricing.PricedProduct)[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly products?: (_medusajs_medusa.Product | _medusajs_medusa_dist_types_pricing.PricedProduct)[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly products?: (_medusajs_medusa.Product | _medusajs_medusa_dist_types_pricing.PricedProduct)[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly products?: (_medusajs_medusa.Product | _medusajs_medusa_dist_types_pricing.PricedProduct)[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminProduct: (id: string, query?: AdminGetProductParams, options?: UseQueryOptionsWrapper<Response<AdminProductsRes>, Error, ReturnType<ProductQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly product?: _medusajs_medusa.Product | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly product?: _medusajs_medusa.Product | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly product?: _medusajs_medusa.Product | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly product?: _medusajs_medusa.Product | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminProductTagUsage: (options?: UseQueryOptionsWrapper<Response<AdminProductsListTagsRes>, Error, ReturnType<ProductQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductsListTagsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly tags?: (Pick<_medusajs_medusa.ProductTag, "value" | "id"> & {
        usage_count: number;
    })[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductsListTagsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly tags?: (Pick<_medusajs_medusa.ProductTag, "value" | "id"> & {
        usage_count: number;
    })[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductsListTagsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly tags?: (Pick<_medusajs_medusa.ProductTag, "value" | "id"> & {
        usage_count: number;
    })[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminProductsListTagsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly tags?: (Pick<_medusajs_medusa.ProductTag, "value" | "id"> & {
        usage_count: number;
    })[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminCreateProduct: (options?: UseMutationOptions<Response<AdminProductsRes>, Error, AdminPostProductsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminProductsRes>, Error, AdminPostProductsReq, unknown>;
declare const useAdminUpdateProduct: (id: string, options?: UseMutationOptions<Response<AdminProductsRes>, Error, AdminPostProductsProductReq>) => _tanstack_react_query.UseMutationResult<Response<AdminProductsRes>, Error, AdminPostProductsProductReq, unknown>;
declare const useAdminDeleteProduct: (id: string, options?: UseMutationOptions<Response<AdminProductsDeleteRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<AdminProductsDeleteRes>, Error, void, unknown>;
declare const useAdminCreateVariant: (productId: string, options?: UseMutationOptions<Response<AdminProductsRes>, Error, AdminPostProductsProductVariantsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminProductsRes>, Error, AdminPostProductsProductVariantsReq, unknown>;
declare const useAdminUpdateVariant: (productId: string, options?: UseMutationOptions<Response<AdminProductsRes>, Error, AdminPostProductsProductVariantsVariantReq & {
    variant_id: string;
}>) => _tanstack_react_query.UseMutationResult<Response<AdminProductsRes>, Error, AdminPostProductsProductVariantsVariantReq & {
    variant_id: string;
}, unknown>;
declare const useAdminDeleteVariant: (productId: string, options?: UseMutationOptions<Response<AdminProductsDeleteVariantRes>, Error, string>) => _tanstack_react_query.UseMutationResult<Response<AdminProductsDeleteVariantRes>, Error, string, unknown>;
declare const useAdminCreateProductOption: (productId: string, options?: UseMutationOptions<Response<AdminProductsRes>, Error, AdminPostProductsProductOptionsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminProductsRes>, Error, AdminPostProductsProductOptionsReq, unknown>;
declare const useAdminUpdateProductOption: (productId: string, options?: UseMutationOptions<Response<AdminProductsRes>, Error, AdminPostProductsProductOptionsOption & {
    option_id: string;
}>) => _tanstack_react_query.UseMutationResult<Response<AdminProductsRes>, Error, AdminPostProductsProductOptionsOption & {
    option_id: string;
}, unknown>;
declare const useAdminDeleteProductOption: (productId: string, options?: UseMutationOptions<Response<AdminProductsDeleteOptionRes>, Error, string>) => _tanstack_react_query.UseMutationResult<Response<AdminProductsDeleteOptionRes>, Error, string, unknown>;

declare const adminPublishableApiKeysKeys: {
    detailSalesChannels(id: string, query?: any): readonly ["admin_publishable_api_keys", "detail", string, "sales_channels", any];
    all: ["admin_publishable_api_keys"];
    lists: () => ["admin_publishable_api_keys", "list"];
    list: (query?: any) => ["admin_publishable_api_keys", "list", {
        query: any;
    }];
    details: () => ["admin_publishable_api_keys", "detail"];
    detail: (id: string) => ["admin_publishable_api_keys", "detail", string];
};
type PublishableApiKeyQueryKeys = typeof adminPublishableApiKeysKeys;
declare const useAdminPublishableApiKey: (id: string, query?: GetPublishableApiKeysParams, options?: UseQueryOptionsWrapper<Response<AdminPublishableApiKeysRes>, Error, ReturnType<PublishableApiKeyQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPublishableApiKeysRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly publishable_api_key?: _medusajs_medusa.PublishableApiKey | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPublishableApiKeysRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly publishable_api_key?: _medusajs_medusa.PublishableApiKey | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPublishableApiKeysRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly publishable_api_key?: _medusajs_medusa.PublishableApiKey | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPublishableApiKeysRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly publishable_api_key?: _medusajs_medusa.PublishableApiKey | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminPublishableApiKeys: (query?: GetPublishableApiKeysParams, options?: UseQueryOptionsWrapper<Response<AdminPublishableApiKeysListRes>, Error, ReturnType<PublishableApiKeyQueryKeys["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPublishableApiKeysListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly publishable_api_keys?: _medusajs_medusa.PublishableApiKey[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPublishableApiKeysListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly publishable_api_keys?: _medusajs_medusa.PublishableApiKey[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPublishableApiKeysListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly publishable_api_keys?: _medusajs_medusa.PublishableApiKey[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPublishableApiKeysListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly publishable_api_keys?: _medusajs_medusa.PublishableApiKey[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminPublishableApiKeySalesChannels: (id: string, query?: GetPublishableApiKeySalesChannelsParams, options?: UseQueryOptionsWrapper<Response<AdminPublishableApiKeysListSalesChannelsRes>, Error, ReturnType<PublishableApiKeyQueryKeys["detailSalesChannels"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPublishableApiKeysListSalesChannelsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly sales_channels?: _medusajs_medusa.SalesChannel[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPublishableApiKeysListSalesChannelsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly sales_channels?: _medusajs_medusa.SalesChannel[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPublishableApiKeysListSalesChannelsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly sales_channels?: _medusajs_medusa.SalesChannel[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPublishableApiKeysListSalesChannelsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly sales_channels?: _medusajs_medusa.SalesChannel[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminCreatePublishableApiKey: (options?: UseMutationOptions<Response<AdminPublishableApiKeysRes>, Error, AdminPostPublishableApiKeysReq>) => _tanstack_react_query.UseMutationResult<Response<AdminPublishableApiKeysRes>, Error, AdminPostPublishableApiKeysReq, unknown>;
declare const useAdminUpdatePublishableApiKey: (id: string, options?: UseMutationOptions<Response<AdminPublishableApiKeysRes>, Error, AdminPostPublishableApiKeysPublishableApiKeyReq>) => _tanstack_react_query.UseMutationResult<Response<AdminPublishableApiKeysRes>, Error, AdminPostPublishableApiKeysPublishableApiKeyReq, unknown>;
declare const useAdminDeletePublishableApiKey: (id: string, options?: UseMutationOptions<Response<AdminPublishableApiKeyDeleteRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<_medusajs_medusa.DeleteResponse>, Error, void, unknown>;
declare const useAdminRevokePublishableApiKey: (id: string, options?: UseMutationOptions<Response<AdminPublishableApiKeysRes>, Error>) => _tanstack_react_query.UseMutationResult<Response<AdminPublishableApiKeysRes>, Error, void, unknown>;
declare const useAdminAddPublishableKeySalesChannelsBatch: (id: string, options?: UseMutationOptions<Response<AdminPublishableApiKeysRes>, Error, AdminPostPublishableApiKeySalesChannelsBatchReq>) => _tanstack_react_query.UseMutationResult<Response<AdminPublishableApiKeysRes>, Error, AdminPostPublishableApiKeySalesChannelsBatchReq, unknown>;
declare const useAdminRemovePublishableKeySalesChannelsBatch: (id: string, options?: UseMutationOptions<Response<AdminPublishableApiKeysRes>, Error, AdminPostPublishableApiKeySalesChannelsBatchReq>) => _tanstack_react_query.UseMutationResult<Response<AdminPublishableApiKeysRes>, Error, AdminPostPublishableApiKeySalesChannelsBatchReq, unknown>;

declare const adminRegionKeys: TQueryKey<"admin_regions", any, string>;
type RegionQueryKeys = typeof adminRegionKeys;
declare const useAdminRegions: (query?: AdminGetRegionsParams, options?: UseQueryOptionsWrapper<Response<AdminRegionsListRes>, Error, ReturnType<RegionQueryKeys["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminRegionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly regions?: _medusajs_medusa.Region[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminRegionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly regions?: _medusajs_medusa.Region[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminRegionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly regions?: _medusajs_medusa.Region[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminRegionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly regions?: _medusajs_medusa.Region[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminRegion: (id: string, options?: UseQueryOptionsWrapper<Response<AdminRegionsRes>, Error, ReturnType<RegionQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminRegionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly region?: _medusajs_medusa.Region | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminRegionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly region?: _medusajs_medusa.Region | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminRegionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly region?: _medusajs_medusa.Region | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminRegionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly region?: _medusajs_medusa.Region | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminRegionFulfillmentOptions: (regionId: string, options?: UseQueryOptionsWrapper<Response<AdminGetRegionsRegionFulfillmentOptionsRes>, Error, ReturnType<RegionQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminGetRegionsRegionFulfillmentOptionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly fulfillment_options?: _medusajs_medusa.FulfillmentOption[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminGetRegionsRegionFulfillmentOptionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly fulfillment_options?: _medusajs_medusa.FulfillmentOption[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminGetRegionsRegionFulfillmentOptionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly fulfillment_options?: _medusajs_medusa.FulfillmentOption[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminGetRegionsRegionFulfillmentOptionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly fulfillment_options?: _medusajs_medusa.FulfillmentOption[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminCreateRegion: (options?: UseMutationOptions<Response<AdminRegionsRes>, Error, AdminPostRegionsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminRegionsRes>, Error, AdminPostRegionsReq, unknown>;
declare const useAdminUpdateRegion: (id: string, options?: UseMutationOptions<Response<AdminRegionsRes>, Error, AdminPostRegionsRegionReq>) => _tanstack_react_query.UseMutationResult<Response<AdminRegionsRes>, Error, AdminPostRegionsRegionReq, unknown>;
declare const useAdminDeleteRegion: (id: string, options?: UseMutationOptions<Response<AdminRegionsDeleteRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<_medusajs_medusa.DeleteResponse>, Error, void, unknown>;
declare const useAdminRegionAddCountry: (id: string, options?: UseMutationOptions<Response<AdminRegionsRes>, Error, AdminPostRegionsRegionCountriesReq>) => _tanstack_react_query.UseMutationResult<Response<AdminRegionsRes>, Error, AdminPostRegionsRegionCountriesReq, unknown>;
declare const useAdminRegionRemoveCountry: (id: string, options?: UseMutationOptions<Response<AdminRegionsRes>, Error, string>) => _tanstack_react_query.UseMutationResult<Response<AdminRegionsRes>, Error, string, unknown>;
declare const useAdminRegionAddFulfillmentProvider: (id: string, options?: UseMutationOptions<Response<AdminRegionsRes>, Error, AdminPostRegionsRegionFulfillmentProvidersReq>) => _tanstack_react_query.UseMutationResult<Response<AdminRegionsRes>, Error, AdminPostRegionsRegionFulfillmentProvidersReq, unknown>;
declare const useAdminRegionDeleteFulfillmentProvider: (id: string, options?: UseMutationOptions<Response<AdminRegionsRes>, Error, string>) => _tanstack_react_query.UseMutationResult<Response<AdminRegionsRes>, Error, string, unknown>;
declare const useAdminRegionAddPaymentProvider: (id: string, options?: UseMutationOptions<Response<AdminRegionsRes>, Error, AdminPostRegionsRegionPaymentProvidersReq>) => _tanstack_react_query.UseMutationResult<Response<AdminRegionsRes>, Error, AdminPostRegionsRegionPaymentProvidersReq, unknown>;
declare const useAdminRegionDeletePaymentProvider: (id: string, options?: UseMutationOptions<Response<AdminRegionsRes>, Error, string>) => _tanstack_react_query.UseMutationResult<Response<AdminRegionsRes>, Error, string, unknown>;

declare const useAdminCreateReservation: (options?: UseMutationOptions<Response<AdminReservationsRes>, Error, AdminPostReservationsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminReservationsRes>, Error, AdminPostReservationsReq, unknown>;
declare const useAdminUpdateReservation: (id: string, options?: UseMutationOptions<Response<AdminReservationsRes>, Error, AdminPostReservationsReservationReq>) => _tanstack_react_query.UseMutationResult<Response<AdminReservationsRes>, Error, AdminPostReservationsReservationReq, unknown>;
declare const useAdminDeleteReservation: (id: string, options?: UseMutationOptions<Response<AdminReservationsDeleteRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<_medusajs_medusa.DeleteResponse>, Error, void, unknown>;

declare const adminReservationsKeys: TQueryKey<"admin_reservations", any, string>;
type ReservationsQueryKeys = typeof adminReservationsKeys;
declare const useAdminReservations: (query?: AdminGetReservationsParams, options?: UseQueryOptionsWrapper<Response<AdminReservationsListRes>, Error, ReturnType<ReservationsQueryKeys["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminReservationsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly reservations?: _medusajs_types.ReservationItemDTO[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminReservationsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly reservations?: _medusajs_types.ReservationItemDTO[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminReservationsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly reservations?: _medusajs_types.ReservationItemDTO[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminReservationsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly reservations?: _medusajs_types.ReservationItemDTO[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminReservation: (id: string, options?: UseQueryOptionsWrapper<Response<AdminReservationsRes>, Error, ReturnType<ReservationsQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminReservationsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly reservation?: _medusajs_types.ReservationItemDTO | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminReservationsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly reservation?: _medusajs_types.ReservationItemDTO | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminReservationsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly reservation?: _medusajs_types.ReservationItemDTO | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminReservationsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly reservation?: _medusajs_types.ReservationItemDTO | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const adminReturnReasonKeys: TQueryKey<"admin_return_reasons", any, string>;
type ReturnReasonQueryKeys = typeof adminReturnReasonKeys;
declare const useAdminReturnReasons: (options?: UseQueryOptionsWrapper<Response<AdminReturnReasonsListRes>, Error, ReturnType<ReturnReasonQueryKeys["lists"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminReturnReasonsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly return_reasons?: _medusajs_medusa.ReturnReason[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminReturnReasonsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly return_reasons?: _medusajs_medusa.ReturnReason[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminReturnReasonsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly return_reasons?: _medusajs_medusa.ReturnReason[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminReturnReasonsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly return_reasons?: _medusajs_medusa.ReturnReason[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminReturnReason: (id: string, options?: UseQueryOptionsWrapper<Response<AdminReturnReasonsRes>, Error, ReturnType<ReturnReasonQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminReturnReasonsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly return_reason?: _medusajs_medusa.ReturnReason | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminReturnReasonsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly return_reason?: _medusajs_medusa.ReturnReason | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminReturnReasonsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly return_reason?: _medusajs_medusa.ReturnReason | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminReturnReasonsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly return_reason?: _medusajs_medusa.ReturnReason | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminCreateReturnReason: (options?: UseMutationOptions<Response<AdminReturnReasonsRes>, Error, AdminPostReturnReasonsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminReturnReasonsRes>, Error, AdminPostReturnReasonsReq, unknown>;
declare const useAdminUpdateReturnReason: (id: string, options?: UseMutationOptions<Response<AdminReturnReasonsRes>, Error, AdminPostReturnReasonsReasonReq>) => _tanstack_react_query.UseMutationResult<Response<AdminReturnReasonsRes>, Error, AdminPostReturnReasonsReasonReq, unknown>;
declare const useAdminDeleteReturnReason: (id: string, options?: UseMutationOptions) => _tanstack_react_query.UseMutationResult<Response<_medusajs_medusa.DeleteResponse>, unknown, void, unknown>;

declare const adminReturnKeys: TQueryKey<"admin_returns", any, string>;
type ReturnQueryKeys = typeof adminReturnKeys;
declare const useAdminReturns: (options?: UseQueryOptionsWrapper<Response<AdminReturnsListRes>, Error, ReturnType<ReturnQueryKeys["lists"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminReturnsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly returns?: _medusajs_medusa.Return[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminReturnsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly returns?: _medusajs_medusa.Return[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminReturnsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly returns?: _medusajs_medusa.Return[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminReturnsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly returns?: _medusajs_medusa.Return[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminReceiveReturn: (id: string, options?: UseMutationOptions<Response<AdminReturnsRes>, Error, AdminPostReturnsReturnReceiveReq>) => _tanstack_react_query.UseMutationResult<Response<AdminReturnsRes>, Error, AdminPostReturnsReturnReceiveReq, unknown>;
declare const useAdminCancelReturn: (id: string, options?: UseMutationOptions<Response<AdminReturnsCancelRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<AdminReturnsCancelRes>, Error, void, unknown>;

declare const adminSalesChannelsKeys: TQueryKey<"admin_sales_channels", any, string>;
type SalesChannelsQueryKeys = typeof adminSalesChannelsKeys;
/** retrieve a sales channel
 * @experimental This feature is under development and may change in the future.
 * To use this feature please enable feature flag `sales_channels` in your medusa backend project.
 * @description gets a sales channel
 * @returns a medusa sales channel
 */
declare const useAdminSalesChannel: (id: string, options?: UseQueryOptionsWrapper<Response<AdminSalesChannelsRes>, Error, ReturnType<SalesChannelsQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminSalesChannelsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly sales_channel?: _medusajs_medusa.SalesChannel | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminSalesChannelsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly sales_channel?: _medusajs_medusa.SalesChannel | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminSalesChannelsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly sales_channel?: _medusajs_medusa.SalesChannel | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminSalesChannelsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly sales_channel?: _medusajs_medusa.SalesChannel | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
/**
 * retrieve a list of sales channels
 * @experimental This feature is under development and may change in the future.
 * To use this feature please enable feature flag `sales_channels` in your medusa backend project.
 * @description Retrieve a list of sales channel
 * @returns a list of sales channel as well as the pagination properties
 */
declare const useAdminSalesChannels: (query?: AdminGetSalesChannelsParams, options?: UseQueryOptionsWrapper<Response<AdminSalesChannelsListRes>, Error, ReturnType<SalesChannelsQueryKeys["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminSalesChannelsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly sales_channels?: _medusajs_medusa.SalesChannel[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminSalesChannelsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly sales_channels?: _medusajs_medusa.SalesChannel[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminSalesChannelsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly sales_channels?: _medusajs_medusa.SalesChannel[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminSalesChannelsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly sales_channels?: _medusajs_medusa.SalesChannel[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

/**
 * Hook provides a mutation function for creating sales channel.
 *
 * @experimental This feature is under development and may change in the future.
 * To use this feature please enable the corresponding feature flag in your medusa backend project.
 */
declare const useAdminCreateSalesChannel: (options?: UseMutationOptions<Response<AdminSalesChannelsRes>, Error, AdminPostSalesChannelsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminSalesChannelsRes>, Error, AdminPostSalesChannelsReq, unknown>;
/** update a sales channel
 * @experimental This feature is under development and may change in the future.
 * To use this feature please enable feature flag `sales_channels` in your medusa backend project.
 * @description updates a sales channel
 * @returns the updated medusa sales channel
 */
declare const useAdminUpdateSalesChannel: (id: string, options?: UseMutationOptions<Response<AdminSalesChannelsRes>, Error, AdminPostSalesChannelsSalesChannelReq>) => _tanstack_react_query.UseMutationResult<Response<AdminSalesChannelsRes>, Error, AdminPostSalesChannelsSalesChannelReq, unknown>;
/**
 * Delete a sales channel
 * @experimental This feature is under development and may change in the future.
 * To use this feature please enable featureflag `sales_channels` in your medusa backend project.
 * @param id
 * @param options
 */
declare const useAdminDeleteSalesChannel: (id: string, options?: UseMutationOptions<Response<AdminSalesChannelsDeleteRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<_medusajs_medusa.DeleteResponse>, Error, void, unknown>;
/**
 * Remove products from a sales channel
 * @experimental This feature is under development and may change in the future.
 * To use this feature please enable featureflag `sales_channels` in your medusa backend project.
 * @description remove products from a sales channel
 * @param id
 * @param options
 */
declare const useAdminDeleteProductsFromSalesChannel: (id: string, options?: UseMutationOptions<Response<AdminSalesChannelsRes>, Error, AdminDeleteSalesChannelsChannelProductsBatchReq>) => _tanstack_react_query.UseMutationResult<Response<AdminSalesChannelsRes>, Error, AdminDeleteSalesChannelsChannelProductsBatchReq, unknown>;
/**
 * Add products to a sales channel
 * @experimental This feature is under development and may change in the future.
 * To use this feature please enable featureflag `sales_channels` in your medusa backend project.
 * @description Add products to a sales channel
 * @param id
 * @param options
 */
declare const useAdminAddProductsToSalesChannel: (id: string, options?: UseMutationOptions<Response<AdminSalesChannelsRes>, Error, AdminPostSalesChannelsChannelProductsBatchReq>) => _tanstack_react_query.UseMutationResult<Response<AdminSalesChannelsRes>, Error, AdminPostSalesChannelsChannelProductsBatchReq, unknown>;
/**
 * Add a location to a sales channel
 * @experimental This feature is under development and may change in the future.
 * To use this feature please install the stock location in your medusa backend project.
 * @description Add a location to a sales channel
 * @param options
 */
declare const useAdminAddLocationToSalesChannel: (options?: UseMutationOptions<Response<AdminSalesChannelsRes>, Error, {
    sales_channel_id: string;
    location_id: string;
}>) => _tanstack_react_query.UseMutationResult<Response<AdminSalesChannelsRes>, Error, {
    sales_channel_id: string;
    location_id: string;
}, unknown>;
/**
 * Remove a location from a sales channel
 * @experimental This feature is under development and may change in the future.
 * To use this feature please install the stock location in your medusa backend project.
 * @description Remove a location from a sales channel
 * @param options
 */
declare const useAdminRemoveLocationFromSalesChannel: (options?: UseMutationOptions<Response<AdminSalesChannelsRes>, Error, {
    sales_channel_id: string;
    location_id: string;
}>) => _tanstack_react_query.UseMutationResult<Response<AdminSalesChannelsRes>, Error, {
    sales_channel_id: string;
    location_id: string;
}, unknown>;

declare const adminShippingOptionKeys: TQueryKey<"admin_shipping_options", any, string>;
type ShippingOptionQueryKeys = typeof adminShippingOptionKeys;
declare const useAdminShippingOptions: (query?: AdminGetShippingOptionsParams, options?: UseQueryOptionsWrapper<Response<AdminShippingOptionsListRes>, Error, ReturnType<ShippingOptionQueryKeys["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminShippingOptionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly shipping_options?: _medusajs_medusa.ShippingOption[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminShippingOptionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly shipping_options?: _medusajs_medusa.ShippingOption[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminShippingOptionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly shipping_options?: _medusajs_medusa.ShippingOption[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminShippingOptionsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly shipping_options?: _medusajs_medusa.ShippingOption[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminShippingOption: (id: string, options?: UseQueryOptionsWrapper<Response<AdminShippingOptionsRes>, Error, ReturnType<ShippingOptionQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminShippingOptionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly shipping_option?: _medusajs_medusa.ShippingOption | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminShippingOptionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly shipping_option?: _medusajs_medusa.ShippingOption | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminShippingOptionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly shipping_option?: _medusajs_medusa.ShippingOption | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminShippingOptionsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly shipping_option?: _medusajs_medusa.ShippingOption | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminCreateShippingOption: (options?: UseMutationOptions<Response<AdminShippingOptionsRes>, Error, AdminPostShippingOptionsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminShippingOptionsRes>, Error, AdminPostShippingOptionsReq, unknown>;
declare const useAdminUpdateShippingOption: (id: string, options?: UseMutationOptions<Response<AdminShippingOptionsRes>, Error, AdminPostShippingOptionsOptionReq>) => _tanstack_react_query.UseMutationResult<Response<AdminShippingOptionsRes>, Error, AdminPostShippingOptionsOptionReq, unknown>;
declare const useAdminDeleteShippingOption: (id: string, options?: UseMutationOptions) => _tanstack_react_query.UseMutationResult<Response<_medusajs_medusa.DeleteResponse>, unknown, void, unknown>;

declare const adminShippingProfileKeys: TQueryKey<"admin_shippingProfiles", any, string>;
type ShippingProfileQueryKeys = typeof adminShippingProfileKeys;
declare const useAdminShippingProfiles: (options?: UseQueryOptionsWrapper<Response<AdminShippingProfilesListRes>, Error, ReturnType<ShippingProfileQueryKeys["lists"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminShippingProfilesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly shipping_profiles?: _medusajs_medusa.ShippingProfile[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminShippingProfilesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly shipping_profiles?: _medusajs_medusa.ShippingProfile[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminShippingProfilesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly shipping_profiles?: _medusajs_medusa.ShippingProfile[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminShippingProfilesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly shipping_profiles?: _medusajs_medusa.ShippingProfile[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminShippingProfile: (id: string, options?: UseQueryOptionsWrapper<Response<AdminShippingProfilesRes>, Error, ReturnType<ShippingProfileQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminShippingProfilesRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly shipping_profile?: _medusajs_medusa.ShippingProfile | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminShippingProfilesRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly shipping_profile?: _medusajs_medusa.ShippingProfile | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminShippingProfilesRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly shipping_profile?: _medusajs_medusa.ShippingProfile | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminShippingProfilesRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly shipping_profile?: _medusajs_medusa.ShippingProfile | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminCreateShippingProfile: (options?: UseMutationOptions<Response<AdminShippingProfilesRes>, Error, AdminPostShippingProfilesReq>) => _tanstack_react_query.UseMutationResult<Response<AdminShippingProfilesRes>, Error, AdminPostShippingProfilesReq, unknown>;
declare const useAdminUpdateShippingProfile: (id: string, options?: UseMutationOptions<Response<AdminShippingProfilesRes>, Error, AdminPostShippingProfilesReq>) => _tanstack_react_query.UseMutationResult<Response<AdminShippingProfilesRes>, Error, AdminPostShippingProfilesReq, unknown>;
declare const useAdminDeleteShippingProfile: (id: string, options?: UseMutationOptions<Response<AdminDeleteShippingProfileRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<_medusajs_medusa.DeleteResponse>, Error, void, unknown>;

declare const adminStockLocationsKeys: TQueryKey<"admin_stock_locations", any, string>;
type StockLocationsQueryKeys = typeof adminStockLocationsKeys;
declare const useAdminStockLocations: (query?: AdminGetStockLocationsParams, options?: UseQueryOptionsWrapper<Response<AdminStockLocationsListRes>, Error, ReturnType<StockLocationsQueryKeys["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminStockLocationsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly stock_locations?: _medusajs_types.StockLocationExpandedDTO[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminStockLocationsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly stock_locations?: _medusajs_types.StockLocationExpandedDTO[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminStockLocationsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly stock_locations?: _medusajs_types.StockLocationExpandedDTO[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminStockLocationsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly stock_locations?: _medusajs_types.StockLocationExpandedDTO[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminStockLocation: (id: string, options?: UseQueryOptionsWrapper<Response<AdminStockLocationsRes>, Error, ReturnType<StockLocationsQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminStockLocationsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly stock_location?: _medusajs_types.StockLocationExpandedDTO | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminStockLocationsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly stock_location?: _medusajs_types.StockLocationExpandedDTO | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminStockLocationsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly stock_location?: _medusajs_types.StockLocationExpandedDTO | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminStockLocationsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly stock_location?: _medusajs_types.StockLocationExpandedDTO | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminCreateStockLocation: (options?: UseMutationOptions<Response<AdminStockLocationsRes>, Error, AdminPostStockLocationsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminStockLocationsRes>, Error, AdminPostStockLocationsReq, unknown>;
declare const useAdminUpdateStockLocation: (id: string, options?: UseMutationOptions<Response<AdminStockLocationsRes>, Error, AdminPostStockLocationsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminStockLocationsRes>, Error, AdminPostStockLocationsReq, unknown>;
declare const useAdminDeleteStockLocation: (id: string, options?: UseMutationOptions<Response<AdminStockLocationsDeleteRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<_medusajs_types.DeleteResponse>, Error, void, unknown>;

declare const adminStoreKeys: TQueryKey<"admin_store", any, string>;
type StoreQueryKeys = typeof adminStoreKeys;
declare const useAdminStorePaymentProviders: (options?: UseQueryOptionsWrapper<Response<AdminPaymentProvidersList>, Error, ReturnType<StoreQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPaymentProvidersList>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly payment_providers?: _medusajs_medusa.PaymentProvider[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPaymentProvidersList>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly payment_providers?: _medusajs_medusa.PaymentProvider[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPaymentProvidersList>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly payment_providers?: _medusajs_medusa.PaymentProvider[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminPaymentProvidersList>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly payment_providers?: _medusajs_medusa.PaymentProvider[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminStoreTaxProviders: (options?: UseQueryOptionsWrapper<Response<AdminTaxProvidersList>, Error, ReturnType<StoreQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminTaxProvidersList>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly tax_providers?: _medusajs_medusa.TaxProvider[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminTaxProvidersList>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly tax_providers?: _medusajs_medusa.TaxProvider[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminTaxProvidersList>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly tax_providers?: _medusajs_medusa.TaxProvider[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminTaxProvidersList>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly tax_providers?: _medusajs_medusa.TaxProvider[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminStore: (options?: UseQueryOptionsWrapper<Response<AdminExtendedStoresRes>, Error, ReturnType<StoreQueryKeys["details"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminExtendedStoresRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly store?: _medusajs_medusa_dist_types_store.ExtendedStoreDTO | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminExtendedStoresRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly store?: _medusajs_medusa_dist_types_store.ExtendedStoreDTO | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminExtendedStoresRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly store?: _medusajs_medusa_dist_types_store.ExtendedStoreDTO | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminExtendedStoresRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly store?: _medusajs_medusa_dist_types_store.ExtendedStoreDTO | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminUpdateStore: (options?: UseMutationOptions<Response<AdminStoresRes>, Error, AdminPostStoreReq>) => _tanstack_react_query.UseMutationResult<Response<AdminStoresRes>, Error, AdminPostStoreReq, unknown>;
declare const useAdminAddStoreCurrency: (options?: UseMutationOptions<Response<AdminStoresRes>, Error, string>) => _tanstack_react_query.UseMutationResult<Response<AdminStoresRes>, Error, string, unknown>;
declare const useAdminDeleteStoreCurrency: (options?: UseMutationOptions<Response<AdminStoresRes>, Error, string>) => _tanstack_react_query.UseMutationResult<Response<AdminStoresRes>, Error, string, unknown>;

declare const adminSwapKeys: TQueryKey<"admin_swaps", any, string>;
type SwapsQueryKey = typeof adminSwapKeys;
declare const useAdminSwaps: (query?: AdminGetSwapsParams, options?: UseQueryOptionsWrapper<Response<AdminSwapsListRes>, Error, ReturnType<SwapsQueryKey["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminSwapsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly swaps?: _medusajs_medusa.Swap[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminSwapsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly swaps?: _medusajs_medusa.Swap[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminSwapsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly swaps?: _medusajs_medusa.Swap[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminSwapsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly swaps?: _medusajs_medusa.Swap[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminSwap: (id: string, options?: UseQueryOptionsWrapper<Response<AdminSwapsRes>, Error, ReturnType<SwapsQueryKey["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminSwapsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly swap?: _medusajs_medusa.Swap | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminSwapsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly swap?: _medusajs_medusa.Swap | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminSwapsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly swap?: _medusajs_medusa.Swap | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminSwapsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly swap?: _medusajs_medusa.Swap | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminCreateSwap: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderSwapsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderSwapsReq, unknown>;
declare const useAdminCancelSwap: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, string, unknown>;
declare const useAdminFulfillSwap: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderSwapsSwapFulfillmentsReq & {
    swap_id: string;
}>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderSwapsSwapFulfillmentsReq & {
    swap_id: string;
}, unknown>;
declare const useAdminCreateSwapShipment: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderSwapsSwapShipmentsReq & {
    swap_id: string;
}>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderSwapsSwapShipmentsReq & {
    swap_id: string;
}, unknown>;
declare const useAdminProcessSwapPayment: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, string, unknown>;
declare const useAdminCancelSwapFulfillment: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, {
    swap_id: string;
    fulfillment_id: string;
}>) => _tanstack_react_query.UseMutationResult<Response<AdminOrdersRes>, Error, {
    swap_id: string;
    fulfillment_id: string;
}, unknown>;

declare const adminTaxRateKeys: TQueryKey<"admin_tax_rates", any, string>;
type TaxRateQueryKeys = typeof adminTaxRateKeys;
declare const useAdminTaxRates: (query?: AdminGetTaxRatesParams, options?: UseQueryOptionsWrapper<Response<AdminTaxRatesListRes>, Error, ReturnType<TaxRateQueryKeys["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminTaxRatesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly tax_rates?: _medusajs_medusa.TaxRate[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminTaxRatesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly tax_rates?: _medusajs_medusa.TaxRate[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminTaxRatesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly tax_rates?: _medusajs_medusa.TaxRate[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminTaxRatesListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly tax_rates?: _medusajs_medusa.TaxRate[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminTaxRate: (id: string, query?: AdminGetTaxRatesParams, options?: UseQueryOptionsWrapper<Response<AdminTaxRatesRes>, Error, ReturnType<TaxRateQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminTaxRatesRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly tax_rate?: _medusajs_medusa.TaxRate | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminTaxRatesRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly tax_rate?: _medusajs_medusa.TaxRate | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminTaxRatesRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly tax_rate?: _medusajs_medusa.TaxRate | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminTaxRatesRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly tax_rate?: _medusajs_medusa.TaxRate | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminCreateTaxRate: (options?: UseMutationOptions<Response<AdminTaxRatesRes>, Error, AdminPostTaxRatesReq>) => _tanstack_react_query.UseMutationResult<Response<AdminTaxRatesRes>, Error, AdminPostTaxRatesReq, unknown>;
declare const useAdminUpdateTaxRate: (id: string, options?: UseMutationOptions<Response<AdminTaxRatesRes>, Error, AdminPostTaxRatesTaxRateReq>) => _tanstack_react_query.UseMutationResult<Response<AdminTaxRatesRes>, Error, AdminPostTaxRatesTaxRateReq, unknown>;
declare const useAdminDeleteTaxRate: (id: string, options?: UseMutationOptions<Response<AdminTaxRatesDeleteRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<_medusajs_medusa.DeleteResponse>, Error, void, unknown>;
declare const useAdminCreateProductTaxRates: (id: string, options?: UseMutationOptions<Response<AdminTaxRatesRes>, Error, AdminPostTaxRatesTaxRateProductsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminTaxRatesRes>, Error, AdminPostTaxRatesTaxRateProductsReq, unknown>;
declare const useAdminDeleteProductTaxRates: (id: string, options?: UseMutationOptions<Response<AdminTaxRatesRes>, Error, AdminDeleteTaxRatesTaxRateProductsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminTaxRatesRes>, Error, AdminDeleteTaxRatesTaxRateProductsReq, unknown>;
declare const useAdminCreateProductTypeTaxRates: (id: string, options?: UseMutationOptions<Response<AdminTaxRatesRes>, Error, AdminPostTaxRatesTaxRateProductTypesReq>) => _tanstack_react_query.UseMutationResult<Response<AdminTaxRatesRes>, Error, AdminPostTaxRatesTaxRateProductTypesReq, unknown>;
declare const useAdminDeleteProductTypeTaxRates: (id: string, options?: UseMutationOptions<Response<AdminTaxRatesRes>, Error, AdminDeleteTaxRatesTaxRateProductTypesReq>) => _tanstack_react_query.UseMutationResult<Response<AdminTaxRatesRes>, Error, AdminDeleteTaxRatesTaxRateProductTypesReq, unknown>;
declare const useAdminCreateShippingTaxRates: (id: string, options?: UseMutationOptions<Response<AdminTaxRatesRes>, Error, AdminPostTaxRatesTaxRateShippingOptionsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminTaxRatesRes>, Error, AdminPostTaxRatesTaxRateShippingOptionsReq, unknown>;
declare const useAdminDeleteShippingTaxRates: (id: string, options?: UseMutationOptions<Response<AdminTaxRatesRes>, Error, AdminDeleteTaxRatesTaxRateShippingOptionsReq>) => _tanstack_react_query.UseMutationResult<Response<AdminTaxRatesRes>, Error, AdminDeleteTaxRatesTaxRateShippingOptionsReq, unknown>;

declare const useAdminUploadFile: (options?: UseMutationOptions<Response<AdminUploadsRes>, Error, AdminCreateUploadPayload>) => _tanstack_react_query.UseMutationResult<Response<AdminUploadsRes>, Error, AdminCreateUploadPayload, unknown>;
declare const useAdminUploadProtectedFile: (options?: UseMutationOptions<Response<AdminUploadsRes>, Error, AdminCreateUploadPayload>) => _tanstack_react_query.UseMutationResult<Response<AdminUploadsRes>, Error, AdminCreateUploadPayload, unknown>;
declare const useAdminCreatePresignedDownloadUrl: (options?: UseMutationOptions<Response<AdminUploadsDownloadUrlRes>, Error, AdminPostUploadsDownloadUrlReq>) => _tanstack_react_query.UseMutationResult<Response<AdminUploadsDownloadUrlRes>, Error, AdminPostUploadsDownloadUrlReq, unknown>;
declare const useAdminDeleteFile: (options?: UseMutationOptions<Response<AdminDeleteUploadsRes>, Error, AdminDeleteUploadsReq>) => _tanstack_react_query.UseMutationResult<Response<_medusajs_medusa.DeleteResponse>, Error, AdminDeleteUploadsReq, unknown>;

declare const adminUserKeys: TQueryKey<"admin_users", any, string>;
type UserQueryKeys = typeof adminUserKeys;
declare const useAdminUsers: (options?: UseQueryOptionsWrapper<Response<AdminUsersListRes>, Error, ReturnType<UserQueryKeys["lists"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminUsersListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly users?: Omit<_medusajs_medusa.User, "password_hash">[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminUsersListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly users?: Omit<_medusajs_medusa.User, "password_hash">[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminUsersListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly users?: Omit<_medusajs_medusa.User, "password_hash">[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminUsersListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly users?: Omit<_medusajs_medusa.User, "password_hash">[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminUser: (id: string, options?: UseQueryOptionsWrapper<Response<AdminUserRes>, Error, ReturnType<UserQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminUserRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly user?: Omit<_medusajs_medusa.User, "password_hash"> | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminUserRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly user?: Omit<_medusajs_medusa.User, "password_hash"> | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminUserRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly user?: Omit<_medusajs_medusa.User, "password_hash"> | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminUserRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly user?: Omit<_medusajs_medusa.User, "password_hash"> | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

declare const useAdminCreateUser: (options?: UseMutationOptions<Response<AdminUserRes>, Error, AdminCreateUserPayload>) => _tanstack_react_query.UseMutationResult<Response<AdminUserRes>, Error, AdminCreateUserPayload, unknown>;
declare const useAdminUpdateUser: (id: string, options?: UseMutationOptions<Response<AdminUserRes>, Error, AdminUpdateUserPayload>) => _tanstack_react_query.UseMutationResult<Response<AdminUserRes>, Error, AdminUpdateUserPayload, unknown>;
declare const useAdminDeleteUser: (id: string, options?: UseMutationOptions<Response<AdminDeleteUserRes>, Error, void>) => _tanstack_react_query.UseMutationResult<Response<_medusajs_medusa.DeleteResponse>, Error, void, unknown>;
declare const useAdminResetPassword: (options?: UseMutationOptions<Response<AdminUserRes>, Error, AdminResetPasswordRequest>) => _tanstack_react_query.UseMutationResult<Response<AdminUserRes>, Error, AdminResetPasswordRequest, unknown>;
declare const useAdminSendResetPasswordToken: (options?: UseMutationOptions<Response<void>, Error, AdminResetPasswordTokenRequest>) => _tanstack_react_query.UseMutationResult<Response<void>, Error, AdminResetPasswordTokenRequest, unknown>;

declare const adminVariantKeys: TQueryKey<"admin_variants", any, string>;
type VariantQueryKeys = typeof adminVariantKeys;
declare const useAdminVariants: (query?: AdminGetVariantsParams, options?: UseQueryOptionsWrapper<Response<AdminVariantsListRes>, Error, ReturnType<VariantQueryKeys["list"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminVariantsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly variants?: _medusajs_medusa_dist_types_pricing.PricedVariant[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminVariantsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly variants?: _medusajs_medusa_dist_types_pricing.PricedVariant[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminVariantsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly variants?: _medusajs_medusa_dist_types_pricing.PricedVariant[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminVariantsListRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly variants?: _medusajs_medusa_dist_types_pricing.PricedVariant[] | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminVariant: (id: string, query?: AdminGetVariantParams, options?: UseQueryOptionsWrapper<Response<AdminVariantsRes>, Error, ReturnType<VariantQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminVariantsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly variant?: _medusajs_medusa_dist_types_pricing.PricedVariant | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminVariantsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly variant?: _medusajs_medusa_dist_types_pricing.PricedVariant | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminVariantsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly variant?: _medusajs_medusa_dist_types_pricing.PricedVariant | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminVariantsRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly variant?: _medusajs_medusa_dist_types_pricing.PricedVariant | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};
declare const useAdminVariantsInventory: (id: string, options?: UseQueryOptionsWrapper<Response<AdminGetVariantsVariantInventoryRes>, Error, ReturnType<VariantQueryKeys["detail"]>>) => {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminGetVariantsVariantInventoryRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly variant?: _medusajs_medusa.VariantInventory | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminGetVariantsVariantInventoryRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly variant?: _medusajs_medusa.VariantInventory | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminGetVariantsVariantInventoryRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly variant?: _medusajs_medusa.VariantInventory | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly failureReason: Error | null;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isInitialLoading: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Response<AdminGetVariantsVariantInventoryRes>, Error>>;
    readonly remove: () => void;
    readonly fetchStatus: _tanstack_react_query.FetchStatus;
    readonly variant?: _medusajs_medusa.VariantInventory | undefined;
    readonly response?: _medusajs_medusa_js.HTTPResponse | undefined;
};

type FormatVariantPriceParams = {
    variant: ProductVariantInfo;
    region: RegionInfo;
    includeTaxes?: boolean;
    minimumFractionDigits?: number;
    maximumFractionDigits?: number;
    locale?: string;
};
/**
 * Takes a product variant and a region, and converts the variant's price to a localized decimal format
 */
declare const formatVariantPrice: ({ variant, region, includeTaxes, ...rest }: FormatVariantPriceParams) => string;
type ComputeVariantPriceParams = {
    variant: ProductVariantInfo;
    region: RegionInfo;
    includeTaxes?: boolean;
};
/**
 * Takes a product variant and region, and returns the variant price as a decimal number
 * @param params.variant - product variant
 * @param params.region - region
 * @param params.includeTaxes - whether to include taxes or not
 */
declare const computeVariantPrice: ({ variant, region, includeTaxes, }: ComputeVariantPriceParams) => number;
/**
 * Finds the price amount correspoding to the region selected
 * @param variant - the product variant
 * @param region - the region
 * @returns - the price's amount
 */
declare const getVariantPrice: (variant: ProductVariantInfo, region: RegionInfo) => number;
type ComputeAmountParams = {
    amount: number;
    region: RegionInfo;
    includeTaxes?: boolean;
};
/**
 * Takes an amount, a region, and returns the amount as a decimal including or excluding taxes
 */
declare const computeAmount: ({ amount, region, includeTaxes, }: ComputeAmountParams) => number;
type FormatAmountParams = {
    amount: number;
    region: RegionInfo;
    includeTaxes?: boolean;
    minimumFractionDigits?: number;
    maximumFractionDigits?: number;
    locale?: string;
};
/**
 * Takes an amount and a region, and converts the amount to a localized decimal format
 */
declare const formatAmount: ({ amount, region, includeTaxes, ...rest }: FormatAmountParams) => string;

export { CartProvider, MedusaProvider, SessionCartProvider, SessionCartState, adminAuthKeys, adminBatchJobsKeys, adminCollectionKeys, adminCurrenciesKeys, adminCustomerGroupKeys, adminCustomerKeys, adminDiscountKeys, adminDraftOrderKeys, adminGiftCardKeys, adminInventoryItemsKeys, adminInviteKeys, adminNoteKeys, adminNotificationKeys, adminOrderEditsKeys, adminOrderKeys, adminPaymentCollectionQueryKeys, adminPaymentQueryKeys, adminPriceListKeys, adminProductCategoryKeys, adminProductKeys, adminProductTagKeys, adminProductTypeKeys, adminPublishableApiKeysKeys, adminRegionKeys, adminReservationsKeys, adminReturnKeys, adminReturnReasonKeys, adminSalesChannelsKeys, adminShippingOptionKeys, adminShippingProfileKeys, adminStockLocationsKeys, adminStoreKeys, adminSwapKeys, adminTaxRateKeys, adminUserKeys, adminVariantKeys, cartKeys, collectionKeys, computeAmount, computeVariantPrice, customerKeys, formatAmount, formatVariantPrice, generateCartState, getVariantPrice, giftCardKeys, orderEditQueryKeys, orderKeys, paymentCollectionQueryKeys, productKeys, productTagKeys, productTypeKeys, storeProductCategoryKeys, useAddShippingMethodToCart, useAdminAcceptInvite, useAdminAddCustomersToCustomerGroup, useAdminAddDiscountConditionResourceBatch, useAdminAddLocationToSalesChannel, useAdminAddProductsToCategory, useAdminAddProductsToCollection, useAdminAddProductsToSalesChannel, useAdminAddPublishableKeySalesChannelsBatch, useAdminAddShippingMethod, useAdminAddStoreCurrency, useAdminArchiveOrder, useAdminBatchJob, useAdminBatchJobs, useAdminCancelBatchJob, useAdminCancelClaim, useAdminCancelClaimFulfillment, useAdminCancelFulfillment, useAdminCancelOrder, useAdminCancelOrderEdit, useAdminCancelReturn, useAdminCancelSwap, useAdminCancelSwapFulfillment, useAdminCapturePayment, useAdminCollection, useAdminCollections, useAdminCompleteOrder, useAdminConfirmBatchJob, useAdminConfirmOrderEdit, useAdminCreateBatchJob, useAdminCreateClaim, useAdminCreateClaimShipment, useAdminCreateCollection, useAdminCreateCustomer, useAdminCreateCustomerGroup, useAdminCreateDiscount, useAdminCreateDraftOrder, useAdminCreateDynamicDiscountCode, useAdminCreateFulfillment, useAdminCreateGiftCard, useAdminCreateInventoryItem, useAdminCreateInvite, useAdminCreateLocationLevel, useAdminCreateNote, useAdminCreateOrderEdit, useAdminCreatePresignedDownloadUrl, useAdminCreatePriceList, useAdminCreatePriceListPrices, useAdminCreateProduct, useAdminCreateProductCategory, useAdminCreateProductOption, useAdminCreateProductTaxRates, useAdminCreateProductTypeTaxRates, useAdminCreatePublishableApiKey, useAdminCreateRegion, useAdminCreateReservation, useAdminCreateReturnReason, useAdminCreateSalesChannel, useAdminCreateShipment, useAdminCreateShippingOption, useAdminCreateShippingProfile, useAdminCreateShippingTaxRates, useAdminCreateStockLocation, useAdminCreateSwap, useAdminCreateSwapShipment, useAdminCreateTaxRate, useAdminCreateUser, useAdminCreateVariant, useAdminCurrencies, useAdminCustomDelete, useAdminCustomPost, useAdminCustomQuery, useAdminCustomer, useAdminCustomerGroup, useAdminCustomerGroupCustomers, useAdminCustomerGroups, useAdminCustomers, useAdminDeleteCollection, useAdminDeleteCustomerGroup, useAdminDeleteDiscount, useAdminDeleteDiscountConditionResourceBatch, useAdminDeleteDraftOrder, useAdminDeleteDynamicDiscountCode, useAdminDeleteFile, useAdminDeleteGiftCard, useAdminDeleteInventoryItem, useAdminDeleteInvite, useAdminDeleteLocationLevel, useAdminDeleteNote, useAdminDeleteOrderEdit, useAdminDeleteOrderEditItemChange, useAdminDeletePaymentCollection, useAdminDeletePriceList, useAdminDeletePriceListPrices, useAdminDeletePriceListProductPrices, useAdminDeletePriceListProductsPrices, useAdminDeletePriceListVariantPrices, useAdminDeleteProduct, useAdminDeleteProductCategory, useAdminDeleteProductOption, useAdminDeleteProductTaxRates, useAdminDeleteProductTypeTaxRates, useAdminDeleteProductsFromCategory, useAdminDeleteProductsFromSalesChannel, useAdminDeletePublishableApiKey, useAdminDeleteRegion, useAdminDeleteReservation, useAdminDeleteReturnReason, useAdminDeleteSalesChannel, useAdminDeleteSession, useAdminDeleteShippingOption, useAdminDeleteShippingProfile, useAdminDeleteShippingTaxRates, useAdminDeleteStockLocation, useAdminDeleteStoreCurrency, useAdminDeleteTaxRate, useAdminDeleteUser, useAdminDeleteVariant, useAdminDiscount, useAdminDiscountAddRegion, useAdminDiscountCreateCondition, useAdminDiscountRemoveCondition, useAdminDiscountRemoveRegion, useAdminDiscountUpdateCondition, useAdminDiscounts, useAdminDraftOrder, useAdminDraftOrderAddLineItem, useAdminDraftOrderRegisterPayment, useAdminDraftOrderRemoveLineItem, useAdminDraftOrderUpdateLineItem, useAdminDraftOrders, useAdminFulfillClaim, useAdminFulfillSwap, useAdminGetDiscountByCode, useAdminGetDiscountCondition, useAdminGetSession, useAdminGiftCard, useAdminGiftCards, useAdminInventoryItem, useAdminInventoryItemLocationLevels, useAdminInventoryItems, useAdminInvites, useAdminLogin, useAdminMarkPaymentCollectionAsAuthorized, useAdminNote, useAdminNotes, useAdminNotifications, useAdminOrder, useAdminOrderEdit, useAdminOrderEditAddLineItem, useAdminOrderEditDeleteLineItem, useAdminOrderEditUpdateLineItem, useAdminOrderEdits, useAdminOrders, useAdminPayment, useAdminPaymentCollection, useAdminPaymentsCapturePayment, useAdminPaymentsRefundPayment, useAdminPriceList, useAdminPriceListProducts, useAdminPriceLists, useAdminProcessSwapPayment, useAdminProduct, useAdminProductCategories, useAdminProductCategory, useAdminProductTagUsage, useAdminProductTags, useAdminProductTypes, useAdminProducts, useAdminPublishableApiKey, useAdminPublishableApiKeySalesChannels, useAdminPublishableApiKeys, useAdminReceiveReturn, useAdminRefundPayment, useAdminRegion, useAdminRegionAddCountry, useAdminRegionAddFulfillmentProvider, useAdminRegionAddPaymentProvider, useAdminRegionDeleteFulfillmentProvider, useAdminRegionDeletePaymentProvider, useAdminRegionFulfillmentOptions, useAdminRegionRemoveCountry, useAdminRegions, useAdminRemoveCustomersFromCustomerGroup, useAdminRemoveLocationFromSalesChannel, useAdminRemoveProductsFromCollection, useAdminRemovePublishableKeySalesChannelsBatch, useAdminRequestOrderEditConfirmation, useAdminRequestReturn, useAdminResendInvite, useAdminResendNotification, useAdminReservation, useAdminReservations, useAdminResetPassword, useAdminReturnReason, useAdminReturnReasons, useAdminReturns, useAdminRevokePublishableApiKey, useAdminSalesChannel, useAdminSalesChannels, useAdminSendResetPasswordToken, useAdminShippingOption, useAdminShippingOptions, useAdminShippingProfile, useAdminShippingProfiles, useAdminStockLocation, useAdminStockLocations, useAdminStore, useAdminStorePaymentProviders, useAdminStoreTaxProviders, useAdminSwap, useAdminSwaps, useAdminTaxRate, useAdminTaxRates, useAdminUpdateClaim, useAdminUpdateCollection, useAdminUpdateCurrency, useAdminUpdateCustomer, useAdminUpdateCustomerGroup, useAdminUpdateDiscount, useAdminUpdateDraftOrder, useAdminUpdateGiftCard, useAdminUpdateInventoryItem, useAdminUpdateLocationLevel, useAdminUpdateNote, useAdminUpdateOrder, useAdminUpdateOrderEdit, useAdminUpdatePaymentCollection, useAdminUpdatePriceList, useAdminUpdateProduct, useAdminUpdateProductCategory, useAdminUpdateProductOption, useAdminUpdatePublishableApiKey, useAdminUpdateRegion, useAdminUpdateReservation, useAdminUpdateReturnReason, useAdminUpdateSalesChannel, useAdminUpdateShippingOption, useAdminUpdateShippingProfile, useAdminUpdateStockLocation, useAdminUpdateStore, useAdminUpdateTaxRate, useAdminUpdateUser, useAdminUpdateVariant, useAdminUploadFile, useAdminUploadProtectedFile, useAdminUser, useAdminUsers, useAdminVariant, useAdminVariants, useAdminVariantsInventory, useAuthorizePaymentSession, useAuthorizePaymentSessionsBatch, useCart, useCartOrder, useCartShippingOptions, useCartSwap, useCollection, useCollections, useCompleteCart, useCompleteOrderEdit, useCreateCart, useCreateCustomer, useCreateLineItem, useCreatePaymentSession, useCreateReturn, useCreateSwap, useCustomerOrders, useDeclineOrderEdit, useDeleteLineItem, useDeletePaymentSession, useGetCart, useGiftCard, useGrantOrderAccess, useManageMultiplePaymentSessions, useManagePaymentSession, useMeCustomer, useMedusa, useOrder, useOrderEdit, useOrders, usePaymentCollection, usePaymentCollectionRefreshPaymentSession, useProduct, useProductCategories, useProductCategory, useProductTags, useProductTypes, useProducts, useRefreshPaymentSession, useRegion, useRegions, useRequestOrderAccess, useReturnReason, useReturnReasons, useSessionCart, useSetPaymentSession, useShippingOptions, useStartCheckout, useUpdateCart, useUpdateLineItem, useUpdateMe, useUpdatePaymentSession };
