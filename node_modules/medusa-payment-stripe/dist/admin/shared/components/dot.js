"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var clsx_1 = __importDefault(require("clsx"));
var StatusIndicator = function (_a) {
    var title = _a.title, _b = _a.variant, variant = _b === void 0 ? "success" : _b, className = _a.className, props = __rest(_a, ["title", "variant", "className"]);
    var dotClass = (0, clsx_1.default)({
        "bg-teal-50": variant === "success",
        "bg-rose-50": variant === "danger",
        "bg-yellow-50": variant === "warning",
    });
    return ((0, jsx_runtime_1.jsxs)("div", __assign({ className: (0, clsx_1.default)("inter-small-regular flex items-center", className, {
            "hover:bg-grey-5 cursor-pointer": !!props.onClick,
        }) }, props, { children: [(0, jsx_runtime_1.jsx)("div", { className: (0, clsx_1.default)("h-1.5 w-1.5 self-center rounded-full", dotClass) }), title && (0, jsx_runtime_1.jsx)("span", __assign({ className: "ml-2" }, { children: title }))] })));
};
exports.default = StatusIndicator;
