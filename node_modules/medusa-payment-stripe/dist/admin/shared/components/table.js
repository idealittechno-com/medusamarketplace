"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var react_table_1 = require("@tanstack/react-table");
var moment_1 = __importDefault(require("moment"));
var badge_1 = __importDefault(require("./badge"));
var dot_1 = __importDefault(require("./dot"));
var medusa_react_1 = require("medusa-react");
var link_1 = __importDefault(require("../icons/link"));
var STRIPE_DASHBOARD_URL = "https://dashboard.stripe.com";
var capitalize = function (string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
};
var riskScoreToStatusMapper = function (riskScore) {
    if (!riskScore) {
        return "default";
    }
    switch (true) {
        case riskScore <= 15:
            return "success";
        case 15 < riskScore && riskScore <= 75:
            return "warning";
        case 75 < riskScore:
            return "danger";
        default:
            return "default";
    }
};
var columns = [
    {
        id: "intent",
        header: function () { return (0, jsx_runtime_1.jsx)("div", __assign({ className: "flex items-center text-left" }, { children: "Intent" })); },
        accessorFn: function (row) { return row.id; },
        cell: function (_a) {
            var row = _a.row;
            return ((0, jsx_runtime_1.jsxs)("div", __assign({ className: "text-violet-60 flex" }, { children: [(0, jsx_runtime_1.jsx)("a", __assign({ className: "max-w-[100px] truncate text-blue-500", href: "".concat(STRIPE_DASHBOARD_URL, "/payments/").concat(row.original.id), target: "_blank", rel: "noopener noreferrer" }, { children: row.original.id })), (0, jsx_runtime_1.jsx)(link_1.default, {})] })));
        },
    },
    {
        id: "payment",
        header: function () { return (0, jsx_runtime_1.jsx)("div", __assign({ className: "flex items-center text-right" }, { children: "Payment" })); },
        accessorFn: function (row) { return row.amount; },
        cell: function (_a) {
            var row = _a.row;
            return ((0, jsx_runtime_1.jsx)("div", __assign({ className: "flex flex-col gap-y-1 " }, { children: (0, jsx_runtime_1.jsxs)("p", __assign({ className: "text-gray-900" }, { children: [(0, medusa_react_1.formatAmount)({
                            amount: row.original.amount,
                            region: row.original.region,
                        }), " "] })) })));
        },
    },
    {
        id: "created",
        header: function () { return (0, jsx_runtime_1.jsx)("div", __assign({ className: " flex items-center" }, { children: "Created" })); },
        accessorFn: function (row) { return row.created; },
        cell: function (_a) {
            var row = _a.row;
            return ((0, jsx_runtime_1.jsx)("div", __assign({ className: "flex flex-col gap-y-1 " }, { children: (0, moment_1.default)(new Date(row.original.created * 1000)).format("MMM D, YYYY") })));
        },
    },
    {
        id: "payment_type",
        header: function () { return (0, jsx_runtime_1.jsx)("div", __assign({ className: " flex items-center" }, { children: "Payment Type" })); },
        accessorFn: function (row) { return row.created; },
        cell: function (_a) {
            var row = _a.row;
            return ((0, jsx_runtime_1.jsx)("div", __assign({ className: "flex flex-col gap-y-1 " }, { children: (0, jsx_runtime_1.jsx)("p", __assign({ className: "text-gray-900" }, { children: capitalize(row.original.type) })) })));
        },
    },
    {
        id: "fraud_score",
        header: function () { return (0, jsx_runtime_1.jsx)("div", __assign({ className: "flex items-center" }, { children: "Risk Evaluation" })); },
        accessorFn: function (row) { return row.risk_score; },
        cell: function (_a) {
            var row = _a.row;
            var riskLevel = row.original.risk_level;
            var riskScore = row.original.risk_score;
            return ((0, jsx_runtime_1.jsx)("div", __assign({ className: "flex flex-col gap-y-1" }, { children: !row.original.risk_level ? ("N/A") : ((0, jsx_runtime_1.jsx)(badge_1.default, { children: (0, jsx_runtime_1.jsx)(dot_1.default, { title: "".concat(capitalize(riskLevel), " - ").concat(riskScore), variant: riskScoreToStatusMapper(riskScore) }) })) })));
        },
    },
];
var Table = function (_a) {
    var payments = _a.payments;
    var table = (0, react_table_1.useReactTable)({
        data: payments,
        columns: columns,
        getCoreRowModel: (0, react_table_1.getCoreRowModel)(),
    });
    return ((0, jsx_runtime_1.jsxs)("table", __assign({ className: "w-full" }, { children: [(0, jsx_runtime_1.jsx)("thead", __assign({ className: "border-y border-gray-200" }, { children: table.getHeaderGroups().map(function (headerGroup) { return ((0, jsx_runtime_1.jsx)("tr", { children: headerGroup.headers.map(function (header) { return ((0, jsx_runtime_1.jsx)("th", __assign({ className: "py-4 text-[12px] font-semibold text-gray-500 first:pl-8 last:pr-8" }, { children: header.isPlaceholder
                            ? null
                            : (0, react_table_1.flexRender)(header.column.columnDef.header, header.getContext()) }), header.id)); }) }, headerGroup.id)); }) })), (0, jsx_runtime_1.jsx)("tbody", { children: table.getRowModel().rows.map(function (row) { return ((0, jsx_runtime_1.jsx)("tr", __assign({ className: "border-b border-gray-200" }, { children: row.getVisibleCells().map(function (cell) { return ((0, jsx_runtime_1.jsx)("td", __assign({ className: "py-4 text-[12px] leading-5 first:pl-8 last:pr-8" }, { children: (0, react_table_1.flexRender)(cell.column.columnDef.cell, cell.getContext()) }), cell.id)); }) }), row.id)); }) })] })));
};
exports.default = Table;
