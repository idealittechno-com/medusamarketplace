"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var medusa_1 = require("@medusajs/medusa");
var os_1 = require("os");
var utils_1 = require("../utils");
var container_1 = require("../__fixtures__/container");
var data_1 = require("../__fixtures__/data");
describe("Utils", function () {
    afterEach(function () {
        jest.clearAllMocks();
    });
    describe("isPaymentCollection", function () {
        it("should return return true if starts with paycol otherwise return false", function () {
            var result = (0, utils_1.isPaymentCollection)("paycol_test");
            expect(result).toBeTruthy();
            result = (0, utils_1.isPaymentCollection)("nopaycol_test");
            expect(result).toBeFalsy();
        });
    });
    describe("buildError", function () {
        it("should return the appropriate error message", function () {
            var event = "test_event";
            var error = {
                code: medusa_1.PostgresError.SERIALIZATION_FAILURE,
                detail: "some details",
            };
            var message = (0, utils_1.buildError)(event, error);
            expect(message).toBe("Stripe webhook ".concat(event, " handle failed. This can happen when this webhook is triggered during a cart completion and can be ignored. This event should be retried automatically.").concat(os_1.EOL).concat(error.detail));
            event = "test_event";
            error = {
                code: "409",
                detail: "some details",
            };
            message = (0, utils_1.buildError)(event, error);
            expect(message).toBe("Stripe webhook ".concat(event, " handle failed.").concat(os_1.EOL).concat(error.detail));
            event = "test_event";
            error = {
                code: "",
                detail: "some details",
            };
            message = (0, utils_1.buildError)(event, error);
            expect(message).toBe("Stripe webhook ".concat(event, " handling failed").concat(os_1.EOL).concat(error.detail));
        });
    });
    describe("handlePaymentHook", function () {
        describe("on event type payment_intent.succeeded", function () {
            describe("in a payment context", function () {
                it("should complete the cart on non existing order", function () { return __awaiter(void 0, void 0, void 0, function () {
                    var event, paymentIntent, orderService, cartCompletionStrategy, idempotencyKeyService, cartService;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                event = { id: "event", type: "payment_intent.succeeded" };
                                paymentIntent = {
                                    id: data_1.paymentIntentId,
                                    metadata: { cart_id: data_1.nonExistingCartId },
                                };
                                return [4 /*yield*/, (0, utils_1.handlePaymentHook)({ event: event, container: container_1.container, paymentIntent: paymentIntent })];
                            case 1:
                                _a.sent();
                                orderService = container_1.container.resolve("orderService");
                                cartCompletionStrategy = container_1.container.resolve("cartCompletionStrategy");
                                idempotencyKeyService = container_1.container.resolve("idempotencyKeyService");
                                cartService = container_1.container.resolve("cartService");
                                expect(orderService.retrieveByCartId).toHaveBeenCalled();
                                expect(orderService.retrieveByCartId).toHaveBeenCalledWith(paymentIntent.metadata.cart_id);
                                expect(idempotencyKeyService.retrieve).toHaveBeenCalled();
                                expect(idempotencyKeyService.retrieve).toHaveBeenCalledWith({
                                    request_path: "/stripe/hooks",
                                    idempotency_key: event.id,
                                });
                                expect(idempotencyKeyService.create).toHaveBeenCalled();
                                expect(idempotencyKeyService.create).toHaveBeenCalledWith({
                                    request_path: "/stripe/hooks",
                                    idempotency_key: event.id,
                                });
                                expect(cartService.retrieve).toHaveBeenCalled();
                                expect(cartService.retrieve).toHaveBeenCalledWith(paymentIntent.metadata.cart_id, { select: ["context"] });
                                expect(cartCompletionStrategy.complete).toHaveBeenCalled();
                                expect(cartCompletionStrategy.complete).toHaveBeenCalledWith(paymentIntent.metadata.cart_id, {}, { id: undefined });
                                return [2 /*return*/];
                        }
                    });
                }); });
                it("should not try to complete the cart on existing order", function () { return __awaiter(void 0, void 0, void 0, function () {
                    var event, paymentIntent, orderService, cartCompletionStrategy, idempotencyKeyService, cartService;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                event = { id: "event", type: "payment_intent.succeeded" };
                                paymentIntent = {
                                    id: data_1.paymentIntentId,
                                    metadata: { cart_id: data_1.existingCartId },
                                };
                                return [4 /*yield*/, (0, utils_1.handlePaymentHook)({ event: event, container: container_1.container, paymentIntent: paymentIntent })];
                            case 1:
                                _a.sent();
                                orderService = container_1.container.resolve("orderService");
                                cartCompletionStrategy = container_1.container.resolve("cartCompletionStrategy");
                                idempotencyKeyService = container_1.container.resolve("idempotencyKeyService");
                                cartService = container_1.container.resolve("cartService");
                                expect(orderService.retrieveByCartId).toHaveBeenCalled();
                                expect(orderService.retrieveByCartId).toHaveBeenCalledWith(paymentIntent.metadata.cart_id);
                                expect(idempotencyKeyService.retrieve).not.toHaveBeenCalled();
                                expect(idempotencyKeyService.create).not.toHaveBeenCalled();
                                expect(cartService.retrieve).not.toHaveBeenCalled();
                                expect(cartCompletionStrategy.complete).not.toHaveBeenCalled();
                                return [2 /*return*/];
                        }
                    });
                }); });
                it("should capture the payment if not already captured", function () { return __awaiter(void 0, void 0, void 0, function () {
                    var event, paymentIntent, orderService;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                event = { id: "event", type: "payment_intent.succeeded" };
                                paymentIntent = {
                                    id: data_1.paymentIntentId,
                                    metadata: { cart_id: data_1.existingCartId },
                                };
                                return [4 /*yield*/, (0, utils_1.handlePaymentHook)({ event: event, container: container_1.container, paymentIntent: paymentIntent })];
                            case 1:
                                _a.sent();
                                orderService = container_1.container.resolve("orderService");
                                expect(orderService.retrieveByCartId).toHaveBeenCalled();
                                expect(orderService.retrieveByCartId).toHaveBeenCalledWith(paymentIntent.metadata.cart_id);
                                expect(orderService.capturePayment).toHaveBeenCalled();
                                expect(orderService.capturePayment).toHaveBeenCalledWith(data_1.orderIdForExistingCartId);
                                return [2 /*return*/];
                        }
                    });
                }); });
                it("should not capture the payment if already captured", function () { return __awaiter(void 0, void 0, void 0, function () {
                    var event, paymentIntent, orderService;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                event = { id: "event", type: "payment_intent.succeeded" };
                                paymentIntent = {
                                    id: data_1.paymentIntentId,
                                    metadata: { cart_id: data_1.existingCartIdWithCapturedStatus },
                                };
                                return [4 /*yield*/, (0, utils_1.handlePaymentHook)({ event: event, container: container_1.container, paymentIntent: paymentIntent })];
                            case 1:
                                _a.sent();
                                orderService = container_1.container.resolve("orderService");
                                expect(orderService.retrieveByCartId).toHaveBeenCalled();
                                expect(orderService.retrieveByCartId).toHaveBeenCalledWith(paymentIntent.metadata.cart_id);
                                expect(orderService.capturePayment).not.toHaveBeenCalled();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
            describe("in a payment collection context", function () {
                it("should capture the payment collection if not already captured", function () { return __awaiter(void 0, void 0, void 0, function () {
                    var event, paymentIntent, paymentCollectionService;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                event = { id: "event", type: "payment_intent.succeeded" };
                                paymentIntent = {
                                    id: data_1.paymentIntentId,
                                    metadata: { resource_id: data_1.existingResourceNotCapturedId },
                                };
                                return [4 /*yield*/, (0, utils_1.handlePaymentHook)({ event: event, container: container_1.container, paymentIntent: paymentIntent })];
                            case 1:
                                _a.sent();
                                paymentCollectionService = container_1.container.resolve("paymentCollectionService");
                                expect(paymentCollectionService.retrieve).toHaveBeenCalled();
                                expect(paymentCollectionService.retrieve).toHaveBeenCalledWith(paymentIntent.metadata.resource_id, { relations: ["payments"] });
                                expect(paymentCollectionService.capture).toHaveBeenCalled();
                                expect(paymentCollectionService.capture).toHaveBeenCalledWith(data_1.paymentId);
                                return [2 /*return*/];
                        }
                    });
                }); });
                it("should not capture the payment collection if already captured", function () { return __awaiter(void 0, void 0, void 0, function () {
                    var event, paymentIntent, paymentCollectionService;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                event = { id: "event", type: "payment_intent.succeeded" };
                                paymentIntent = {
                                    id: data_1.paymentIntentId,
                                    metadata: { resource_id: data_1.existingResourceId },
                                };
                                return [4 /*yield*/, (0, utils_1.handlePaymentHook)({ event: event, container: container_1.container, paymentIntent: paymentIntent })];
                            case 1:
                                _a.sent();
                                paymentCollectionService = container_1.container.resolve("paymentCollectionService");
                                expect(paymentCollectionService.retrieve).toHaveBeenCalled();
                                expect(paymentCollectionService.retrieve).toHaveBeenCalledWith(paymentIntent.metadata.resource_id, { relations: ["payments"] });
                                expect(paymentCollectionService.capture).not.toHaveBeenCalled();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
        });
        describe("on event type payment_intent.amount_capturable_updated", function () {
            it("should complete the cart on non existing order", function () { return __awaiter(void 0, void 0, void 0, function () {
                var event, paymentIntent, orderService, cartCompletionStrategy, idempotencyKeyService, cartService;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            event = {
                                id: "event",
                                type: "payment_intent.amount_capturable_updated",
                            };
                            paymentIntent = {
                                id: data_1.paymentIntentId,
                                metadata: { cart_id: data_1.nonExistingCartId },
                            };
                            return [4 /*yield*/, (0, utils_1.handlePaymentHook)({ event: event, container: container_1.container, paymentIntent: paymentIntent })];
                        case 1:
                            _a.sent();
                            orderService = container_1.container.resolve("orderService");
                            cartCompletionStrategy = container_1.container.resolve("cartCompletionStrategy");
                            idempotencyKeyService = container_1.container.resolve("idempotencyKeyService");
                            cartService = container_1.container.resolve("cartService");
                            expect(orderService.retrieveByCartId).toHaveBeenCalled();
                            expect(orderService.retrieveByCartId).toHaveBeenCalledWith(paymentIntent.metadata.cart_id);
                            expect(idempotencyKeyService.retrieve).toHaveBeenCalled();
                            expect(idempotencyKeyService.retrieve).toHaveBeenCalledWith({
                                request_path: "/stripe/hooks",
                                idempotency_key: event.id,
                            });
                            expect(idempotencyKeyService.create).toHaveBeenCalled();
                            expect(idempotencyKeyService.create).toHaveBeenCalledWith({
                                request_path: "/stripe/hooks",
                                idempotency_key: event.id,
                            });
                            expect(cartService.retrieve).toHaveBeenCalled();
                            expect(cartService.retrieve).toHaveBeenCalledWith(paymentIntent.metadata.cart_id, { select: ["context"] });
                            expect(cartCompletionStrategy.complete).toHaveBeenCalled();
                            expect(cartCompletionStrategy.complete).toHaveBeenCalledWith(paymentIntent.metadata.cart_id, {}, { id: undefined });
                            return [2 /*return*/];
                    }
                });
            }); });
            it("should not try to complete the cart on existing order", function () { return __awaiter(void 0, void 0, void 0, function () {
                var event, paymentIntent, orderService, cartCompletionStrategy, idempotencyKeyService, cartService;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            event = {
                                id: "event",
                                type: "payment_intent.amount_capturable_updated",
                            };
                            paymentIntent = {
                                id: data_1.paymentIntentId,
                                metadata: { cart_id: data_1.existingCartId },
                            };
                            return [4 /*yield*/, (0, utils_1.handlePaymentHook)({ event: event, container: container_1.container, paymentIntent: paymentIntent })];
                        case 1:
                            _a.sent();
                            orderService = container_1.container.resolve("orderService");
                            cartCompletionStrategy = container_1.container.resolve("cartCompletionStrategy");
                            idempotencyKeyService = container_1.container.resolve("idempotencyKeyService");
                            cartService = container_1.container.resolve("cartService");
                            expect(orderService.retrieveByCartId).toHaveBeenCalled();
                            expect(orderService.retrieveByCartId).toHaveBeenCalledWith(paymentIntent.metadata.cart_id);
                            expect(idempotencyKeyService.retrieve).not.toHaveBeenCalled();
                            expect(idempotencyKeyService.create).not.toHaveBeenCalled();
                            expect(cartService.retrieve).not.toHaveBeenCalled();
                            expect(cartCompletionStrategy.complete).not.toHaveBeenCalled();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        describe("on event type payment_intent.payment_failed", function () {
            it("should log the error", function () { return __awaiter(void 0, void 0, void 0, function () {
                var event, paymentIntent, logger;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            event = { id: "event", type: "payment_intent.payment_failed" };
                            paymentIntent = {
                                id: data_1.paymentIntentId,
                                metadata: { cart_id: data_1.nonExistingCartId },
                                last_payment_error: { message: "error message" },
                            };
                            return [4 /*yield*/, (0, utils_1.handlePaymentHook)({ event: event, container: container_1.container, paymentIntent: paymentIntent })];
                        case 1:
                            _a.sent();
                            logger = container_1.container.resolve("logger");
                            expect(logger.error).toHaveBeenCalled();
                            expect(logger.error).toHaveBeenCalledWith("The payment of the payment intent ".concat(paymentIntent.id, " has failed").concat(os_1.EOL).concat(paymentIntent.last_payment_error.message));
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,