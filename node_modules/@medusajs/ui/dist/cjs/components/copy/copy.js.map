{"version":3,"file":"copy.js","sourceRoot":"","sources":["../../../../src/components/copy/copy.tsx"],"names":[],"mappings":";AAAA,YAAY,CAAA;;;;AAEZ,kDAA8C;AAC9C,qCAAiC;AACjC,2CAAkE;AAClE,qDAA2C;AAC3C,kFAAoC;AACpC,uDAAuC;AAOvC,MAAM,IAAI,GAAG,eAAK,CAAC,UAAU,CAG3B,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,EAAE,GAAG,EAAE,EAAE;IACrE,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAA;IACvC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAA;IACvC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,IAAA,gBAAQ,EAAC,MAAM,CAAC,CAAA;IAExC,MAAM,eAAe,GAAG,GAAG,EAAE;QAC3B,OAAO,CAAC,IAAI,CAAC,CAAA;QACb,IAAA,2BAAI,EAAC,OAAO,CAAC,CAAA;QAEb,UAAU,CAAC,GAAG,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,CAAA;QAChB,CAAC,EAAE,IAAI,CAAC,CAAA;IACV,CAAC,CAAA;IAED,eAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,IAAI,IAAI,EAAE;YACR,OAAO,CAAC,QAAQ,CAAC,CAAA;YACjB,OAAM;SACP;QAED,UAAU,CAAC,GAAG,EAAE;YACd,OAAO,CAAC,MAAM,CAAC,CAAA;QACjB,CAAC,EAAE,GAAG,CAAC,CAAA;IACT,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAA;IAEV,MAAM,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,iBAAI,CAAC,CAAC,CAAC,QAAQ,CAAA;IAE3C,OAAO,CACL,8BAAC,iBAAO,IAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,IAAI,IAAI,EAAE,YAAY,EAAE,OAAO;QAC/D,8BAAC,SAAS,IACR,GAAG,EAAE,GAAG,gBACG,mBAAmB,EAC9B,IAAI,EAAC,QAAQ,EACb,SAAS,EAAE,IAAA,SAAG,EAAC,+BAA+B,EAAE,SAAS,CAAC,EAC1D,OAAO,EAAE,eAAe,KACpB,KAAK,IAER,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,8BAAC,wBAAgB,OAAG,CAAC,CAAC,CAAC,8BAAC,sBAAc,OAAG,CAC7D,CACJ,CACX,CAAA;AACH,CAAC,CAAC,CAAA;AAGO,oBAAI;AAFb,IAAI,CAAC,WAAW,GAAG,MAAM,CAAA","sourcesContent":["\"use client\"\n\nimport { Tooltip } from \"@/components/tooltip\"\nimport { clx } from \"@/utils/clx\"\nimport { CheckCircleSolid, SquareTwoStack } from \"@medusajs/icons\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport copy from \"copy-to-clipboard\"\nimport React, { useState } from \"react\"\n\ntype CopyProps = {\n  content: string\n  asChild?: boolean\n}\n\nconst Copy = React.forwardRef<\n  HTMLButtonElement,\n  React.HTMLAttributes<HTMLButtonElement> & CopyProps\n>(({ children, className, content, asChild = false, ...props }, ref) => {\n  const [done, setDone] = useState(false)\n  const [open, setOpen] = useState(false)\n  const [text, setText] = useState(\"Copy\")\n\n  const copyToClipboard = () => {\n    setDone(true)\n    copy(content)\n\n    setTimeout(() => {\n      setDone(false)\n    }, 2000)\n  }\n\n  React.useEffect(() => {\n    if (done) {\n      setText(\"Copied\")\n      return\n    }\n\n    setTimeout(() => {\n      setText(\"Copy\")\n    }, 500)\n  }, [done])\n\n  const Component = asChild ? Slot : \"button\"\n\n  return (\n    <Tooltip content={text} open={done || open} onOpenChange={setOpen}>\n      <Component\n        ref={ref}\n        aria-label=\"Copy code snippet\"\n        type=\"button\"\n        className={clx(\"text-ui-code-icon h-fit w-fit\", className)}\n        onClick={copyToClipboard}\n        {...props}\n      >\n        {children ? children : done ? <CheckCircleSolid /> : <SquareTwoStack />}\n      </Component>\n    </Tooltip>\n  )\n})\nCopy.displayName = \"Copy\"\n\nexport { Copy }\n"]}