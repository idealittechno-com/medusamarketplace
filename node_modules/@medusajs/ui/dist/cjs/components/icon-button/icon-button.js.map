{"version":3,"file":"icon-button.js","sourceRoot":"","sources":["../../../../src/components/icon-button/icon-button.tsx"],"names":[],"mappings":";;;;AAAA,2CAAyC;AACzC,qDAA2C;AAC3C,uEAA4D;AAC5D,qDAA8B;AAE9B,qCAAiC;AAEjC,MAAM,kBAAkB,GAAG,IAAA,8BAAG,EAC5B,IAAA,SAAG,EACD,8GAA8G,EAC9G,+GAA+G,CAChH,EACD;IACE,QAAQ,EAAE;QACR,OAAO,EAAE;YACP,OAAO,EAAE,IAAA,SAAG,EACV,6FAA6F,EAC7F,4EAA4E,EAC5E,kFAAkF,EAClF,oCAAoC,EACpC,iDAAiD,CAClD;YACD,WAAW,EAAE,IAAA,SAAG,EACd,4CAA4C,EAC5C,sCAAsC,EACtC,yCAAyC,EACzC,wDAAwD,EACxD,gDAAgD,CACjD;SACF;QACD,IAAI,EAAE;YACJ,IAAI,EAAE,eAAe;YACrB,KAAK,EAAE,iBAAiB;YACxB,MAAM,EAAE,iBAAiB;SAC1B;KACF;IACD,eAAe,EAAE;QACf,OAAO,EAAE,SAAS;QAClB,IAAI,EAAE,MAAM;KACb;CACF,CACF,CAAA;AA+DoB,gDAAkB;AAtDvC,MAAM,UAAU,GAAG,KAAK,CAAC,UAAU,CACjC,CACE,EACE,OAAO,GAAG,SAAS,EACnB,IAAI,GAAG,MAAM,EACb,OAAO,GAAG,KAAK,EACf,SAAS,EACT,QAAQ,EACR,SAAS,GAAG,KAAK,EACjB,QAAQ,EACR,GAAG,KAAK,EACT,EACD,GAAG,EACH,EAAE;IACF,MAAM,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,iBAAI,CAAC,CAAC,CAAC,QAAQ,CAAA;IAE3C;;;;OAIG;IACH,MAAM,WAAW,GAAG,GAAG,EAAE;QACvB,IAAI,SAAS,EAAE;YACb,OAAO,CACL,8BAAM,SAAS,EAAC,qBAAqB;gBACnC,6BACE,SAAS,EAAE,IAAA,SAAG,EACZ,gFAAgF,CACjF;oBAED,oBAAC,eAAO,IAAC,SAAS,EAAC,cAAc,GAAG,CAChC;gBACL,QAAQ,CACJ,CACR,CAAA;SACF;QAED,OAAO,QAAQ,CAAA;IACjB,CAAC,CAAA;IAED,OAAO,CACL,oBAAC,SAAS,IACR,GAAG,EAAE,GAAG,KACJ,KAAK,EACT,SAAS,EAAE,IAAA,SAAG,EAAC,kBAAkB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,SAAS,CAAC,EAChE,QAAQ,EAAE,QAAQ,IAAI,SAAS,IAE9B,WAAW,EAAE,CACJ,CACb,CAAA;AACH,CAAC,CACF,CAAA;AAGQ,gCAAU;AAFnB,UAAU,CAAC,WAAW,GAAG,YAAY,CAAA","sourcesContent":["import { Spinner } from \"@medusajs/icons\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport * as React from \"react\"\n\nimport { clx } from \"@/utils/clx\"\n\nconst iconButtonVariants = cva(\n  clx(\n    \"transition-fg relative inline-flex w-fit items-center justify-center overflow-hidden rounded-md outline-none\",\n    \"disabled:bg-ui-bg-disabled disabled:shadow-buttons-neutral disabled:text-ui-fg-disabled disabled:after:hidden\"\n  ),\n  {\n    variants: {\n      variant: {\n        primary: clx(\n          \"shadow-buttons-neutral text-ui-fg-subtle bg-ui-button-neutral after:button-neutral-gradient\",\n          \"hover:bg-ui-button-neutral-hover hover:after:button-neutral-hover-gradient\",\n          \"active:bg-ui-button-neutral-pressed active:after:button-neutral-pressed-gradient\",\n          \"focus:shadow-buttons-neutral-focus\",\n          \"after:absolute after:inset-0 after:content-['']\"\n        ),\n        transparent: clx(\n          \"text-ui-fg-subtle bg-ui-button-transparent\",\n          \"hover:bg-ui-button-transparent-hover\",\n          \"active:bg-ui-button-transparent-pressed\",\n          \"focus:shadow-buttons-neutral-focus focus:bg-ui-bg-base\",\n          \"disabled:!bg-transparent disabled:!shadow-none\"\n        ),\n      },\n      size: {\n        base: \"h-8 w-8 p-1.5\",\n        large: \"h-10 w-10 p-2.5\",\n        xlarge: \"h-12 w-12 p-3.5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"primary\",\n      size: \"base\",\n    },\n  }\n)\n\ninterface IconButtonProps\n  extends React.ComponentPropsWithoutRef<\"button\">,\n    VariantProps<typeof iconButtonVariants> {\n  asChild?: boolean\n  isLoading?: boolean\n}\n\nconst IconButton = React.forwardRef<HTMLButtonElement, IconButtonProps>(\n  (\n    {\n      variant = \"primary\",\n      size = \"base\",\n      asChild = false,\n      className,\n      children,\n      isLoading = false,\n      disabled,\n      ...props\n    },\n    ref\n  ) => {\n    const Component = asChild ? Slot : \"button\"\n\n    /**\n     * In the case of a button where asChild is true, and isLoading is true, we ensure that\n     * only on element is passed as a child to the Slot component. This is because the Slot\n     * component only accepts a single child.\n     */\n    const renderInner = () => {\n      if (isLoading) {\n        return (\n          <span className=\"pointer-events-none\">\n            <div\n              className={clx(\n                \"bg-ui-bg-disabled absolute inset-0 flex items-center justify-center rounded-md\"\n              )}\n            >\n              <Spinner className=\"animate-spin\" />\n            </div>\n            {children}\n          </span>\n        )\n      }\n\n      return children\n    }\n\n    return (\n      <Component\n        ref={ref}\n        {...props}\n        className={clx(iconButtonVariants({ variant, size }), className)}\n        disabled={disabled || isLoading}\n      >\n        {renderInner()}\n      </Component>\n    )\n  }\n)\nIconButton.displayName = \"IconButton\"\n\nexport { IconButton, iconButtonVariants }\n"]}